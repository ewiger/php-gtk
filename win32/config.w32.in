// vim:ft=javascript
// $Id$
// "Master" config file; think of it as a configure.in equivalent.

STDOUT.WriteBlankLines(1);

CL = PATH_PROG('cl');

// avoid picking up midnight commander from cygwin
PATH_PROG('mc', WshShell.Environment("Process").Item("PATH"));
PATH_PROG('rc', WshShell.Environment("Process").Item("PATH"));

/* cygwin ships with 'link.exe'. Avoid searching the cygwin path for this, as we want the MS linker */
PATH_PROG('link', WshShell.Environment("Process").Item("PATH"), "LD");
PATH_PROG('nmake');

// we don't want to define LIB, as that will override the default library path set in that env var
PATH_PROG('lib', null, 'MAKE_LIB');
PATH_PROG('php');

STDOUT.WriteBlankLines(1);

if (CL) {

	VCVERS = probe_msvc_compiler_version(CL);
	var msversion = "unknown";

	if (VCVERS == 12) {
		msversion = "Microsoft Visual C++ 6.0";
	}
	if (VCVERS == 13) {
		msversion = "Microsoft VS.NET 2003";
	}
	if (VCVERS == 14) {
		msversion = "Microsoft VS.NET 2005";
	}
	STDOUT.WriteLine("Detected compiler version:  " + msversion);

} else {

	ERROR("MS C++ compiler is required");
}

STDOUT.WriteBlankLines(1);
ARG_IS('all', 'Configure all available extensions', 'no');
ARG_WITH('php-build', 'Path to where you extracted http://www.php.net/extra/win32build.zip. Assumes that it is a sibling of this source dir (..\\php_build) if not specified', 'no');
ARG_WITH('cygwin', 'Path to cygwin utilities on your system', '\\cygwin');

// stick objects somewhere outside of the source tree
ARG_ENABLE('object-out-dir', 'Alternative location for binary objects during build', '');
if (PHP_GTK_OBJECT_OUT_DIR.length) {
	if (!FSO.FolderExists(PHP_GTK_OBJECT_OUT_DIR)) {
		ERROR('Your chosen output directory ' + PHP_GTK_OBJECT_OUT_DIR + ' does not exist');
	}
	PHP_GTK_OBJECT_OUT_DIR += '\\';
}

ARG_ENABLE('debug', 'Compile with debugging symbols', "no");

// Set some debug-specific options
if (PHP_GTK_DEBUG == "yes") {
	DEFINE("BUILD_DIR", PHP_GTK_OBJECT_OUT_DIR + "Debug");
} else {
	DEFINE("BUILD_DIR", PHP_GTK_OBJECT_OUT_DIR + "Release");
}

DEFINE("PHPGTKDLL", "php-gtk2.dll");
DEFINE("PHPGTKLIB", "php-gtk2.lib");
get_version_numbers();

// General link flags
DEFINE("LDFLAGS", "/nologo");
// General DLL link flags
DEFINE("DLL_LDFLAGS", "/dll /machine:I386");
// PHP-GTK DLL link flags
DEFINE("PHP_GTK_LDFLAGS", "$(DLL_LDFLAGS)");

// General libs
DEFINE("LIBS", "kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib ole32.lib");

if (PHP_GTK_DEBUG == "yes") {
	DEFINE("CFLAGS", "/nologo /LDd /MDd /Gm /ZI /GZ /I . /I ..\\ /I ..\\.. /I main /I ..\\main /I ext /I ..\\ext /I ..\\php5\\main /I ..\\php5\\Zend /I ..\\php5\\TSRM /D ZEND_WIN32 /D ZTS=1 /D ZEND_DEBUG=0 /D PHP_WIN32 /D WIN32 /D _DEBUG /D _WINDOWS /D _MBCS /D _USRDLL");
	ADD_FLAG("LDFLAGS", "/debug");
} else {
	DEFINE("CFLAGS", "/nologo /MT /W3 /GX /O2 /I . /I ..\\ /I ..\\.. /I main /I ..\\main /I ext /I ..\\ext /I ..\\php5\\main /I ..\\php5\\Zend /I ..\\php5\\TSRM /D ZEND_WIN32 /D ZTS=1 /D ZEND_DEBUG=0 /D PHP_WIN32 /D WIN32 /D NDEBUG /D _WINDOWS /D _MBCS /D _USRDLL");
}

if (VCVERS < 14) {
	// Enable automatic precompiled headers
	ADD_FLAG('CFLAGS', '/YX /c');
}

if (VCVERS >= 14) {
	// fun stuff: MS deprecated ANSI stdio and similar functions - disable warnings
	// GS hardens the binary against buffer overruns
	ADD_FLAG('CFLAGS', '/GS /wd4996 ');
}

if (PHP_GTK_PHP_BUILD == 'no') {
	if (FSO.FolderExists("..\\php_build")) {
		PHP_GTK_PHP_BUILD = "..\\php_build";
	} else if (FSO.FolderExists("..\\win32build")) {
		PHP_GTK_PHP_BUILD = "..\\win32build";
	} else if (FSO.FolderExists("..\\php-win32-dev\\php_build")) {
		PHP_GTK_PHP_BUILD = "..\\php-win32-dev\\php_build";
	}
}

var php_usual_include_suspects = "..\\php_build\\include;..\\win32build\\include";
var php_usual_lib_suspects = "..\\php_build\\lib;..\\win32build\\lib";

probe_basic_headers();

ADD_SOURCES("main", "php_gtk.c php_gtk_ext.w32.c php_gtk_util.c phpg_closure.c phpg_exceptions.c phpg_gboxed.c phpg_gobject.c phpg_gtype.c phpg_gvalue.c phpg_support.c", "php-gtk");

