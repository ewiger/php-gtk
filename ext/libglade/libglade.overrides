/* vim: set ft=cpp fdm=marker et: */
%%
headers
#include <glade/glade.h>
#include "php_gtk_api.h"

typedef struct {
    zval *instance;
    zval *extra;
} phpg_autoc_t;

static void phpg_glade_signal_connect_auto(const gchar *handler_name, GObject *object,
                                           const gchar *signal_name, const gchar *signal_data,
                                           GObject *connect_object, gboolean after, phpg_autoc_t *data);

%% {{{ ignores [confirmed]
%%
ignore-glob
  *_get_type
%%
ignore
  glade_xml_construct
  glade_xml_signal_autoconnect_full
  glade_xml_signal_connect_data
  glade_xml_signal_connect_full
%% }}}

%% {{{ ignores [tbd]
%%
ignore
  glade_set_custom_handler
%% }}}

%% {{{ GladeXML
%%
override glade_xml_new
PHP_METHOD
{
    char *fname, *root = NULL, *domain = NULL;
    zend_bool free_fname, free_root, free_domain;
    GObject *wrapped_obj;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "u|uu", &fname, &free_fname, &root, &free_root, &domain, &free_domain)) {
        return;
    }

    wrapped_obj = (GObject *) glade_xml_new(fname, (const char *)root, (const char *)domain);

    if (free_fname) g_free(fname);
    if (free_root) g_free(root);
    if (free_domain) g_free(domain);

    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GladeXML);
    }

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}

%%
override glade_xml_new_from_buffer
PHP_METHOD
{
    char *buf, *root = NULL, *domain = NULL;
    zend_bool free_buf, free_root, free_domain;
    int buf_len;
    GladeXML *glade_obj;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "u#|uu", &buf, &buf_len, &free_buf, &root, &free_root, &domain, &free_domain)) {
        return;
    }

    glade_obj = glade_xml_new_from_buffer(buf, buf_len, (const char *)root, (const char *)domain);

    if (free_buf) g_free(buf);
    if (free_root) g_free(root);
    if (free_domain) g_free(domain);

    phpg_gobject_new(&return_value, (GObject *)glade_obj TSRMLS_CC);
}

%%
override glade_xml_get_widget_prefix
PHP_METHOD
{
    char *name;
    zend_bool free_name;
    GList *list, *item;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "u", &name, &free_name)) {
        return;
    }

    list = glade_xml_get_widget_prefix(GLADE_XML(PHPG_GOBJECT(this_ptr)), (const char *)name);
    if (free_name) g_free(name);

    array_init(return_value);
    for (item = list; item; item = item->next) {
        zval *php_item = NULL;
        phpg_gobject_new(&php_item, G_OBJECT(item->data) TSRMLS_CC);
        add_next_index_zval(return_value, php_item);
    }

    g_list_free(list);
}

%%
override glade_xml_signal_connect
static void phpg_glade_signal_connect_one(const gchar *handler_name, GObject *object,
                                          const gchar *signal_name, const gchar *signal_data,
                                          GObject *connect_object, gboolean after,
                                          gpointer *data)
{
    phpg_cb_data_t *cbd = (phpg_cb_data_t *)data;
    int handler_id;
    GClosure *closure = NULL;
    zval *php_object = NULL, *php_connect_object = NULL;
    TSRMLS_FETCH();

    if (connect_object) {
        phpg_gobject_new(&php_connect_object, (GObject*)connect_object TSRMLS_CC);
        closure = phpg_closure_new(cbd->callback, cbd->user_args, PHPG_CONNECT_REPLACE, php_connect_object TSRMLS_CC);
        zval_ptr_dtor(&php_connect_object);
    } else {
        closure = phpg_closure_new(cbd->callback, cbd->user_args, PHPG_CONNECT_NORMAL, NULL TSRMLS_CC);
    }

    phpg_gobject_new(&php_object, (GObject*)object TSRMLS_CC);
    phpg_gobject_watch_closure(php_object, closure TSRMLS_CC);
    handler_id = g_signal_connect_closure(object, signal_name, closure, after);

    zval_ptr_dtor(&php_object);
}

PHP_METHOD
{
    char *handlername = NULL;
    zval *callback = NULL, *extra = NULL;
    zend_bool free_handlername;
    phpg_cb_data_t *data;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_varargs(ZEND_NUM_ARGS(), 2, &extra, "uV", &handlername, &free_handlername, &callback))
        return;

    zval_add_ref(&callback);
    data = phpg_cb_data_new(callback, extra TSRMLS_CC);

    glade_xml_signal_connect_full(GLADE_XML(PHPG_GOBJECT(this_ptr)), handlername, 
                                  (GladeXMLConnectFunc)phpg_glade_signal_connect_one, data);

    if (free_handlername) g_free(handlername);
    phpg_cb_data_destroy(data);

    RETURN_NULL();
}

%%
override glade_xml_signal_autoconnect
static void phpg_glade_signal_connect_auto(const gchar *handler_name, GObject *object,
                                           const gchar *signal_name, const gchar *signal_data,
                                           GObject *connect_object, gboolean after, phpg_autoc_t *data)
{
    zval *callback = NULL, *php_object = NULL, *user_args = NULL;
    zval **callback_data = NULL, **callback_ptr = NULL;
    GClosure *closure = NULL;
    int handler_id, len = 0, connect_normal = 1;
    char *php_class = NULL, *php_method = NULL;
    zend_class_entry *ce = NULL, **pce;
    TSRMLS_FETCH();

    /*
     * First, check if the handler represents a static method. This can be used to invoke
     * Gtk/Gdk functions, such as Gtk::main_quit(). It may refer to a user class, of
     * course, but those connections are much less useful.
     */
    if (strstr(handler_name, "::")) {
        len = strcspn(handler_name, ":");
        php_class = safe_estrndup(handler_name, len);
        php_method = strstr(handler_name, "::") + 2;
        if (zend_lookup_class(php_class, strlen(php_class), &pce TSRMLS_CC) == SUCCESS) {
            ce = *pce;
            if (ce->type == ZEND_INTERNAL_CLASS) {
                connect_normal = 0;
            }
        }
        MAKE_STD_ZVAL(callback);
        array_init(callback);
        add_next_index_string(callback, php_class, 1);
        add_next_index_string(callback, php_method, 1);
        efree(php_class);
    } else {
        /*
         * Secondly, check if we are supposed to connect handlers to methods of the
         * specified object - signal_autoconnect_instance().
         */
        if (data->instance) {
            MAKE_STD_ZVAL(callback);
            array_init(callback);
            zval_add_ref(&data->instance);
            add_next_index_zval(callback, data->instance);
            add_next_index_string(callback, (char *)handler_name, 1);
            user_args = data->extra;

            /*
             * We verify callability right away, because classes cannot acquire new
             * methods at runtime (unless you decide to stab yourself in the foot with
             * runkit).
             */ 
            if (!zend_is_callable(callback, 0, NULL)) {
                php_error(E_NOTICE, "Unable to auto-connect handler '%s': no such method in the specified object of class '%s'", handler_name, Z_OBJCE_P(data->instance)->name);
                return;
            }
        } else {
            /*
             * Thirdly, if we have no object, we must have a map representing non-default
             * handler mappings of the form:
             *
             *   array('handler' => <callback>)
             *   array('handler' => array(<callback> [, $arg1, $arg2, ...]))
             *   array('handler' => array(null [, $arg1, $arg2, ...]))
             *
             * where <callback> is the standard PHP callback form. If null is specified
             * instead of callback, the connection will be made to the function of the
             * same name as the handler.
             */
            if (data->extra && zend_hash_find(Z_ARRVAL_P(data->extra), (char *)handler_name, strlen(handler_name) + 1, (void **)&callback_data) == SUCCESS) {
                /* Check if the value is callable. */
                if (zend_is_callable(*callback_data, 0, NULL)) {
                    zval_add_ref(callback_data);
                    callback = *callback_data;
                } else {
                    /*
                     * If not, check that it is an array with at least one entry, which is
                     * assumed to be the callback reference.
                     */ 
                    if (Z_TYPE_PP(callback_data) != IS_ARRAY ||
                        zend_hash_index_find(Z_ARRVAL_PP(callback_data), 0, (void **)&callback_ptr) == FAILURE) {
                        php_error(E_NOTICE, "Unable to auto-connect handler '%s': invalid callback data structure", handler_name);
                        return; 
                    }
                    if (Z_TYPE_PP(callback_ptr) != IS_NULL) {
                        zval_add_ref(callback_ptr);
                        callback = *callback_ptr;
                    }

                    /* Shift callback data - the rest are extra user arguments. */
                    zend_hash_index_del(Z_ARRVAL_PP(callback_data), 0);
                    user_args = *callback_data;
                }
            }
        }
    }

    /*
     * Make a simple function callback if everything else failed. 
     */
    if (callback == NULL) {
        MAKE_STD_ZVAL(callback);
        ZVAL_STRING(callback, (char *)handler_name, 1);
    }

    /*
     * If we have a swapped connection object, make a PHP wrapper for it and use it with
     * 'replace' type of connection.
     */
    if (connect_object) {
        zval *php_connect_object = NULL;
        phpg_gobject_new(&php_connect_object, (GObject*)connect_object TSRMLS_CC);
        closure = phpg_closure_new(callback, user_args, PHPG_CONNECT_REPLACE, php_connect_object TSRMLS_CC);
        /* it's okay to decrement the only reference to the wrapper here - the GObject will save it! */
        zval_ptr_dtor(&php_connect_object);
    } else if (!connect_normal) {
        closure = phpg_closure_new(callback, user_args, PHPG_CONNECT_SIMPLE, NULL TSRMLS_CC);
    } else {
        closure = phpg_closure_new(callback, user_args, PHPG_CONNECT_NORMAL, NULL TSRMLS_CC);
    }

    phpg_gobject_new(&php_object, (GObject*)object TSRMLS_CC);
    phpg_gobject_watch_closure(php_object, closure TSRMLS_CC);
    handler_id = g_signal_connect_closure(object, signal_name, closure, after);

    /* same as above - okay to decrement the reference here */
    zval_ptr_dtor(&php_object);
    zval_ptr_dtor(&callback);
    if (user_args) {
        zval_ptr_dtor(&user_args);
    }
}

PHP_METHOD
{
    zval *map = NULL;
    phpg_autoc_t data;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|a", &map))
        return;

    data.instance = NULL;
    data.extra = map;
    glade_xml_signal_autoconnect_full(GLADE_XML(PHPG_GOBJECT(this_ptr)),
                                      (GladeXMLConnectFunc)phpg_glade_signal_connect_auto, &data);
}

%%
add GladeXML signal_autoconnect_instance
PHP_METHOD
{
    zval *instance = NULL;
    zval *extra = NULL;
    phpg_autoc_t data;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_varargs(ZEND_NUM_ARGS(), 1, &extra, "o", &instance))
        return;

    data.instance = instance;
    data.extra = extra;
    glade_xml_signal_autoconnect_full(GLADE_XML(PHPG_GOBJECT(this_ptr)),
                                      (GladeXMLConnectFunc)phpg_glade_signal_connect_auto, &data);
}

%% }}}
