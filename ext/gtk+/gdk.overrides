/* vim: set ft=cpp fdm=marker et: */
/* TODO
 * fix gdk_gc_new2
 */
%%
headers
#include <gdk-pixbuf/gdk-pixbuf.h>

#if defined(GDK_WINDOWING_X11)
#include <gdk/gdkx.h>
#elif defined(GDK_WINDOWING_WIN32)
#include <gdk/gdkwin32.h>
#endif

/* make GDK_DISPLAY() the case macro */
#undef GDK_DISPLAY
#define GDK_DISPLAY(object) (GDK_DISPLAY_OBJECT(object))

/* Forward declaration, since gen_gtk.h is generated later. */
extern PHP_GTK_EXPORT_CE(gtkwidget_ce);

#include "gen_pango.h"

/* {{{ ignores */
%%
ignore-glob
    *_get_type

%%
ignore
    GdkDebugFlag
    GdkColorInfoFlags
%%
ignore
    gdk_pixmap_new
    gdk_gc_new2

/* }}} */

%%
override gdk_color_new
PHP_METHOD(GdkColor, __construct)
{
    /* TODO */
}

%%
override gdk_rectangle_new
PHP_METHOD(GdkRectangle, __construct)
{
    phpg_gboxed_t *pobj = NULL;
    GdkRectangle rect = { 0, 0, 0, 0 };

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "iiii", &(rect.x), &(rect.y),
                            &(rect.width), &(rect.height))) {
        PHPG_THROW_CONSTRUCT_EXCEPTION();
    }

    pobj = zend_object_store_get_object(this_ptr TSRMLS_CC);
    pobj->gtype = GDK_TYPE_RECTANGLE;
    pobj->boxed = g_boxed_copy(GDK_TYPE_RECTANGLE, &rect);
    pobj->free_on_destroy = TRUE;
}

%%
override gdk_rectangle_intersect
PHP_METHOD(GdkRectangle, intersect)
{
    /* TODO */
}

%%
override-prop GdkDrawable xid
PHPG_PROP_READER(GdkDrawable, xid)
{
#if defined(GDK_WINDOWING_X11)
	RETVAL_LONG(GDK_DRAWABLE_XID(((GdkDrawable *)((phpg_gobject_t *)object)->obj)));
#else
    php_error(E_WARNING, "xid property is not supported");
#endif
    return SUCCESS;
}

%%override-prop GdkPixbuf pixel_array
PHPG_PROP_READER(GdkPixbuf, pixel_array)
{
    /* TODO */
    return SUCCESS;
}

%%
override-handler GdkEvent read_property
static zval* phpg_gdkevent_read_property_handler(zval *object, zval *member, int type TSRMLS_DC)
{
	zval tmp_member;
	zval result, *result_ptr = NULL;

 	if (member->type != IS_STRING) {
		tmp_member = *member;
		zval_copy_ctor(&tmp_member);
		convert_to_string(&tmp_member);
		member = &tmp_member;
	}
    printf("GdkEvent read property handler\n");
    result_ptr = zend_get_std_object_handlers()->read_property(object, member, type TSRMLS_CC);
	if (member == &tmp_member) {
		zval_dtor(member);
	}
    return result_ptr;
}
