;; -*- scheme -*-

; object definitions ...
(object Object
  (in-module Gtk)
  (c-name GtkObject)
)

(object ItemFactory
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkItemFactory)
)

(object Data
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkData)
)

(object Adjustment
  (in-module Gtk)
  (parent Data (Gtk))
  (c-name GtkAdjustment)
  (field (type-and-name gfloat value))
  (field (type-and-name gfloat lower))
  (field (type-and-name gfloat upper))
  (field (type-and-name gfloat step_increment))
  (field (type-and-name gfloat page_increment))
  (field (type-and-name gfloat page_size))
)

(object Tooltips
  (in-module Gtk)
  (parent Data (Gtk))
  (c-name GtkTooltips)
)

(object Widget
  (in-module Gtk)
  (parent Object (Gtk))
  (c-name GtkWidget)
  (field (type-and-name GtkStyle* style))
  (field (type-and-name GdkWindow* window))
  (field (type-and-name GtkAllocation allocation))
  (field (type-and-name guint state))
)

(object Separator
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkSeparator)
)

(object VSeparator
  (in-module Gtk)
  (parent Separator (Gtk))
  (c-name GtkVSeparator)
)

(object HSeparator
  (in-module Gtk)
  (parent Separator (Gtk))
  (c-name GtkHSeparator)
)

(object Ruler
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkRuler)
)

(object VRuler
  (in-module Gtk)
  (parent Ruler (Gtk))
  (c-name GtkVRuler)
)

(object HRuler
  (in-module Gtk)
  (parent Ruler (Gtk))
  (c-name GtkHRuler)
)

(object Range
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkRange)
)

(object Scrollbar
  (in-module Gtk)
  (parent Range (Gtk))
  (c-name GtkScrollbar)
)

(object VScrollbar
  (in-module Gtk)
  (parent Scrollbar (Gtk))
  (c-name GtkVScrollbar)
)

(object HScrollbar
  (in-module Gtk)
  (parent Scrollbar (Gtk))
  (c-name GtkHScrollbar)
)

(object Scale
  (in-module Gtk)
  (parent Range (Gtk))
  (c-name GtkScale)
)

(object VScale
  (in-module Gtk)
  (parent Scale (Gtk))
  (c-name GtkVScale)
)

(object HScale
  (in-module Gtk)
  (parent Scale (Gtk))
  (c-name GtkHScale)
)

(object Progress
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkProgress)
)

(object ProgressBar
  (in-module Gtk)
  (parent Progress (Gtk))
  (c-name GtkProgressBar)
)

(object Preview
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkPreview)
)

(object Misc
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkMisc)
  (field (type-and-name gfloat xalign))
  (field (type-and-name gfloat yalign))
  (field (type-and-name guint16 xpad))
  (field (type-and-name guint16 ypad))
)

(object Pixmap
  (in-module Gtk)
  (parent Misc (Gtk))
  (c-name GtkPixmap)
)

(object Arrow
  (in-module Gtk)
  (parent Misc (Gtk))
  (c-name GtkArrow)
  (field (type-and-name gint16 arrow_type))
  (field (type-and-name gint16 shadow_type))
)

(object Image
  (in-module Gtk)
  (parent Misc (Gtk))
  (c-name GtkImage)
)

(object Label
  (in-module Gtk)
  (parent Misc (Gtk))
  (c-name GtkLabel)
)

(object AccelLabel
  (in-module Gtk)
  (parent Label (Gtk))
  (c-name GtkAccelLabel)
)

(object Editable
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkEditable)
  (field (type-and-name guint selection_start_pos))
  (field (type-and-name guint selection_end_pos))
  (field (type-and-name gboolean has_selection))
)

(object Text
  (in-module Gtk)
  (parent Editable (Gtk))
  (c-name GtkText)
  (field (type-and-name GtkAdjustment* hadj))
  (field (type-and-name GtkAdjustment* vadj))
)

(object Entry
  (in-module Gtk)
  (parent Editable (Gtk))
  (c-name GtkEntry)
)

(object SpinButton
  (in-module Gtk)
  (parent Entry (Gtk))
  (c-name GtkSpinButton)
)

(object DrawingArea
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkDrawingArea)
)

(object Curve
  (in-module Gtk)
  (parent DrawingArea (Gtk))
  (c-name GtkCurve)
)

(object Container
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkContainer)
)

(object Tree
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkTree)
)

(object Toolbar
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkToolbar)
)

(object Table
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkTable)
)

(object Socket
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkSocket)
)

(object Paned
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkPaned)
)

(object VPaned
  (in-module Gtk)
  (parent Paned (Gtk))
  (c-name GtkVPaned)
)

(object HPaned
  (in-module Gtk)
  (parent Paned (Gtk))
  (c-name GtkHPaned)
)

(object Packer
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkPacker)
)

(object Notebook
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkNotebook)
  (field (type-and-name GtkPositionType tab_pos))
)

(object FontSelection
  (in-module Gtk)
  (parent Notebook (Gtk))
  (c-name GtkFontSelection)
)

(object MenuShell
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkMenuShell)
)

(object Menu
  (in-module Gtk)
  (parent MenuShell (Gtk))
  (c-name GtkMenu)
)

(object MenuBar
  (in-module Gtk)
  (parent MenuShell (Gtk))
  (c-name GtkMenuBar)
)

(object List
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkList)
  (field (type-and-name GList* selection))
)

(object Layout
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkLayout)
)

(object Fixed
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkFixed)
  (field (type-and-name GList* children))
)

(object Bin
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkBin)
  (field (type-and-name GtkWidget* child))
)

(object Viewport
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkViewport)
)

(object ScrolledWindow
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkScrolledWindow)
)

(object Item
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkItem)
)

(object TreeItem
  (in-module Gtk)
  (parent Item (Gtk))
  (c-name GtkTreeItem)
  (field (type-and-name GtkWidget* subtree))
)

(object MenuItem
  (in-module Gtk)
  (parent Item (Gtk))
  (c-name GtkMenuItem)
)

(object TearoffMenuItem
  (in-module Gtk)
  (parent MenuItem (Gtk))
  (c-name GtkTearoffMenuItem)
)

(object CheckMenuItem
  (in-module Gtk)
  (parent MenuItem (Gtk))
  (c-name GtkCheckMenuItem)
  (field (type-and-name gboolean active))
)

(object RadioMenuItem
  (in-module Gtk)
  (parent CheckMenuItem (Gtk))
  (c-name GtkRadioMenuItem)
)

(object ListItem
  (in-module Gtk)
  (parent Item (Gtk))
  (c-name GtkListItem)
)

(object Invisible
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkInvisible)
)

(object HandleBox
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkHandleBox)
  (field (type-and-name GtkShadowType shadow_type))
  (field (type-and-name GtkPositionType handle_position))
  (field (type-and-name gint snap_edge))
  (field (type-and-name gboolean child_detached))
)

(object Frame
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkFrame)
)

(object EventBox
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkEventBox)
)

(object Alignment
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkAlignment)
)

(object Button
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkButton)
)

(object ToggleButton
  (in-module Gtk)
  (parent Button (Gtk))
  (c-name GtkToggleButton)
  (field (type-and-name gboolean draw_indicator))
)

(object CheckButton
  (in-module Gtk)
  (parent ToggleButton (Gtk))
  (c-name GtkCheckButton)
)

(object RadioButton
  (in-module Gtk)
  (parent CheckButton (Gtk))
  (c-name GtkRadioButton)
)

(object OptionMenu
  (in-module Gtk)
  (parent Button (Gtk))
  (c-name GtkOptionMenu)
)

(object Box
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkBox)
  (field (type-and-name GList* children))
  (field (type-and-name gint16 spacing))
  (field (type-and-name gboolean homogeneous))
)

(object VBox
  (in-module Gtk)
  (parent Box (Gtk))
  (c-name GtkVBox)
)

(object ColorSelection
  (in-module Gtk)
  (parent VBox (Gtk))
  (c-name GtkColorSelection)
)

(object GammaCurve
  (in-module Gtk)
  (parent VBox (Gtk))
  (c-name GtkGammaCurve)
  (field (type-and-name GtkWidget* table))
  (field (type-and-name GtkWidget* curve))
  (field (type-and-name gfloat gamma))
  (field (type-and-name GtkWidget* gamma_dialog))
  (field (type-and-name GtkWidget* gamma_text))
)

(object HBox
  (in-module Gtk)
  (parent Box (Gtk))
  (c-name GtkHBox)
)

(object Statusbar
  (in-module Gtk)
  (parent HBox (Gtk))
  (c-name GtkStatusbar)
)

(object Combo
  (in-module Gtk)
  (parent HBox (Gtk))
  (c-name GtkCombo)
  (field (type-and-name GtkWidget* entry))
  (field (type-and-name GtkWidget* list))
)

(object ButtonBox
  (in-module Gtk)
  (parent Box (Gtk))
  (c-name GtkButtonBox)
)

(object VButtonBox
  (in-module Gtk)
  (parent ButtonBox (Gtk))
  (c-name GtkVButtonBox)
)

(object HButtonBox
  (in-module Gtk)
  (parent ButtonBox (Gtk))
  (c-name GtkHButtonBox)
)

(object CList
  (in-module Gtk)
  (parent Container (Gtk))
  (c-name GtkCList)
  (field (type-and-name gint focus_row))
  (field (type-and-name gint rows))
  (field (type-and-name gint sort_column))
  (field (type-and-name GtkSortType sort_type))
  (field (type-and-name GList* selection))
  (field (type-and-name GtkSelectionMode selection_mode))
  (field (type-and-name GList* row_list))
)

(object CTree
  (in-module Gtk)
  (parent CList (Gtk))
  (c-name GtkCTree)
  (field (type-and-name gint tree_indent))
  (field (type-and-name gint tree_spacing))
  (field (type-and-name gint tree_column))
  (field (type-and-name GtkCTreeLineStyle line_style))
  (field (type-and-name GtkCTreeExpanderStyle expander_style))
  (field (type-and-name GtkCList clist))
  (field (type-and-name GList* selection))
  (field (type-and-name GList* row_list))
)

(object Calendar
  (in-module Gtk)
  (parent Widget (Gtk))
  (c-name GtkCalendar)
  (field (type-and-name gint month))
  (field (type-and-name gint year))
  (field (type-and-name gint selected_day))
  (field (type-and-name gint num_marked_dates))
  (field (type-and-name gint* marked_date))
)

(object Window
  (in-module Gtk)
  (parent Bin (Gtk))
  (c-name GtkWindow)
)

(object Plug
  (in-module Gtk)
  (parent Window (Gtk))
  (c-name GtkPlug)
)

(object FontSelectionDialog
  (in-module Gtk)
  (parent Window (Gtk))
  (c-name GtkFontSelectionDialog)
  (field (type-and-name GtkWidget* fontsel))
  (field (type-and-name GtkWidget* main_vbox))
  (field (type-and-name GtkWidget* action_area))
  (field (type-and-name GtkWidget* ok_button))
  (field (type-and-name GtkWidget* apply_button))
  (field (type-and-name GtkWidget* cancel_button))
)

(object FileSelection
  (in-module Gtk)
  (parent Window (Gtk))
  (c-name GtkFileSelection)
  (field (type-and-name GtkWidget* dir_list))
  (field (type-and-name GtkWidget* file_list))
  (field (type-and-name GtkWidget* selection_entry))
  (field (type-and-name GtkWidget* selection_text))
  (field (type-and-name GtkWidget* main_vbox))
  (field (type-and-name GtkWidget* ok_button))
  (field (type-and-name GtkWidget* cancel_button))
  (field (type-and-name GtkWidget* help_button))
)

(object Dialog
  (in-module Gtk)
  (parent Window (Gtk))
  (c-name GtkDialog)
  (field (type-and-name GtkWidget* vbox))
  (field (type-and-name GtkWidget* action_area))
)

(object InputDialog
  (in-module Gtk)
  (parent Dialog (Gtk))
  (c-name GtkInputDialog)
  (field (type-and-name GtkWidget* close_button))
  (field (type-and-name GtkWidget* save_button))
)

(object ColorSelectionDialog
  (in-module Gtk)
  (parent Window (Gtk))
  (c-name GtkColorSelectionDialog)
  (field (type-and-name GtkWidget* colorsel))
  (field (type-and-name GtkWidget* main_vbox))
  (field (type-and-name GtkWidget* ok_button))
  (field (type-and-name GtkWidget* cancel_button))
  (field (type-and-name GtkWidget* help_button))
)

(object TipsQuery
  (in-module Gtk)
  (parent Label (Gtk))
  (c-name GtkTipsQuery)
)

(object AspectFrame
  (in-module Gtk)
  (parent Frame (Gtk))
  (c-name GtkAspectFrame)
)

;; Structs

(struct Allocation
  (in-module Gtk)
  (c-name GtkAllocation)
  (field (type-and-name gint16 x))
  (field (type-and-name gint16 y))
  (field (type-and-name guint16 width))
  (field (type-and-name guint16 height))
)

(struct Requisition
  (in-module Gtk)
  (c-name GtkRequisition)
  (field (type-and-name gint16 width))
  (field (type-and-name gint16 height))
)

;; Enumerations and flags ...

(flags AccelFlags
  (in-module Gtk)
  (c-name GtkAccelFlags)
  (value (name visible) (c-name GTK_ACCEL_VISIBLE))
  (value (name signal-visible) (c-name GTK_ACCEL_SIGNAL_VISIBLE))
  (value (name locked) (c-name GTK_ACCEL_LOCKED))
  (value (name mask) (c-name GTK_ACCEL_MASK))
)

(flags CalendarDisplayOptions
  (in-module Gtk)
  (c-name GtkCalendarDisplayOptions)
  (value (name show-heading) (c-name GTK_CALENDAR_SHOW_HEADING))
  (value (name show-day-names) (c-name GTK_CALENDAR_SHOW_DAY_NAMES))
  (value (name no-month-change) (c-name GTK_CALENDAR_NO_MONTH_CHANGE))
  (value (name show-week-numbers) (c-name GTK_CALENDAR_SHOW_WEEK_NUMBERS))
  (value (name week-start-monday) (c-name GTK_CALENDAR_WEEK_START_MONDAY))
)

(enum CellType
  (in-module Gtk)
  (c-name GtkCellType)
  (value (name empty) (c-name GTK_CELL_EMPTY))
  (value (name text) (c-name GTK_CELL_TEXT))
  (value (name pixmap) (c-name GTK_CELL_PIXMAP))
  (value (name pixtext) (c-name GTK_CELL_PIXTEXT))
  (value (name widget) (c-name GTK_CELL_WIDGET))
)

(enum CListDragPos
  (in-module Gtk)
  (c-name GtkCListDragPos)
  (value (name none) (c-name GTK_CLIST_DRAG_NONE))
  (value (name before) (c-name GTK_CLIST_DRAG_BEFORE))
  (value (name into) (c-name GTK_CLIST_DRAG_INTO))
  (value (name after) (c-name GTK_CLIST_DRAG_AFTER))
)

(flags ButtonAction
  (in-module Gtk)
  (c-name GtkButtonAction)
  (value (name ignored) (c-name GTK_BUTTON_IGNORED))
  (value (name selects) (c-name GTK_BUTTON_SELECTS))
  (value (name drags) (c-name GTK_BUTTON_DRAGS))
  (value (name expands) (c-name GTK_BUTTON_EXPANDS))
)

(enum CTreePos
  (in-module Gtk)
  (c-name GtkCTreePos)
  (value (name before) (c-name GTK_CTREE_POS_BEFORE))
  (value (name as-child) (c-name GTK_CTREE_POS_AS_CHILD))
  (value (name after) (c-name GTK_CTREE_POS_AFTER))
)

(enum CTreeLineStyle
  (in-module Gtk)
  (c-name GtkCTreeLineStyle)
  (value (name none) (c-name GTK_CTREE_LINES_NONE))
  (value (name solid) (c-name GTK_CTREE_LINES_SOLID))
  (value (name dotted) (c-name GTK_CTREE_LINES_DOTTED))
  (value (name tabbed) (c-name GTK_CTREE_LINES_TABBED))
)

(enum CTreeExpanderStyle
  (in-module Gtk)
  (c-name GtkCTreeExpanderStyle)
  (value (name none) (c-name GTK_CTREE_EXPANDER_NONE))
  (value (name square) (c-name GTK_CTREE_EXPANDER_SQUARE))
  (value (name triangle) (c-name GTK_CTREE_EXPANDER_TRIANGLE))
  (value (name circular) (c-name GTK_CTREE_EXPANDER_CIRCULAR))
)

(enum CTreeExpansionType
  (in-module Gtk)
  (c-name GtkCTreeExpansionType)
  (value (name expand) (c-name GTK_CTREE_EXPANSION_EXPAND))
  (value (name expand-recursive) (c-name GTK_CTREE_EXPANSION_EXPAND_RECURSIVE))
  (value (name collapse) (c-name GTK_CTREE_EXPANSION_COLLAPSE))
  (value (name collapse-recursive) (c-name GTK_CTREE_EXPANSION_COLLAPSE_RECURSIVE))
  (value (name toggle) (c-name GTK_CTREE_EXPANSION_TOGGLE))
  (value (name toggle-recursive) (c-name GTK_CTREE_EXPANSION_TOGGLE_RECURSIVE))
)

(flags DebugFlag
  (in-module Gtk)
  (c-name GtkDebugFlag)
  (value (name objects) (c-name GTK_DEBUG_OBJECTS))
  (value (name misc) (c-name GTK_DEBUG_MISC))
  (value (name signals) (c-name GTK_DEBUG_SIGNALS))
  (value (name dnd) (c-name GTK_DEBUG_DND))
  (value (name plugsocket) (c-name GTK_DEBUG_PLUGSOCKET))
)

(flags DestDefaults
  (in-module Gtk)
  (c-name GtkDestDefaults)
  (value (name motion) (c-name GTK_DEST_DEFAULT_MOTION))
  (value (name highlight) (c-name GTK_DEST_DEFAULT_HIGHLIGHT))
  (value (name drop) (c-name GTK_DEST_DEFAULT_DROP))
  (value (name all) (c-name GTK_DEST_DEFAULT_ALL))
)

(flags TargetFlags
  (in-module Gtk)
  (c-name GtkTargetFlags)
  (value (name app) (c-name GTK_TARGET_SAME_APP))
  (value (name widget) (c-name GTK_TARGET_SAME_WIDGET))
)

(enum ArrowType
  (in-module Gtk)
  (c-name GtkArrowType)
  (value (name up) (c-name GTK_ARROW_UP))
  (value (name down) (c-name GTK_ARROW_DOWN))
  (value (name left) (c-name GTK_ARROW_LEFT))
  (value (name right) (c-name GTK_ARROW_RIGHT))
)

(flags AttachOptions
  (in-module Gtk)
  (c-name GtkAttachOptions)
  (value (name expand) (c-name GTK_EXPAND))
  (value (name shrink) (c-name GTK_SHRINK))
  (value (name fill) (c-name GTK_FILL))
)

(enum ButtonBoxStyle
  (in-module Gtk)
  (c-name GtkButtonBoxStyle)
  (value (name default-style) (c-name GTK_BUTTONBOX_DEFAULT_STYLE))
  (value (name spread) (c-name GTK_BUTTONBOX_SPREAD))
  (value (name edge) (c-name GTK_BUTTONBOX_EDGE))
  (value (name start) (c-name GTK_BUTTONBOX_START))
  (value (name end) (c-name GTK_BUTTONBOX_END))
)

(enum CurveType
  (in-module Gtk)
  (c-name GtkCurveType)
  (value (name linear) (c-name GTK_CURVE_TYPE_LINEAR))
  (value (name spline) (c-name GTK_CURVE_TYPE_SPLINE))
  (value (name free) (c-name GTK_CURVE_TYPE_FREE))
)

(enum DirectionType
  (in-module Gtk)
  (c-name GtkDirectionType)
  (value (name tab-forward) (c-name GTK_DIR_TAB_FORWARD))
  (value (name tab-backward) (c-name GTK_DIR_TAB_BACKWARD))
  (value (name up) (c-name GTK_DIR_UP))
  (value (name down) (c-name GTK_DIR_DOWN))
  (value (name left) (c-name GTK_DIR_LEFT))
  (value (name right) (c-name GTK_DIR_RIGHT))
)

(enum Justification
  (in-module Gtk)
  (c-name GtkJustification)
  (value (name left) (c-name GTK_JUSTIFY_LEFT))
  (value (name right) (c-name GTK_JUSTIFY_RIGHT))
  (value (name center) (c-name GTK_JUSTIFY_CENTER))
  (value (name fill) (c-name GTK_JUSTIFY_FILL))
)

(enum MatchType
  (in-module Gtk)
  (c-name GtkMatchType)
  (value (name all) (c-name GTK_MATCH_ALL))
  (value (name all-tail) (c-name GTK_MATCH_ALL_TAIL))
  (value (name head) (c-name GTK_MATCH_HEAD))
  (value (name tail) (c-name GTK_MATCH_TAIL))
  (value (name exact) (c-name GTK_MATCH_EXACT))
  (value (name last) (c-name GTK_MATCH_LAST))
)

(enum MenuDirectionType
  (in-module Gtk)
  (c-name GtkMenuDirectionType)
  (value (name parent) (c-name GTK_MENU_DIR_PARENT))
  (value (name child) (c-name GTK_MENU_DIR_CHILD))
  (value (name next) (c-name GTK_MENU_DIR_NEXT))
  (value (name prev) (c-name GTK_MENU_DIR_PREV))
)

(enum MenuFactoryType
  (in-module Gtk)
  (c-name GtkMenuFactoryType)
  (value (name menu) (c-name GTK_MENU_FACTORY_MENU))
  (value (name menu-bar) (c-name GTK_MENU_FACTORY_MENU_BAR))
  (value (name option-menu) (c-name GTK_MENU_FACTORY_OPTION_MENU))
)

(enum MetricType
  (in-module Gtk)
  (c-name GtkMetricType)
  (value (name pixels) (c-name GTK_PIXELS))
  (value (name inches) (c-name GTK_INCHES))
  (value (name centimeters) (c-name GTK_CENTIMETERS))
)

(enum Orientation
  (in-module Gtk)
  (c-name GtkOrientation)
  (value (name horizontal) (c-name GTK_ORIENTATION_HORIZONTAL))
  (value (name vertical) (c-name GTK_ORIENTATION_VERTICAL))
)

(enum CornerType
  (in-module Gtk)
  (c-name GtkCornerType)
  (value (name top-left) (c-name GTK_CORNER_TOP_LEFT))
  (value (name bottom-left) (c-name GTK_CORNER_BOTTOM_LEFT))
  (value (name top-right) (c-name GTK_CORNER_TOP_RIGHT))
  (value (name bottom-right) (c-name GTK_CORNER_BOTTOM_RIGHT))
)

(enum PackType
  (in-module Gtk)
  (c-name GtkPackType)
  (value (name start) (c-name GTK_PACK_START))
  (value (name end) (c-name GTK_PACK_END))
)

(enum PathPriorityType
  (in-module Gtk)
  (c-name GtkPathPriorityType)
  (value (name lowest) (c-name GTK_PATH_PRIO_LOWEST))
  (value (name gtk) (c-name GTK_PATH_PRIO_GTK))
  (value (name application) (c-name GTK_PATH_PRIO_APPLICATION))
  (value (name rc) (c-name GTK_PATH_PRIO_RC))
  (value (name highest) (c-name GTK_PATH_PRIO_HIGHEST))
  (value (name mask) (c-name GTK_PATH_PRIO_MASK))
)

(enum PathType
  (in-module Gtk)
  (c-name GtkPathType)
  (value (name widget) (c-name GTK_PATH_WIDGET))
  (value (name widget-class) (c-name GTK_PATH_WIDGET_CLASS))
  (value (name class) (c-name GTK_PATH_CLASS))
)

(enum PolicyType
  (in-module Gtk)
  (c-name GtkPolicyType)
  (value (name always) (c-name GTK_POLICY_ALWAYS))
  (value (name automatic) (c-name GTK_POLICY_AUTOMATIC))
  (value (name never) (c-name GTK_POLICY_NEVER))
)

(enum PositionType
  (in-module Gtk)
  (c-name GtkPositionType)
  (value (name left) (c-name GTK_POS_LEFT))
  (value (name right) (c-name GTK_POS_RIGHT))
  (value (name top) (c-name GTK_POS_TOP))
  (value (name bottom) (c-name GTK_POS_BOTTOM))
)

(enum PreviewType
  (in-module Gtk)
  (c-name GtkPreviewType)
  (value (name color) (c-name GTK_PREVIEW_COLOR))
  (value (name grayscale) (c-name GTK_PREVIEW_GRAYSCALE))
)

(enum ReliefStyle
  (in-module Gtk)
  (c-name GtkReliefStyle)
  (value (name normal) (c-name GTK_RELIEF_NORMAL))
  (value (name half) (c-name GTK_RELIEF_HALF))
  (value (name none) (c-name GTK_RELIEF_NONE))
)

(enum ResizeMode
  (in-module Gtk)
  (c-name GtkResizeMode)
  (value (name parent) (c-name GTK_RESIZE_PARENT))
  (value (name queue) (c-name GTK_RESIZE_QUEUE))
  (value (name immediate) (c-name GTK_RESIZE_IMMEDIATE))
)

(flags SignalRunType
  (in-module Gtk)
  (c-name GtkSignalRunType)
  (value (name first) (c-name GTK_RUN_FIRST))
  (value (name last) (c-name GTK_RUN_LAST))
  (value (name both) (c-name GTK_RUN_BOTH))
  (value (name no-recurse) (c-name GTK_RUN_NO_RECURSE))
  (value (name action) (c-name GTK_RUN_ACTION))
  (value (name no-hooks) (c-name GTK_RUN_NO_HOOKS))
)

(enum ScrollType
  (in-module Gtk)
  (c-name GtkScrollType)
  (value (name none) (c-name GTK_SCROLL_NONE))
  (value (name step-backward) (c-name GTK_SCROLL_STEP_BACKWARD))
  (value (name step-forward) (c-name GTK_SCROLL_STEP_FORWARD))
  (value (name page-backward) (c-name GTK_SCROLL_PAGE_BACKWARD))
  (value (name page-forward) (c-name GTK_SCROLL_PAGE_FORWARD))
  (value (name jump) (c-name GTK_SCROLL_JUMP))
)

(enum SelectionMode
  (in-module Gtk)
  (c-name GtkSelectionMode)
  (value (name single) (c-name GTK_SELECTION_SINGLE))
  (value (name browse) (c-name GTK_SELECTION_BROWSE))
  (value (name multiple) (c-name GTK_SELECTION_MULTIPLE))
  (value (name extended) (c-name GTK_SELECTION_EXTENDED))
)

(enum ShadowType
  (in-module Gtk)
  (c-name GtkShadowType)
  (value (name none) (c-name GTK_SHADOW_NONE))
  (value (name in) (c-name GTK_SHADOW_IN))
  (value (name out) (c-name GTK_SHADOW_OUT))
  (value (name etched-in) (c-name GTK_SHADOW_ETCHED_IN))
  (value (name etched-out) (c-name GTK_SHADOW_ETCHED_OUT))
)

(enum StateType
  (in-module Gtk)
  (c-name GtkStateType)
  (value (name normal) (c-name GTK_STATE_NORMAL))
  (value (name active) (c-name GTK_STATE_ACTIVE))
  (value (name prelight) (c-name GTK_STATE_PRELIGHT))
  (value (name selected) (c-name GTK_STATE_SELECTED))
  (value (name insensitive) (c-name GTK_STATE_INSENSITIVE))
)

(enum SubmenuDirection
  (in-module Gtk)
  (c-name GtkSubmenuDirection)
  (value (name left) (c-name GTK_DIRECTION_LEFT))
  (value (name right) (c-name GTK_DIRECTION_RIGHT))
)

(enum SubmenuPlacement
  (in-module Gtk)
  (c-name GtkSubmenuPlacement)
  (value (name top-bottom) (c-name GTK_TOP_BOTTOM))
  (value (name left-right) (c-name GTK_LEFT_RIGHT))
)

(enum ToolbarStyle
  (in-module Gtk)
  (c-name GtkToolbarStyle)
  (value (name icons) (c-name GTK_TOOLBAR_ICONS))
  (value (name text) (c-name GTK_TOOLBAR_TEXT))
  (value (name both) (c-name GTK_TOOLBAR_BOTH))
)

(enum TroughType
  (in-module Gtk)
  (c-name GtkTroughType)
  (value (name none) (c-name GTK_TROUGH_NONE))
  (value (name start) (c-name GTK_TROUGH_START))
  (value (name end) (c-name GTK_TROUGH_END))
  (value (name jump) (c-name GTK_TROUGH_JUMP))
)

(enum UpdateType
  (in-module Gtk)
  (c-name GtkUpdateType)
  (value (name continuous) (c-name GTK_UPDATE_CONTINUOUS))
  (value (name discontinuous) (c-name GTK_UPDATE_DISCONTINUOUS))
  (value (name delayed) (c-name GTK_UPDATE_DELAYED))
)

(enum Visibility
  (in-module Gtk)
  (c-name GtkVisibility)
  (value (name none) (c-name GTK_VISIBILITY_NONE))
  (value (name partial) (c-name GTK_VISIBILITY_PARTIAL))
  (value (name full) (c-name GTK_VISIBILITY_FULL))
)

(enum WindowPosition
  (in-module Gtk)
  (c-name GtkWindowPosition)
  (value (name none) (c-name GTK_WIN_POS_NONE))
  (value (name center) (c-name GTK_WIN_POS_CENTER))
  (value (name mouse) (c-name GTK_WIN_POS_MOUSE))
  (value (name center-always) (c-name GTK_WIN_POS_CENTER_ALWAYS))
)

(enum WindowType
  (in-module Gtk)
  (c-name GtkWindowType)
  (value (name toplevel) (c-name GTK_WINDOW_TOPLEVEL))
  (value (name dialog) (c-name GTK_WINDOW_DIALOG))
  (value (name popup) (c-name GTK_WINDOW_POPUP))
)

(enum SortType
  (in-module Gtk)
  (c-name GtkSortType)
  (value (name ascending) (c-name GTK_SORT_ASCENDING))
  (value (name descending) (c-name GTK_SORT_DESCENDING))
)

(enum FontMetricType
  (in-module Gtk)
  (c-name GtkFontMetricType)
  (value (name ixels) (c-name GTK_FONT_METRIC_PIXELS))
  (value (name oints) (c-name GTK_FONT_METRIC_POINTS))
)

(flags FontType
  (in-module Gtk)
  (c-name GtkFontType)
  (value (name bitmap) (c-name GTK_FONT_BITMAP))
  (value (name scalable) (c-name GTK_FONT_SCALABLE))
  (value (name scalable-bitmap) (c-name GTK_FONT_SCALABLE_BITMAP))
  (value (name all) (c-name GTK_FONT_ALL))
)

(enum FontFilterType
  (in-module Gtk)
  (c-name GtkFontFilterType)
  (value (name base) (c-name GTK_FONT_FILTER_BASE))
  (value (name user) (c-name GTK_FONT_FILTER_USER))
)

(flags ObjectFlags
  (in-module Gtk)
  (c-name GtkObjectFlags)
  (value (name destroyed) (c-name GTK_DESTROYED))
  (value (name floating) (c-name GTK_FLOATING))
  (value (name connected) (c-name GTK_CONNECTED))
  (value (name constructed) (c-name GTK_CONSTRUCTED))
)

(flags ArgFlags
  (in-module Gtk)
  (c-name GtkArgFlags)
  (value (name readable) (c-name GTK_ARG_READABLE))
  (value (name writable) (c-name GTK_ARG_WRITABLE))
  (value (name construct) (c-name GTK_ARG_CONSTRUCT))
  (value (name construct-only) (c-name GTK_ARG_CONSTRUCT_ONLY))
  (value (name child-arg) (c-name GTK_ARG_CHILD_ARG))
  (value (name mask) (c-name GTK_ARG_MASK))
  (value (name readwrite) (c-name GTK_ARG_READWRITE))
)

(flags PackerOptions
  (in-module Gtk)
  (c-name GtkPackerOptions)
  (value (name pack-expand) (c-name GTK_PACK_EXPAND))
  (value (name fill-x) (c-name GTK_FILL_X))
  (value (name fill-y) (c-name GTK_FILL_Y))
)

(enum SideType
  (in-module Gtk)
  (c-name GtkSideType)
  (value (name top) (c-name GTK_SIDE_TOP))
  (value (name bottom) (c-name GTK_SIDE_BOTTOM))
  (value (name left) (c-name GTK_SIDE_LEFT))
  (value (name right) (c-name GTK_SIDE_RIGHT))
)

(enum AnchorType
  (in-module Gtk)
  (c-name GtkAnchorType)
  (value (name center) (c-name GTK_ANCHOR_CENTER))
  (value (name north) (c-name GTK_ANCHOR_NORTH))
  (value (name north-west) (c-name GTK_ANCHOR_NORTH_WEST))
  (value (name north-east) (c-name GTK_ANCHOR_NORTH_EAST))
  (value (name south) (c-name GTK_ANCHOR_SOUTH))
  (value (name south-west) (c-name GTK_ANCHOR_SOUTH_WEST))
  (value (name south-east) (c-name GTK_ANCHOR_SOUTH_EAST))
  (value (name west) (c-name GTK_ANCHOR_WEST))
  (value (name east) (c-name GTK_ANCHOR_EAST))
  (value (name n) (c-name GTK_ANCHOR_N))
  (value (name nw) (c-name GTK_ANCHOR_NW))
  (value (name ne) (c-name GTK_ANCHOR_NE))
  (value (name s) (c-name GTK_ANCHOR_S))
  (value (name sw) (c-name GTK_ANCHOR_SW))
  (value (name se) (c-name GTK_ANCHOR_SE))
  (value (name w) (c-name GTK_ANCHOR_W))
  (value (name e) (c-name GTK_ANCHOR_E))
)

(flags PrivateFlags
  (in-module Gtk)
  (c-name GtkPrivateFlags)
  (value (name user-style) (c-name PRIVATE_GTK_USER_STYLE))
  (value (name redraw-pending) (c-name PRIVATE_GTK_REDRAW_PENDING))
  (value (name resize-pending) (c-name PRIVATE_GTK_RESIZE_PENDING))
  (value (name resize-needed) (c-name PRIVATE_GTK_RESIZE_NEEDED))
  (value (name leave-pending) (c-name PRIVATE_GTK_LEAVE_PENDING))
  (value (name has-shape-mask) (c-name PRIVATE_GTK_HAS_SHAPE_MASK))
  (value (name in-reparent) (c-name PRIVATE_GTK_IN_REPARENT))
  (value (name is-offscreen) (c-name PRIVATE_GTK_IS_OFFSCREEN))
  (value (name fulldraw-pending) (c-name PRIVATE_GTK_FULLDRAW_PENDING))
)

(enum ProgressBarStyle
  (in-module Gtk)
  (c-name GtkProgressBarStyle)
  (value (name continuous) (c-name GTK_PROGRESS_CONTINUOUS))
  (value (name discrete) (c-name GTK_PROGRESS_DISCRETE))
)

(enum ProgressBarOrientation
  (in-module Gtk)
  (c-name GtkProgressBarOrientation)
  (value (name left-to-right) (c-name GTK_PROGRESS_LEFT_TO_RIGHT))
  (value (name right-to-left) (c-name GTK_PROGRESS_RIGHT_TO_LEFT))
  (value (name bottom-to-top) (c-name GTK_PROGRESS_BOTTOM_TO_TOP))
  (value (name top-to-bottom) (c-name GTK_PROGRESS_TOP_TO_BOTTOM))
)

(flags RcFlags
  (in-module Gtk)
  (c-name GtkRcFlags)
  (value (name fg) (c-name GTK_RC_FG))
  (value (name bg) (c-name GTK_RC_BG))
  (value (name text) (c-name GTK_RC_TEXT))
  (value (name base) (c-name GTK_RC_BASE))
)

(enum RcTokenType
  (in-module Gtk)
  (c-name GtkRcTokenType)
  (value (name invalid) (c-name GTK_RC_TOKEN_INVALID))
  (value (name include) (c-name GTK_RC_TOKEN_INCLUDE))
  (value (name normal) (c-name GTK_RC_TOKEN_NORMAL))
  (value (name active) (c-name GTK_RC_TOKEN_ACTIVE))
  (value (name prelight) (c-name GTK_RC_TOKEN_PRELIGHT))
  (value (name selected) (c-name GTK_RC_TOKEN_SELECTED))
  (value (name insensitive) (c-name GTK_RC_TOKEN_INSENSITIVE))
  (value (name fg) (c-name GTK_RC_TOKEN_FG))
  (value (name bg) (c-name GTK_RC_TOKEN_BG))
  (value (name base) (c-name GTK_RC_TOKEN_BASE))
  (value (name text) (c-name GTK_RC_TOKEN_TEXT))
  (value (name font) (c-name GTK_RC_TOKEN_FONT))
  (value (name fontset) (c-name GTK_RC_TOKEN_FONTSET))
  (value (name bg-pixmap) (c-name GTK_RC_TOKEN_BG_PIXMAP))
  (value (name pixmap-path) (c-name GTK_RC_TOKEN_PIXMAP_PATH))
  (value (name style) (c-name GTK_RC_TOKEN_STYLE))
  (value (name binding) (c-name GTK_RC_TOKEN_BINDING))
  (value (name bind) (c-name GTK_RC_TOKEN_BIND))
  (value (name widget) (c-name GTK_RC_TOKEN_WIDGET))
  (value (name widget-class) (c-name GTK_RC_TOKEN_WIDGET_CLASS))
  (value (name class) (c-name GTK_RC_TOKEN_CLASS))
  (value (name lowest) (c-name GTK_RC_TOKEN_LOWEST))
  (value (name gtk) (c-name GTK_RC_TOKEN_GTK))
  (value (name application) (c-name GTK_RC_TOKEN_APPLICATION))
  (value (name rc) (c-name GTK_RC_TOKEN_RC))
  (value (name highest) (c-name GTK_RC_TOKEN_HIGHEST))
  (value (name engine) (c-name GTK_RC_TOKEN_ENGINE))
  (value (name module-path) (c-name GTK_RC_TOKEN_MODULE_PATH))
  (value (name last) (c-name GTK_RC_TOKEN_LAST))
)

(enum SpinButtonUpdatePolicy
  (in-module Gtk)
  (c-name GtkSpinButtonUpdatePolicy)
  (value (name always) (c-name GTK_UPDATE_ALWAYS))
  (value (name if-valid) (c-name GTK_UPDATE_IF_VALID))
)

(enum SpinType
  (in-module Gtk)
  (c-name GtkSpinType)
  (value (name step-forward) (c-name GTK_SPIN_STEP_FORWARD))
  (value (name step-backward) (c-name GTK_SPIN_STEP_BACKWARD))
  (value (name page-forward) (c-name GTK_SPIN_PAGE_FORWARD))
  (value (name page-backward) (c-name GTK_SPIN_PAGE_BACKWARD))
  (value (name home) (c-name GTK_SPIN_HOME))
  (value (name end) (c-name GTK_SPIN_END))
  (value (name user-defined) (c-name GTK_SPIN_USER_DEFINED))
)

(enum ToolbarChildType
  (in-module Gtk)
  (c-name GtkToolbarChildType)
  (value (name space) (c-name GTK_TOOLBAR_CHILD_SPACE))
  (value (name button) (c-name GTK_TOOLBAR_CHILD_BUTTON))
  (value (name togglebutton) (c-name GTK_TOOLBAR_CHILD_TOGGLEBUTTON))
  (value (name radiobutton) (c-name GTK_TOOLBAR_CHILD_RADIOBUTTON))
  (value (name widget) (c-name GTK_TOOLBAR_CHILD_WIDGET))
)

(enum ToolbarSpaceStyle
  (in-module Gtk)
  (c-name GtkToolbarSpaceStyle)
  (value (name empty) (c-name GTK_TOOLBAR_SPACE_EMPTY))
  (value (name line) (c-name GTK_TOOLBAR_SPACE_LINE))
)

(enum TreeViewMode
  (in-module Gtk)
  (c-name GtkTreeViewMode)
  (value (name line) (c-name GTK_TREE_VIEW_LINE))
  (value (name item) (c-name GTK_TREE_VIEW_ITEM))
)

(enum FundamentalType
  (in-module Gtk)
  (c-name GtkFundamentalType)
  (value (name invalid) (c-name GTK_TYPE_INVALID))
  (value (name none) (c-name GTK_TYPE_NONE))
  (value (name char) (c-name GTK_TYPE_CHAR))
  (value (name uchar) (c-name GTK_TYPE_UCHAR))
  (value (name bool) (c-name GTK_TYPE_BOOL))
  (value (name int) (c-name GTK_TYPE_INT))
  (value (name uint) (c-name GTK_TYPE_UINT))
  (value (name long) (c-name GTK_TYPE_LONG))
  (value (name ulong) (c-name GTK_TYPE_ULONG))
  (value (name float) (c-name GTK_TYPE_FLOAT))
  (value (name double) (c-name GTK_TYPE_DOUBLE))
  (value (name string) (c-name GTK_TYPE_STRING))
  (value (name enum) (c-name GTK_TYPE_ENUM))
  (value (name flags) (c-name GTK_TYPE_FLAGS))
  (value (name boxed) (c-name GTK_TYPE_BOXED))
  (value (name pointer) (c-name GTK_TYPE_POINTER))
  (value (name signal) (c-name GTK_TYPE_SIGNAL))
  (value (name args) (c-name GTK_TYPE_ARGS))
  (value (name callback) (c-name GTK_TYPE_CALLBACK))
  (value (name c-callback) (c-name GTK_TYPE_C_CALLBACK))
  (value (name foreign) (c-name GTK_TYPE_FOREIGN))
  (value (name object) (c-name GTK_TYPE_OBJECT))
)

(flags WidgetFlags
  (in-module Gtk)
  (c-name GtkWidgetFlags)
  (value (name toplevel) (c-name GTK_TOPLEVEL))
  (value (name no-window) (c-name GTK_NO_WINDOW))
  (value (name realized) (c-name GTK_REALIZED))
  (value (name mapped) (c-name GTK_MAPPED))
  (value (name visible) (c-name GTK_VISIBLE))
  (value (name sensitive) (c-name GTK_SENSITIVE))
  (value (name parent-sensitive) (c-name GTK_PARENT_SENSITIVE))
  (value (name can-focus) (c-name GTK_CAN_FOCUS))
  (value (name has-focus) (c-name GTK_HAS_FOCUS))
  (value (name can-default) (c-name GTK_CAN_DEFAULT))
  (value (name has-default) (c-name GTK_HAS_DEFAULT))
  (value (name has-grab) (c-name GTK_HAS_GRAB))
  (value (name rc-style) (c-name GTK_RC_STYLE))
  (value (name composite-child) (c-name GTK_COMPOSITE_CHILD))
  (value (name no-reparent) (c-name GTK_NO_REPARENT))
  (value (name app-paintable) (c-name GTK_APP_PAINTABLE))
  (value (name receives-default) (c-name GTK_RECEIVES_DEFAULT))
)


(include "gtk-extrafuncs.defs")


;; From /usr/include/gtk/gtk.h



;; From /usr/include/gtk/gtkaccelgroup.h

(function gtk_accelerator_valid
  (c-name gtk_accelerator_valid)
  (return-type gboolean)
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GdkModifierType modifiers))
)

(function gtk_accelerator_parse
  (c-name gtk_accelerator_parse)
  (return-type none)
  (parameter (type-and-name const-gchar* accelerator))
  (parameter (type-and-name guint* accelerator_key))
  (parameter (type-and-name GdkModifierType* accelerator_mods))
)

(function gtk_accelerator_name
  (c-name gtk_accelerator_name)
  (return-type gchar*)
  (parameter (type-and-name guint accelerator_key))
  (parameter (type-and-name GdkModifierType accelerator_mods))
)

(function gtk_accelerator_set_default_mod_mask
  (c-name gtk_accelerator_set_default_mod_mask)
  (return-type none)
  (parameter (type-and-name GdkModifierType default_mod_mask))
)

(function gtk_accelerator_get_default_mod_mask
  (c-name gtk_accelerator_get_default_mod_mask)
  (return-type guint)
)

(function GtkAccelGroup
  (c-name gtk_accel_group_new)
  (return-type GtkAccelGroup*)
)

(function accel_group_get_default
  (c-name gtk_accel_group_get_default)
  (return-type GtkAccelGroup*)
)

(method ref
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_ref)
  (return-type GtkAccelGroup*)
)

(method unref
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_unref)
  (return-type none)
)

(method lock
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_lock)
  (return-type none)
)

(method unlock
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_unlock)
  (return-type none)
)

(function gtk_accel_groups_activate
  (c-name gtk_accel_groups_activate)
  (return-type gboolean)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(method activate
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_activate)
  (return-type gboolean)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(method attach
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_attach)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
)

(method detach
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_detach)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
)

(method get_entry
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_get_entry)
  (return-type GtkAccelEntry*)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(method lock_entry
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_lock_entry)
  (return-type none)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(method unlock_entry
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_unlock_entry)
  (return-type none)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(method add
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_add)
  (return-type none)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
  (parameter (type-and-name GtkAccelFlags accel_flags))
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* accel_signal))
)

(method remove
  (of-object AccelGroup (Gtk))
  (c-name gtk_accel_group_remove)
  (return-type none)
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
  (parameter (type-and-name GtkObject* object))
)

(function gtk_accel_group_handle_add
  (c-name gtk_accel_group_handle_add)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name guint accel_signal_id))
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
  (parameter (type-and-name GtkAccelFlags accel_flags))
)

(function gtk_accel_group_handle_remove
  (c-name gtk_accel_group_handle_remove)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name GdkModifierType accel_mods))
)

(function gtk_accel_group_create_add
  (c-name gtk_accel_group_create_add)
  (return-type guint)
  (parameter (type-and-name GtkType class_type))
  (parameter (type-and-name GtkSignalRunType signal_flags))
  (parameter (type-and-name guint handler_offset))
)

(function gtk_accel_group_create_remove
  (c-name gtk_accel_group_create_remove)
  (return-type guint)
  (parameter (type-and-name GtkType class_type))
  (parameter (type-and-name GtkSignalRunType signal_flags))
  (parameter (type-and-name guint handler_offset))
)

(function gtk_accel_groups_from_object
  (c-name gtk_accel_groups_from_object)
  (return-type GSList*)
  (parameter (type-and-name GtkObject* object))
)

(function gtk_accel_group_entries_from_object
  (c-name gtk_accel_group_entries_from_object)
  (return-type GSList*)
  (parameter (type-and-name GtkObject* object))
)



;; From /usr/include/gtk/gtkaccellabel.h

(function gtk_accel_label_get_type
  (c-name gtk_accel_label_get_type)
  (return-type GtkType)
)

(function gtk_accel_label_new
  (c-name gtk_accel_label_new)
  (is-constructor-of GtkAccelLabel)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* string))
)

(method get_accel_width
  (of-object AccelLabel (Gtk))
  (c-name gtk_accel_label_get_accel_width)
  (return-type guint)
)

(method set_accel_widget
  (of-object AccelLabel (Gtk))
  (c-name gtk_accel_label_set_accel_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* accel_widget))
)

(method refetch
  (of-object AccelLabel (Gtk))
  (c-name gtk_accel_label_refetch)
  (return-type gboolean)
)



;; From /usr/include/gtk/gtkadjustment.h

(function gtk_adjustment_get_type
  (c-name gtk_adjustment_get_type)
  (return-type GtkType)
)

(function gtk_adjustment_new
  (c-name gtk_adjustment_new)
  (is-constructor-of GtkAdjustment)
  (return-type GtkObject*)
  (parameter (type-and-name gfloat value))
  (parameter (type-and-name gfloat lower))
  (parameter (type-and-name gfloat upper))
  (parameter (type-and-name gfloat step_increment))
  (parameter (type-and-name gfloat page_increment))
  (parameter (type-and-name gfloat page_size))
)

(method changed
  (of-object Adjustment (Gtk))
  (c-name gtk_adjustment_changed)
  (return-type none)
)

(method value_changed
  (of-object Adjustment (Gtk))
  (c-name gtk_adjustment_value_changed)
  (return-type none)
)

(method clamp_page
  (of-object Adjustment (Gtk))
  (c-name gtk_adjustment_clamp_page)
  (return-type none)
  (parameter (type-and-name gfloat lower))
  (parameter (type-and-name gfloat upper))
)

(method set_value
  (of-object Adjustment (Gtk))
  (c-name gtk_adjustment_set_value)
  (return-type none)
  (parameter (type-and-name gfloat value))
)



;; From /usr/include/gtk/gtkalignment.h

(function gtk_alignment_get_type
  (c-name gtk_alignment_get_type)
  (return-type GtkType)
)

(function gtk_alignment_new
  (c-name gtk_alignment_new)
  (is-constructor-of GtkAlignment)
  (return-type GtkWidget*)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
  (parameter (type-and-name gfloat xscale))
  (parameter (type-and-name gfloat yscale))
)

(method set
  (of-object Alignment (Gtk))
  (c-name gtk_alignment_set)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
  (parameter (type-and-name gfloat xscale))
  (parameter (type-and-name gfloat yscale))
)



;; From /usr/include/gtk/gtkarrow.h

(function gtk_arrow_get_type
  (c-name gtk_arrow_get_type)
  (return-type GtkType)
)

(function gtk_arrow_new
  (c-name gtk_arrow_new)
  (is-constructor-of GtkArrow)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name GtkShadowType shadow_type))
)

(method set
  (of-object Arrow (Gtk))
  (c-name gtk_arrow_set)
  (return-type none)
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name GtkShadowType shadow_type))
)



;; From /usr/include/gtk/gtkaspectframe.h

(function gtk_aspect_frame_get_type
  (c-name gtk_aspect_frame_get_type)
  (return-type GtkType)
)

(function gtk_aspect_frame_new
  (c-name gtk_aspect_frame_new)
  (is-constructor-of GtkAspectFrame)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label) (null-ok) (default "NULL"))
  (parameter (type-and-name gfloat xalign) (default "0.5"))
  (parameter (type-and-name gfloat yalign) (default "0.5"))
  (parameter (type-and-name gfloat ratio) (default "1.0"))
  (parameter (type-and-name gboolean obey_child) (default "TRUE"))
)

(method set
  (of-object AspectFrame (Gtk))
  (c-name gtk_aspect_frame_set)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
  (parameter (type-and-name gfloat ratio))
  (parameter (type-and-name gboolean obey_child))
)



;; From /usr/include/gtk/gtkbbox.h

(function gtk_button_box_get_type
  (c-name gtk_button_box_get_type)
  (return-type GtkType)
)

(function button_box_get_child_size_default
  (c-name gtk_button_box_get_child_size_default)
  (return-type none)
  (parameter (type-and-name gint* min_width))
  (parameter (type-and-name gint* min_height))
)

(function button_box_get_child_ipadding_default
  (c-name gtk_button_box_get_child_ipadding_default)
  (return-type none)
  (parameter (type-and-name gint* ipad_x))
  (parameter (type-and-name gint* ipad_y))
)

(function button_box_set_child_size_default
  (c-name gtk_button_box_set_child_size_default)
  (return-type none)
  (parameter (type-and-name gint min_width))
  (parameter (type-and-name gint min_height))
)

(function button_box_set_child_ipadding_default
  (c-name gtk_button_box_set_child_ipadding_default)
  (return-type none)
  (parameter (type-and-name gint ipad_x))
  (parameter (type-and-name gint ipad_y))
)

(method get_spacing
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_get_spacing)
  (return-type gint)
)

(method get_layout
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_get_layout)
  (return-type GtkButtonBoxStyle)
)

(method get_child_size
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_get_child_size)
  (return-type none)
  (parameter (type-and-name gint* min_width))
  (parameter (type-and-name gint* min_height))
)

(method get_child_ipadding
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_get_child_ipadding)
  (return-type none)
  (parameter (type-and-name gint* ipad_x))
  (parameter (type-and-name gint* ipad_y))
)

(method set_spacing
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_set_spacing)
  (return-type none)
  (parameter (type-and-name gint spacing))
)

(method set_layout
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_set_layout)
  (return-type none)
  (parameter (type-and-name GtkButtonBoxStyle layout_style))
)

(method set_child_size
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_set_child_size)
  (return-type none)
  (parameter (type-and-name gint min_width))
  (parameter (type-and-name gint min_height))
)

(method set_child_ipadding
  (of-object ButtonBox (Gtk))
  (c-name gtk_button_box_set_child_ipadding)
  (return-type none)
  (parameter (type-and-name gint ipad_x))
  (parameter (type-and-name gint ipad_y))
)

(function gtk_button_box_child_requisition
  (c-name gtk_button_box_child_requisition)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name int* nvis_children))
  (parameter (type-and-name int* width))
  (parameter (type-and-name int* height))
)



;; From /usr/include/gtk/gtkbin.h

(function gtk_bin_get_type
  (c-name gtk_bin_get_type)
  (return-type GtkType)
)



;; From /usr/include/gtk/gtkbox.h

(function gtk_box_get_type
  (c-name gtk_box_get_type)
  (return-type GtkType)
)

(method pack_start
  (of-object Box (Gtk))
  (c-name gtk_box_pack_start)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean expand) (default "TRUE"))
  (parameter (type-and-name gboolean fill) (default "TRUE"))
  (parameter (type-and-name guint padding) (default "0"))
)

(method pack_end
  (of-object Box (Gtk))
  (c-name gtk_box_pack_end)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean expand) (default "TRUE"))
  (parameter (type-and-name gboolean fill) (default "TRUE"))
  (parameter (type-and-name guint padding) (default "0"))
)

(method pack_start_defaults
  (of-object Box (Gtk))
  (c-name gtk_box_pack_start_defaults)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method pack_end_defaults
  (of-object Box (Gtk))
  (c-name gtk_box_pack_end_defaults)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method set_homogeneous
  (of-object Box (Gtk))
  (c-name gtk_box_set_homogeneous)
  (return-type none)
  (parameter (type-and-name gboolean homogeneous))
)

(method set_spacing
  (of-object Box (Gtk))
  (c-name gtk_box_set_spacing)
  (return-type none)
  (parameter (type-and-name gint spacing))
)

(method reorder_child
  (of-object Box (Gtk))
  (c-name gtk_box_reorder_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)

(method query_child_packing
  (of-object Box (Gtk))
  (c-name gtk_box_query_child_packing)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean* expand))
  (parameter (type-and-name gboolean* fill))
  (parameter (type-and-name guint* padding))
  (parameter (type-and-name GtkPackType* pack_type))
)

(method set_child_packing
  (of-object Box (Gtk))
  (c-name gtk_box_set_child_packing)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean expand))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name guint padding))
  (parameter (type-and-name GtkPackType pack_type))
)



;; From /usr/include/gtk/gtkbutton.h

(function gtk_button_get_type
  (c-name gtk_button_get_type)
  (return-type GtkType)
)

(function gtk_button_new
  (c-name gtk_button_new)
  (is-constructor-of GtkButton)
  (return-type GtkWidget*)
)

(function gtk_button_new_with_label
  (c-name gtk_button_new_with_label)
  (is-constructor-of GtkButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method pressed
  (of-object Button (Gtk))
  (c-name gtk_button_pressed)
  (return-type none)
)

(method released
  (of-object Button (Gtk))
  (c-name gtk_button_released)
  (return-type none)
)

(method clicked
  (of-object Button (Gtk))
  (c-name gtk_button_clicked)
  (return-type none)
)

(method enter
  (of-object Button (Gtk))
  (c-name gtk_button_enter)
  (return-type none)
)

(method leave
  (of-object Button (Gtk))
  (c-name gtk_button_leave)
  (return-type none)
)

(method set_relief
  (of-object Button (Gtk))
  (c-name gtk_button_set_relief)
  (return-type none)
  (parameter (type-and-name GtkReliefStyle newstyle))
)

(method get_relief
  (of-object Button (Gtk))
  (c-name gtk_button_get_relief)
  (return-type GtkReliefStyle)
)



;; From /usr/include/gtk/gtkcalendar.h

(function gtk_calendar_get_type
  (c-name gtk_calendar_get_type)
  (return-type GtkType)
)

(function gtk_calendar_new
  (c-name gtk_calendar_new)
  (is-constructor-of GtkCalendar)
  (return-type GtkWidget*)
)

(method select_month
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_select_month)
  (return-type gint)
  (parameter (type-and-name guint month))
  (parameter (type-and-name guint year))
)

(method select_day
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_select_day)
  (return-type none)
  (parameter (type-and-name guint day))
)

(method mark_day
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_mark_day)
  (return-type gint)
  (parameter (type-and-name guint day))
)

(method unmark_day
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_unmark_day)
  (return-type gint)
  (parameter (type-and-name guint day))
)

(method clear_marks
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_clear_marks)
  (return-type none)
)

(method display_options
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_display_options)
  (return-type none)
  (parameter (type-and-name GtkCalendarDisplayOptions flags))
)

(method get_date
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_get_date)
  (return-type none)
  (parameter (type-and-name guint* year))
  (parameter (type-and-name guint* month))
  (parameter (type-and-name guint* day))
)

(method freeze
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_freeze)
  (return-type none)
)

(method thaw
  (of-object Calendar (Gtk))
  (c-name gtk_calendar_thaw)
  (return-type none)
)



;; From /usr/include/gtk/gtkcheckbutton.h

(function gtk_check_button_get_type
  (c-name gtk_check_button_get_type)
  (return-type GtkType)
)

(function gtk_check_button_new
  (c-name gtk_check_button_new)
  (is-constructor-of GtkCheckButton)
  (return-type GtkWidget*)
)

(function gtk_check_button_new_with_label
  (c-name gtk_check_button_new_with_label)
  (is-constructor-of GtkCheckButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)



;; From /usr/include/gtk/gtkcheckmenuitem.h

(function gtk_check_menu_item_get_type
  (c-name gtk_check_menu_item_get_type)
  (return-type GtkType)
)

(function gtk_check_menu_item_new
  (c-name gtk_check_menu_item_new)
  (is-constructor-of GtkCheckMenuItem)
  (return-type GtkWidget*)
)

(function gtk_check_menu_item_new_with_label
  (c-name gtk_check_menu_item_new_with_label)
  (is-constructor-of GtkCheckMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method set_active
  (of-object CheckMenuItem (Gtk))
  (c-name gtk_check_menu_item_set_active)
  (return-type none)
  (parameter (type-and-name gboolean is_active))
)

(method set_show_toggle
  (of-object CheckMenuItem (Gtk))
  (c-name gtk_check_menu_item_set_show_toggle)
  (return-type none)
  (parameter (type-and-name gboolean always))
)

(method toggled
  (of-object CheckMenuItem (Gtk))
  (c-name gtk_check_menu_item_toggled)
  (return-type none)
)



;; From /usr/include/gtk/gtkclist.h

(function gtk_clist_get_type
  (c-name gtk_clist_get_type)
  (return-type GtkType)
)

(method construct
  (of-object CList (Gtk))
  (c-name gtk_clist_construct)
  (return-type none)
  (parameter (type-and-name gint columns))
  (parameter (type-and-name gchar*[] titles))
)

(function gtk_clist_new
  (c-name gtk_clist_new)
  (is-constructor-of GtkCList)
  (return-type GtkWidget*)
  (parameter (type-and-name gint columns))
)

(function gtk_clist_new_with_titles
  (c-name gtk_clist_new_with_titles)
  (is-constructor-of GtkCList)
  (return-type GtkWidget*)
  (parameter (type-and-name gint columns))
  (parameter (type-and-name gchar*[] titles))
)

(method set_hadjustment
  (of-object CList (Gtk))
  (c-name gtk_clist_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method set_vadjustment
  (of-object CList (Gtk))
  (c-name gtk_clist_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_hadjustment
  (of-object CList (Gtk))
  (c-name gtk_clist_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method get_vadjustment
  (of-object CList (Gtk))
  (c-name gtk_clist_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_shadow_type
  (of-object CList (Gtk))
  (c-name gtk_clist_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)

(method set_selection_mode
  (of-object CList (Gtk))
  (c-name gtk_clist_set_selection_mode)
  (return-type none)
  (parameter (type-and-name GtkSelectionMode mode))
)

(method set_reorderable
  (of-object CList (Gtk))
  (c-name gtk_clist_set_reorderable)
  (return-type none)
  (parameter (type-and-name gboolean reorderable))
)

(method set_use_drag_icons
  (of-object CList (Gtk))
  (c-name gtk_clist_set_use_drag_icons)
  (return-type none)
  (parameter (type-and-name gboolean use_icons))
)

(method set_button_actions
  (of-object CList (Gtk))
  (c-name gtk_clist_set_button_actions)
  (return-type none)
  (parameter (type-and-name guint button))
  (parameter (type-and-name guint8 button_actions))
)

(method freeze
  (of-object CList (Gtk))
  (c-name gtk_clist_freeze)
  (return-type none)
)

(method thaw
  (of-object CList (Gtk))
  (c-name gtk_clist_thaw)
  (return-type none)
)

(method column_titles_show
  (of-object CList (Gtk))
  (c-name gtk_clist_column_titles_show)
  (return-type none)
)

(method column_titles_hide
  (of-object CList (Gtk))
  (c-name gtk_clist_column_titles_hide)
  (return-type none)
)

(method column_title_active
  (of-object CList (Gtk))
  (c-name gtk_clist_column_title_active)
  (return-type none)
  (parameter (type-and-name gint column))
)

(method column_title_passive
  (of-object CList (Gtk))
  (c-name gtk_clist_column_title_passive)
  (return-type none)
  (parameter (type-and-name gint column))
)

(method column_titles_active
  (of-object CList (Gtk))
  (c-name gtk_clist_column_titles_active)
  (return-type none)
)

(method column_titles_passive
  (of-object CList (Gtk))
  (c-name gtk_clist_column_titles_passive)
  (return-type none)
)

(method set_column_title
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_title)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* title))
)

(method get_column_title
  (of-object CList (Gtk))
  (c-name gtk_clist_get_column_title)
  (return-type gchar*)
  (parameter (type-and-name gint column))
)

(method set_column_widget
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_widget)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name GtkWidget* widget))
)

(method get_column_widget
  (of-object CList (Gtk))
  (c-name gtk_clist_get_column_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name gint column))
)

(method set_column_justification
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_justification)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name GtkJustification justification))
)

(method set_column_visibility
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_visibility)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gboolean visible))
)

(method set_column_resizeable
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_resizeable)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gboolean resizeable))
)

(method set_column_auto_resize
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_auto_resize)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gboolean auto_resize))
)

(method columns_autosize
  (of-object CList (Gtk))
  (c-name gtk_clist_columns_autosize)
  (return-type gint)
)

(method optimal_column_width
  (of-object CList (Gtk))
  (c-name gtk_clist_optimal_column_width)
  (return-type gint)
  (parameter (type-and-name gint column))
)

(method set_column_width
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_width)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint width))
)

(method set_column_min_width
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_min_width)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint min_width))
)

(method set_column_max_width
  (of-object CList (Gtk))
  (c-name gtk_clist_set_column_max_width)
  (return-type none)
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint max_width))
)

(method set_row_height
  (of-object CList (Gtk))
  (c-name gtk_clist_set_row_height)
  (return-type none)
  (parameter (type-and-name guint height))
)

(method moveto
  (of-object CList (Gtk))
  (c-name gtk_clist_moveto)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gfloat row_align))
  (parameter (type-and-name gfloat col_align))
)

(method row_is_visible
  (of-object CList (Gtk))
  (c-name gtk_clist_row_is_visible)
  (return-type GtkVisibility)
  (parameter (type-and-name gint row))
)

(method get_cell_type
  (of-object CList (Gtk))
  (c-name gtk_clist_get_cell_type)
  (return-type GtkCellType)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
)

(method set_text
  (of-object CList (Gtk))
  (c-name gtk_clist_set_text)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* text))
)

(method get_text
  (of-object CList (Gtk))
  (c-name gtk_clist_get_text)
  (return-type gint)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gchar** text))
)

(method set_pixmap
  (of-object CList (Gtk))
  (c-name gtk_clist_set_pixmap)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method get_pixmap
  (of-object CList (Gtk))
  (c-name gtk_clist_get_pixmap)
  (return-type gint)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method set_pixtext
  (of-object CList (Gtk))
  (c-name gtk_clist_set_pixtext)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name guint8 spacing))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method get_pixtext
  (of-object CList (Gtk))
  (c-name gtk_clist_get_pixtext)
  (return-type gint)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gchar** text))
  (parameter (type-and-name guint8* spacing))
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method set_foreground
  (of-object CList (Gtk))
  (c-name gtk_clist_set_foreground)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name GdkColor* color))
)

(method set_background
  (of-object CList (Gtk))
  (c-name gtk_clist_set_background)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name GdkColor* color))
)

(method set_cell_style
  (of-object CList (Gtk))
  (c-name gtk_clist_set_cell_style)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GtkStyle* style))
)

(method get_cell_style
  (of-object CList (Gtk))
  (c-name gtk_clist_get_cell_style)
  (return-type GtkStyle*)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
)

(method set_row_style
  (of-object CList (Gtk))
  (c-name gtk_clist_set_row_style)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name GtkStyle* style))
)

(method get_row_style
  (of-object CList (Gtk))
  (c-name gtk_clist_get_row_style)
  (return-type GtkStyle*)
  (parameter (type-and-name gint row))
)

(method set_shift
  (of-object CList (Gtk))
  (c-name gtk_clist_set_shift)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint vertical))
  (parameter (type-and-name gint horizontal))
)

(method set_selectable
  (of-object CList (Gtk))
  (c-name gtk_clist_set_selectable)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gboolean selectable))
)

(method get_selectable
  (of-object CList (Gtk))
  (c-name gtk_clist_get_selectable)
  (return-type gboolean)
  (parameter (type-and-name gint row))
)

(method prepend
  (of-object CList (Gtk))
  (c-name gtk_clist_prepend)
  (return-type gint)
  (parameter (type-and-name gchar*[] text))
)

(method append
  (of-object CList (Gtk))
  (c-name gtk_clist_append)
  (return-type gint)
  (parameter (type-and-name gchar*[] text))
)

(method insert
  (of-object CList (Gtk))
  (c-name gtk_clist_insert)
  (return-type gint)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gchar*[] text))
)

(method remove
  (of-object CList (Gtk))
  (c-name gtk_clist_remove)
  (return-type none)
  (parameter (type-and-name gint row))
)

(method set_row_data
  (of-object CList (Gtk))
  (c-name gtk_clist_set_row_data)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gpointer data))
)

(method set_row_data_full
  (of-object CList (Gtk))
  (c-name gtk_clist_set_row_data_full)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method get_row_data
  (of-object CList (Gtk))
  (c-name gtk_clist_get_row_data)
  (return-type gpointer)
  (parameter (type-and-name gint row))
)

(method find_row_from_data
  (of-object CList (Gtk))
  (c-name gtk_clist_find_row_from_data)
  (return-type gint)
  (parameter (type-and-name gpointer data))
)

(method select_row
  (of-object CList (Gtk))
  (c-name gtk_clist_select_row)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
)

(method unselect_row
  (of-object CList (Gtk))
  (c-name gtk_clist_unselect_row)
  (return-type none)
  (parameter (type-and-name gint row))
  (parameter (type-and-name gint column))
)

(method undo_selection
  (of-object CList (Gtk))
  (c-name gtk_clist_undo_selection)
  (return-type none)
)

(method clear
  (of-object CList (Gtk))
  (c-name gtk_clist_clear)
  (return-type none)
)

(method get_selection_info
  (of-object CList (Gtk))
  (c-name gtk_clist_get_selection_info)
  (return-type gint)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint* row))
  (parameter (type-and-name gint* column))
)

(method select_all
  (of-object CList (Gtk))
  (c-name gtk_clist_select_all)
  (return-type none)
)

(method unselect_all
  (of-object CList (Gtk))
  (c-name gtk_clist_unselect_all)
  (return-type none)
)

(method swap_rows
  (of-object CList (Gtk))
  (c-name gtk_clist_swap_rows)
  (return-type none)
  (parameter (type-and-name gint row1))
  (parameter (type-and-name gint row2))
)

(method row_move
  (of-object CList (Gtk))
  (c-name gtk_clist_row_move)
  (return-type none)
  (parameter (type-and-name gint source_row))
  (parameter (type-and-name gint dest_row))
)

(method set_compare_func
  (of-object CList (Gtk))
  (c-name gtk_clist_set_compare_func)
  (return-type none)
  (parameter (type-and-name GtkCListCompareFunc cmp_func))
)

(method set_sort_column
  (of-object CList (Gtk))
  (c-name gtk_clist_set_sort_column)
  (return-type none)
  (parameter (type-and-name gint column))
)

(method set_sort_type
  (of-object CList (Gtk))
  (c-name gtk_clist_set_sort_type)
  (return-type none)
  (parameter (type-and-name GtkSortType sort_type))
)

(method sort
  (of-object CList (Gtk))
  (c-name gtk_clist_sort)
  (return-type none)
)

(method set_auto_sort
  (of-object CList (Gtk))
  (c-name gtk_clist_set_auto_sort)
  (return-type none)
  (parameter (type-and-name gboolean auto_sort))
)



;; From /usr/include/gtk/gtkcolorsel.h

(function gtk_color_selection_get_type
  (c-name gtk_color_selection_get_type)
  (return-type GtkType)
)

(function gtk_color_selection_new
  (c-name gtk_color_selection_new)
  (is-constructor-of GtkColorSelection)
  (return-type GtkWidget*)
)

(method set_update_policy
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_update_policy)
  (return-type none)
  (parameter (type-and-name GtkUpdateType policy))
)

(method set_opacity
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_opacity)
  (return-type none)
  (parameter (type-and-name gint use_opacity))
)

(method set_color
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_set_color)
  (return-type none)
  (parameter (type-and-name gdouble* color))
)

(method get_color
  (of-object ColorSelection (Gtk))
  (c-name gtk_color_selection_get_color)
  (return-type none)
  (parameter (type-and-name gdouble* color))
)

(function gtk_color_selection_dialog_get_type
  (c-name gtk_color_selection_dialog_get_type)
  (return-type GtkType)
)

(function gtk_color_selection_dialog_new
  (c-name gtk_color_selection_dialog_new)
  (is-constructor-of GtkColorSelectionDialog)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* title))
)



;; From /usr/include/gtk/gtkcombo.h

(function gtk_combo_get_type
  (c-name gtk_combo_get_type)
  (return-type guint)
)

(function gtk_combo_new
  (c-name gtk_combo_new)
  (is-constructor-of GtkCombo)
  (return-type GtkWidget*)
)

(method set_value_in_list
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_value_in_list)
  (return-type none)
  (parameter (type-and-name gint val))
  (parameter (type-and-name gint ok_if_empty))
)

(method set_use_arrows
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_use_arrows)
  (return-type none)
  (parameter (type-and-name gint val))
)

(method set_use_arrows_always
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_use_arrows_always)
  (return-type none)
  (parameter (type-and-name gint val))
)

(method set_case_sensitive
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_case_sensitive)
  (return-type none)
  (parameter (type-and-name gint val))
)

(method set_item_string
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_item_string)
  (return-type none)
  (parameter (type-and-name GtkItem* item))
  (parameter (type-and-name const-gchar* item_value))
)

(method set_popdown_strings
  (of-object Combo (Gtk))
  (c-name gtk_combo_set_popdown_strings)
  (return-type none)
  (parameter (type-and-name GList* strings))
)

(method disable_activate
  (of-object Combo (Gtk))
  (c-name gtk_combo_disable_activate)
  (return-type none)
)



;; From /usr/include/gtk/gtkcontainer.h

(function gtk_container_get_type
  (c-name gtk_container_get_type)
  (return-type GtkType)
)

(method set_border_width
  (of-object Container (Gtk))
  (c-name gtk_container_set_border_width)
  (return-type none)
  (parameter (type-and-name guint border_width))
)

(method add
  (of-object Container (Gtk))
  (c-name gtk_container_add)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method remove
  (of-object Container (Gtk))
  (c-name gtk_container_remove)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(method set_resize_mode
  (of-object Container (Gtk))
  (c-name gtk_container_set_resize_mode)
  (return-type none)
  (parameter (type-and-name GtkResizeMode resize_mode))
)

(method check_resize
  (of-object Container (Gtk))
  (c-name gtk_container_check_resize)
  (return-type none)
)

(method foreach
  (of-object Container (Gtk))
  (c-name gtk_container_foreach)
  (return-type none)
  (parameter (type-and-name GtkCallback callback))
  (parameter (type-and-name gpointer callback_data))
)

(method foreach_full
  (of-object Container (Gtk))
  (c-name gtk_container_foreach_full)
  (return-type none)
  (parameter (type-and-name GtkCallback callback))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer callback_data))
  (parameter (type-and-name GtkDestroyNotify notify))
)

(method children
  (of-object Container (Gtk))
  (c-name gtk_container_children)
  (return-type GList*)
)

(method focus
  (of-object Container (Gtk))
  (c-name gtk_container_focus)
  (return-type gint)
  (parameter (type-and-name GtkDirectionType direction))
)

(method set_reallocate_redraws
  (of-object Container (Gtk))
  (c-name gtk_container_set_reallocate_redraws)
  (return-type none)
  (parameter (type-and-name gboolean needs_redraws))
)

(method set_focus_child
  (of-object Container (Gtk))
  (c-name gtk_container_set_focus_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method set_focus_vadjustment
  (of-object Container (Gtk))
  (c-name gtk_container_set_focus_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method set_focus_hadjustment
  (of-object Container (Gtk))
  (c-name gtk_container_set_focus_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method register_toplevel
  (of-object Container (Gtk))
  (c-name gtk_container_register_toplevel)
  (return-type none)
)

(method unregister_toplevel
  (of-object Container (Gtk))
  (c-name gtk_container_unregister_toplevel)
  (return-type none)
)

(function gtk_container_get_toplevels
  (c-name gtk_container_get_toplevels)
  (return-type GList*)
)

(method resize_children
  (of-object Container (Gtk))
  (c-name gtk_container_resize_children)
  (return-type none)
)

(method child_type
  (of-object Container (Gtk))
  (c-name gtk_container_child_type)
  (return-type GtkType)
)

(function gtk_container_add_child_arg_type
  (c-name gtk_container_add_child_arg_type)
  (return-type none)
  (parameter (type-and-name const-gchar* arg_name))
  (parameter (type-and-name GtkType arg_type))
  (parameter (type-and-name guint arg_flags))
  (parameter (type-and-name guint arg_id))
)

(function gtk_container_query_child_args
  (c-name gtk_container_query_child_args)
  (return-type GtkArg*)
  (parameter (type-and-name GtkType class_type))
  (parameter (type-and-name guint32** arg_flags))
  (parameter (type-and-name guint* nargs))
)

(method child_getv
  (of-object Container (Gtk))
  (c-name gtk_container_child_getv)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name guint n_args))
  (parameter (type-and-name GtkArg* args))
)

(method child_setv
  (of-object Container (Gtk))
  (c-name gtk_container_child_setv)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name guint n_args))
  (parameter (type-and-name GtkArg* args))
)

(method add_with_args
  (of-object Container (Gtk))
  (c-name gtk_container_add_with_args)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* first_arg_name))
  (varargs t)
)

(method addv
  (of-object Container (Gtk))
  (c-name gtk_container_addv)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name guint n_args))
  (parameter (type-and-name GtkArg* args))
)

(method child_set
  (of-object Container (Gtk))
  (c-name gtk_container_child_set)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* first_arg_name))
  (varargs t)
)

(method queue_resize
  (of-object Container (Gtk))
  (c-name gtk_container_queue_resize)
  (return-type none)
)

(method clear_resize_widgets
  (of-object Container (Gtk))
  (c-name gtk_container_clear_resize_widgets)
  (return-type none)
)

(method arg_set
  (of-object Container (Gtk))
  (c-name gtk_container_arg_set)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkArg* arg))
  (parameter (type-and-name GtkArgInfo* info))
)

(method arg_get
  (of-object Container (Gtk))
  (c-name gtk_container_arg_get)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkArg* arg))
  (parameter (type-and-name GtkArgInfo* info))
)

(function gtk_container_child_args_collect
  (c-name gtk_container_child_args_collect)
  (return-type gchar*)
  (parameter (type-and-name GtkType object_type))
  (parameter (type-and-name GSList** arg_list_p))
  (parameter (type-and-name GSList** info_list_p))
  (parameter (type-and-name const-gchar* first_arg_name))
  (parameter (type-and-name va_list args))
)

(function gtk_container_child_arg_get_info
  (c-name gtk_container_child_arg_get_info)
  (return-type gchar*)
  (parameter (type-and-name GtkType object_type))
  (parameter (type-and-name const-gchar* arg_name))
  (parameter (type-and-name GtkArgInfo** info_p))
)

(method forall
  (of-object Container (Gtk))
  (c-name gtk_container_forall)
  (return-type none)
  (parameter (type-and-name GtkCallback callback))
  (parameter (type-and-name gpointer callback_data))
)

(method child_composite_name
  (of-object Container (Gtk))
  (c-name gtk_container_child_composite_name)
  (return-type gchar*)
  (parameter (type-and-name GtkWidget* child))
)

(method dequeue_resize_handler
  (of-object Container (Gtk))
  (c-name gtk_container_dequeue_resize_handler)
  (return-type none)
)



;; From /usr/include/gtk/gtkctree.h

(function gtk_ctree_get_type
  (c-name gtk_ctree_get_type)
  (return-type GtkType)
)

(method construct
  (of-object CTree (Gtk))
  (c-name gtk_ctree_construct)
  (return-type none)
  (parameter (type-and-name gint columns))
  (parameter (type-and-name gint tree_column))
  (parameter (type-and-name gchar*[] titles))
)

(function gtk_ctree_new_with_titles
  (c-name gtk_ctree_new_with_titles)
  (is-constructor-of GtkCTree)
  (return-type GtkWidget*)
  (parameter (type-and-name gint columns))
  (parameter (type-and-name gint tree_column))
  (parameter (type-and-name gchar*[] titles))
)

(function gtk_ctree_new
  (c-name gtk_ctree_new)
  (is-constructor-of GtkCTree)
  (return-type GtkWidget*)
  (parameter (type-and-name gint columns))
  (parameter (type-and-name gint tree_column))
)

(method insert_node
  (of-object CTree (Gtk))
  (c-name gtk_ctree_insert_node)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* parent))
  (parameter (type-and-name GtkCTreeNode* sibling))
  (parameter (type-and-name gchar*[] text))
  (parameter (type-and-name guint8 spacing))
  (parameter (type-and-name GdkPixmap* pixmap_closed))
  (parameter (type-and-name GdkBitmap* mask_closed))
  (parameter (type-and-name GdkPixmap* pixmap_opened))
  (parameter (type-and-name GdkBitmap* mask_opened))
  (parameter (type-and-name gboolean is_leaf))
  (parameter (type-and-name gboolean expanded))
)

(method remove_node
  (of-object CTree (Gtk))
  (c-name gtk_ctree_remove_node)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method insert_gnode
  (of-object CTree (Gtk))
  (c-name gtk_ctree_insert_gnode)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* parent))
  (parameter (type-and-name GtkCTreeNode* sibling))
  (parameter (type-and-name GNode* gnode))
  (parameter (type-and-name GtkCTreeGNodeFunc func))
  (parameter (type-and-name gpointer data))
)

(method export_to_gnode
  (of-object CTree (Gtk))
  (c-name gtk_ctree_export_to_gnode)
  (return-type GNode*)
  (parameter (type-and-name GNode* parent))
  (parameter (type-and-name GNode* sibling))
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeGNodeFunc func))
  (parameter (type-and-name gpointer data))
)

(method post_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_post_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeFunc func))
  (parameter (type-and-name gpointer data))
)

(method post_recursive_to_depth
  (of-object CTree (Gtk))
  (c-name gtk_ctree_post_recursive_to_depth)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint depth))
  (parameter (type-and-name GtkCTreeFunc func))
  (parameter (type-and-name gpointer data))
)

(method pre_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_pre_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeFunc func))
  (parameter (type-and-name gpointer data))
)

(method pre_recursive_to_depth
  (of-object CTree (Gtk))
  (c-name gtk_ctree_pre_recursive_to_depth)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint depth))
  (parameter (type-and-name GtkCTreeFunc func))
  (parameter (type-and-name gpointer data))
)

(method is_viewable
  (of-object CTree (Gtk))
  (c-name gtk_ctree_is_viewable)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method last
  (of-object CTree (Gtk))
  (c-name gtk_ctree_last)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method find_node_ptr
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_node_ptr)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeRow* ctree_row))
)

(method node_nth
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_nth)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name guint row))
)

(method find
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeNode* child))
)

(method is_ancestor
  (of-object CTree (Gtk))
  (c-name gtk_ctree_is_ancestor)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeNode* child))
)

(method find_by_row_data
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_by_row_data)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
)

(method find_all_by_row_data
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_all_by_row_data)
  (return-type GList*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
)

(method find_by_row_data_custom
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_by_row_data_custom)
  (return-type GtkCTreeNode*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GCompareFunc func))
)

(method find_all_by_row_data_custom
  (of-object CTree (Gtk))
  (c-name gtk_ctree_find_all_by_row_data_custom)
  (return-type GList*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GCompareFunc func))
)

(method is_hot_spot
  (of-object CTree (Gtk))
  (c-name gtk_ctree_is_hot_spot)
  (return-type gboolean)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method move
  (of-object CTree (Gtk))
  (c-name gtk_ctree_move)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkCTreeNode* new_parent) (null-ok))
  (parameter (type-and-name GtkCTreeNode* new_sibling) (null-ok))
)

(method expand
  (of-object CTree (Gtk))
  (c-name gtk_ctree_expand)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method expand_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_expand_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node) (null-ok) (default "NULL"))
)

(method expand_to_depth
  (of-object CTree (Gtk))
  (c-name gtk_ctree_expand_to_depth)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint depth))
)

(method collapse
  (of-object CTree (Gtk))
  (c-name gtk_ctree_collapse)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method collapse_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_collapse_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node) (null-ok) (default "NULL"))
)

(method collapse_to_depth
  (of-object CTree (Gtk))
  (c-name gtk_ctree_collapse_to_depth)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint depth))
)

(method toggle_expansion
  (of-object CTree (Gtk))
  (c-name gtk_ctree_toggle_expansion)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method toggle_expansion_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_toggle_expansion_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method select
  (of-object CTree (Gtk))
  (c-name gtk_ctree_select)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method select_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_select_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node) (null-ok) (default "NULL"))
)

(method unselect
  (of-object CTree (Gtk))
  (c-name gtk_ctree_unselect)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method unselect_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_unselect_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node) (null-ok) (default "NULL"))
)

(method node_set_text
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_text)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* text))
)

(method node_set_pixmap
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_pixmap)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask) (null-ok))
)

(method node_set_pixtext
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_pixtext)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name guint8 spacing))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask) (null-ok))
)

(method set_node_info
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_node_info)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name const-gchar* text))
  (parameter (type-and-name guint8 spacing))
  (parameter (type-and-name GdkPixmap* pixmap_closed) (null-ok))
  (parameter (type-and-name GdkBitmap* mask_closed) (null-ok))
  (parameter (type-and-name GdkPixmap* pixmap_opened) (null-ok))
  (parameter (type-and-name GdkBitmap* mask_opened) (null-ok))
  (parameter (type-and-name gboolean is_leaf))
  (parameter (type-and-name gboolean expanded))
)

(method node_set_shift
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_shift)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gint vertical))
  (parameter (type-and-name gint horizontal))
)

(method node_set_selectable
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_selectable)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gboolean selectable))
)

(method node_get_selectable
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_selectable)
  (return-type gboolean)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method node_get_cell_type
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_cell_type)
  (return-type GtkCellType)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
)

(method node_get_text
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_text)
  (return-type gint)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gchar** text))
)

(method node_get_pixmap
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_pixmap)
  (return-type gint)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method node_get_pixtext
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_pixtext)
  (return-type gint)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gchar** text))
  (parameter (type-and-name guint8* spacing))
  (parameter (type-and-name GdkPixmap** pixmap))
  (parameter (type-and-name GdkBitmap** mask))
)

(method get_node_info
  (of-object CTree (Gtk))
  (c-name gtk_ctree_get_node_info)
  (return-type gint)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gchar** text))
  (parameter (type-and-name guint8* spacing))
  (parameter (type-and-name GdkPixmap** pixmap_closed))
  (parameter (type-and-name GdkBitmap** mask_closed))
  (parameter (type-and-name GdkPixmap** pixmap_opened))
  (parameter (type-and-name GdkBitmap** mask_opened))
  (parameter (type-and-name gboolean* is_leaf))
  (parameter (type-and-name gboolean* expanded))
)

(method node_set_row_style
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_row_style)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GtkStyle* style) (null-ok))
)

(method node_get_row_style
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_row_style)
  (return-type GtkStyle*)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method node_set_cell_style
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_cell_style)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name GtkStyle* style))
)

(method node_get_cell_style
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_cell_style)
  (return-type GtkStyle*)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
)

(method node_set_foreground
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_foreground)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GdkColor* color))
)

(method node_set_background
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_background)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name GdkColor* color))
)

(method node_set_row_data
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_row_data)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
)

(method node_set_row_data_full
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_set_row_data_full)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method node_get_row_data
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_get_row_data)
  (return-type gpointer)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method node_moveto
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_moveto)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
  (parameter (type-and-name gint column))
  (parameter (type-and-name gfloat row_align))
  (parameter (type-and-name gfloat col_align))
)

(method node_is_visible
  (of-object CTree (Gtk))
  (c-name gtk_ctree_node_is_visible)
  (return-type GtkVisibility)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method set_indent
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_indent)
  (return-type none)
  (parameter (type-and-name gint indent))
)

(method set_spacing
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_spacing)
  (return-type none)
  (parameter (type-and-name gint spacing))
)

(method set_show_stub
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_show_stub)
  (return-type none)
  (parameter (type-and-name gboolean show_stub))
)

(method set_line_style
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_line_style)
  (return-type none)
  (parameter (type-and-name GtkCTreeLineStyle line_style))
)

(method set_expander_style
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_expander_style)
  (return-type none)
  (parameter (type-and-name GtkCTreeExpanderStyle expander_style))
)

(method set_drag_compare_func
  (of-object CTree (Gtk))
  (c-name gtk_ctree_set_drag_compare_func)
  (return-type none)
  (parameter (type-and-name GtkCTreeCompareDragFunc cmp_func))
)

(method sort_node
  (of-object CTree (Gtk))
  (c-name gtk_ctree_sort_node)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node))
)

(method sort_recursive
  (of-object CTree (Gtk))
  (c-name gtk_ctree_sort_recursive)
  (return-type none)
  (parameter (type-and-name GtkCTreeNode* node) (null-ok) (default "NULL"))
)



;; From /usr/include/gtk/gtkcurve.h

(function gtk_curve_get_type
  (c-name gtk_curve_get_type)
  (return-type GtkType)
)

(function gtk_curve_new
  (c-name gtk_curve_new)
  (is-constructor-of GtkCurve)
  (return-type GtkWidget*)
)

(method reset
  (of-object Curve (Gtk))
  (c-name gtk_curve_reset)
  (return-type none)
)

(method set_gamma
  (of-object Curve (Gtk))
  (c-name gtk_curve_set_gamma)
  (return-type none)
  (parameter (type-and-name gfloat gamma))
)

(method set_range
  (of-object Curve (Gtk))
  (c-name gtk_curve_set_range)
  (return-type none)
  (parameter (type-and-name gfloat min_x))
  (parameter (type-and-name gfloat max_x))
  (parameter (type-and-name gfloat min_y))
  (parameter (type-and-name gfloat max_y))
)

(method get_vector
  (of-object Curve (Gtk))
  (c-name gtk_curve_get_vector)
  (return-type none)
  (parameter (type-and-name int veclen))
  (parameter (type-and-name gfloat[] vector))
)

(method set_vector
  (of-object Curve (Gtk))
  (c-name gtk_curve_set_vector)
  (return-type none)
  (parameter (type-and-name int veclen))
  (parameter (type-and-name gfloat[] vector))
)

(method set_curve_type
  (of-object Curve (Gtk))
  (c-name gtk_curve_set_curve_type)
  (return-type none)
  (parameter (type-and-name GtkCurveType type))
)



;; From /usr/include/gtk/gtkdata.h

(function gtk_data_get_type
  (c-name gtk_data_get_type)
  (return-type GtkType)
)



;; From /usr/include/gtk/gtkdialog.h

(function gtk_dialog_get_type
  (c-name gtk_dialog_get_type)
  (return-type GtkType)
)

(function gtk_dialog_new
  (c-name gtk_dialog_new)
  (is-constructor-of GtkDialog)
  (return-type GtkWidget*)
)



;; From /usr/include/gtk/gtkdnd.h

(function gtk_drag_finish
  (c-name gtk_drag_finish)
  (return-type none)
  (parameter (type-and-name GdkDragContext* context))
  (parameter (type-and-name gboolean success))
  (parameter (type-and-name gboolean del))
  (parameter (type-and-name guint32 time))
)

(function gtk_drag_get_source_widget
  (c-name gtk_drag_get_source_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkDragContext* context))
)

(method drag_highlight
  (of-object Widget (Gtk))
  (c-name gtk_drag_highlight)
  (return-type none)
)

(method drag_unhighlight
  (of-object Widget (Gtk))
  (c-name gtk_drag_unhighlight)
  (return-type none)
)

(method drag_dest_set
  (of-object Widget (Gtk))
  (c-name gtk_drag_dest_set)
  (return-type none)
  (parameter (type-and-name GtkDestDefaults flags))
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name gint n_targets))
  (parameter (type-and-name GdkDragAction actions))
)

(method drag_dest_set_proxy
  (of-object Widget (Gtk))
  (c-name gtk_drag_dest_set_proxy)
  (return-type none)
  (parameter (type-and-name GdkWindow* proxy_window))
  (parameter (type-and-name GdkDragProtocol protocol))
  (parameter (type-and-name gboolean use_coordinates))
)

(method drag_dest_unset
  (of-object Widget (Gtk))
  (c-name gtk_drag_dest_unset)
  (return-type none)
)

(method drag_source_set
  (of-object Widget (Gtk))
  (c-name gtk_drag_source_set)
  (return-type none)
  (parameter (type-and-name GdkModifierType start_button_mask))
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name gint n_targets))
  (parameter (type-and-name GdkDragAction actions))
)

(method drag_source_unset
  (of-object Widget (Gtk))
  (c-name gtk_drag_source_unset)
  (return-type none)
)

(method drag_source_set_icon
  (of-object Widget (Gtk))
  (c-name gtk_drag_source_set_icon)
  (return-type none)
  (parameter (type-and-name GdkColormap* colormap))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method drag_begin
  (of-object Widget (Gtk))
  (c-name gtk_drag_begin)
  (return-type GdkDragContext*)
  (parameter (type-and-name GtkTargetList* targets))
  (parameter (type-and-name GdkDragAction actions))
  (parameter (type-and-name gint button))
  (parameter (type-and-name GdkEvent* event))
)

(function gtk_drag_set_icon_widget
  (c-name gtk_drag_set_icon_widget)
  (return-type none)
  (parameter (type-and-name GdkDragContext* context))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint hot_x))
  (parameter (type-and-name gint hot_y))
)

(function gtk_drag_set_icon_pixmap
  (c-name gtk_drag_set_icon_pixmap)
  (return-type none)
  (parameter (type-and-name GdkDragContext* context))
  (parameter (type-and-name GdkColormap* colormap))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
  (parameter (type-and-name gint hot_x))
  (parameter (type-and-name gint hot_y))
)

(function gtk_drag_set_icon_default
  (c-name gtk_drag_set_icon_default)
  (return-type none)
  (parameter (type-and-name GdkDragContext* context))
)

(function gtk_drag_set_default_icon
  (c-name gtk_drag_set_default_icon)
  (return-type none)
  (parameter (type-and-name GdkColormap* colormap))
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
  (parameter (type-and-name gint hot_x))
  (parameter (type-and-name gint hot_y))
)

(function gtk_drag_source_handle_event
  (c-name gtk_drag_source_handle_event)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkEvent* event))
)

(function gtk_drag_dest_handle_event
  (c-name gtk_drag_dest_handle_event)
  (return-type none)
  (parameter (type-and-name GtkWidget* toplevel))
  (parameter (type-and-name GdkEvent* event))
)



;; From /usr/include/gtk/gtkdrawingarea.h

(function gtk_drawing_area_get_type
  (c-name gtk_drawing_area_get_type)
  (return-type GtkType)
)

(function gtk_drawing_area_new
  (c-name gtk_drawing_area_new)
  (is-constructor-of GtkDrawingArea)
  (return-type GtkWidget*)
)

(method size
  (of-object DrawingArea (Gtk))
  (c-name gtk_drawing_area_size)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)



;; From /usr/include/gtk/gtkeditable.h

(function gtk_editable_get_type
  (c-name gtk_editable_get_type)
  (return-type GtkType)
)

(method select_region
  (of-object Editable (Gtk))
  (c-name gtk_editable_select_region)
  (return-type none)
  (parameter (type-and-name gint start))
  (parameter (type-and-name gint end))
)

(method insert_text
  (of-object Editable (Gtk))
  (c-name gtk_editable_insert_text)
  (return-type none)
  (parameter (type-and-name const-gchar* new_text))
  (parameter (type-and-name gint new_text_length))
  (parameter (type-and-name gint* position))
)

(method delete_text
  (of-object Editable (Gtk))
  (c-name gtk_editable_delete_text)
  (return-type none)
  (parameter (type-and-name gint start_pos))
  (parameter (type-and-name gint end_pos))
)

(method get_chars
  (of-object Editable (Gtk))
  (c-name gtk_editable_get_chars)
  (return-type gchar*)
  (parameter (type-and-name gint start_pos))
  (parameter (type-and-name gint end_pos))
)

(method cut_clipboard
  (of-object Editable (Gtk))
  (c-name gtk_editable_cut_clipboard)
  (return-type none)
)

(method copy_clipboard
  (of-object Editable (Gtk))
  (c-name gtk_editable_copy_clipboard)
  (return-type none)
)

(method paste_clipboard
  (of-object Editable (Gtk))
  (c-name gtk_editable_paste_clipboard)
  (return-type none)
)

(method claim_selection
  (of-object Editable (Gtk))
  (c-name gtk_editable_claim_selection)
  (return-type none)
  (parameter (type-and-name gboolean claim))
  (parameter (type-and-name guint32 time))
)

(method delete_selection
  (of-object Editable (Gtk))
  (c-name gtk_editable_delete_selection)
  (return-type none)
)

(method changed
  (of-object Editable (Gtk))
  (c-name gtk_editable_changed)
  (return-type none)
)

(method set_position
  (of-object Editable (Gtk))
  (c-name gtk_editable_set_position)
  (return-type none)
  (parameter (type-and-name gint position))
)

(method get_position
  (of-object Editable (Gtk))
  (c-name gtk_editable_get_position)
  (return-type gint)
)

(method set_editable
  (of-object Editable (Gtk))
  (c-name gtk_editable_set_editable)
  (return-type none)
  (parameter (type-and-name gboolean is_editable))
)



;; From /usr/include/gtk/gtkentry.h

(function gtk_entry_get_type
  (c-name gtk_entry_get_type)
  (return-type GtkType)
)

(function gtk_entry_new
  (c-name gtk_entry_new)
  (is-constructor-of GtkEntry)
  (return-type GtkWidget*)
)

(function gtk_entry_new_with_max_length
  (c-name gtk_entry_new_with_max_length)
  (return-type GtkWidget*)
  (parameter (type-and-name guint16 max))
)

(method set_text
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)

(method append_text
  (of-object Entry (Gtk))
  (c-name gtk_entry_append_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)

(method prepend_text
  (of-object Entry (Gtk))
  (c-name gtk_entry_prepend_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)

(method set_position
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_position)
  (return-type none)
  (parameter (type-and-name gint position))
)

(method get_text
  (of-object Entry (Gtk))
  (c-name gtk_entry_get_text)
  (return-type static_string)
)

(method select_region
  (of-object Entry (Gtk))
  (c-name gtk_entry_select_region)
  (return-type none)
  (parameter (type-and-name gint start))
  (parameter (type-and-name gint end))
)

(method set_visibility
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_visibility)
  (return-type none)
  (parameter (type-and-name gboolean visible))
)

(method set_editable
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_editable)
  (return-type none)
  (parameter (type-and-name gboolean editable))
)

(method set_max_length
  (of-object Entry (Gtk))
  (c-name gtk_entry_set_max_length)
  (return-type none)
  (parameter (type-and-name guint16 max))
)



;; From /usr/include/gtk/gtkeventbox.h

(function gtk_event_box_get_type
  (c-name gtk_event_box_get_type)
  (return-type GtkType)
)

(function gtk_event_box_new
  (c-name gtk_event_box_new)
  (is-constructor-of GtkEventBox)
  (return-type GtkWidget*)
)



;; From /usr/include/gtk/gtkfeatures.h



;; From /usr/include/gtk/gtkfilesel.h

(function gtk_file_selection_get_type
  (c-name gtk_file_selection_get_type)
  (return-type GtkType)
)

(function gtk_file_selection_new
  (c-name gtk_file_selection_new)
  (is-constructor-of GtkFileSelection)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* title) (default "NULL"))
)

(method set_filename
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_set_filename)
  (return-type none)
  (parameter (type-and-name const-gchar* filename))
)

(method get_filename
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_get_filename)
  (return-type gchar*)
)

(method complete
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_complete)
  (return-type none)
  (parameter (type-and-name const-gchar* pattern))
)

(method show_fileop_buttons
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_show_fileop_buttons)
  (return-type none)
)

(method hide_fileop_buttons
  (of-object FileSelection (Gtk))
  (c-name gtk_file_selection_hide_fileop_buttons)
  (return-type none)
)



;; From /usr/include/gtk/gtkfixed.h

(function gtk_fixed_get_type
  (c-name gtk_fixed_get_type)
  (return-type GtkType)
)

(function gtk_fixed_new
  (c-name gtk_fixed_new)
  (is-constructor-of GtkFixed)
  (return-type GtkWidget*)
)

(method put
  (of-object Fixed (Gtk))
  (c-name gtk_fixed_put)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint16 x))
  (parameter (type-and-name gint16 y))
)

(method move
  (of-object Fixed (Gtk))
  (c-name gtk_fixed_move)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint16 x))
  (parameter (type-and-name gint16 y))
)



;; From /usr/include/gtk/gtkfontsel.h

(function gtk_font_selection_get_type
  (c-name gtk_font_selection_get_type)
  (return-type GtkType)
)

(function gtk_font_selection_new
  (c-name gtk_font_selection_new)
  (is-constructor-of GtkFontSelection)
  (return-type GtkWidget*)
)

(method get_font_name
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_get_font_name)
  (return-type gchar*)
)

(method get_font
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_get_font)
  (return-type GdkFont*)
)

(method set_font_name
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_set_font_name)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* fontname))
)

(method set_filter
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_set_filter)
  (return-type none)
  (parameter (type-and-name GtkFontFilterType filter_type))
  (parameter (type-and-name GtkFontType font_type))
  (parameter (type-and-name gchar** foundries))
  (parameter (type-and-name gchar** weights))
  (parameter (type-and-name gchar** slants))
  (parameter (type-and-name gchar** setwidths))
  (parameter (type-and-name gchar** spacings))
  (parameter (type-and-name gchar** charsets))
)

(method get_preview_text
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_get_preview_text)
  (return-type gchar*)
)

(method set_preview_text
  (of-object FontSelection (Gtk))
  (c-name gtk_font_selection_set_preview_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)

(function gtk_font_selection_dialog_get_type
  (c-name gtk_font_selection_dialog_get_type)
  (return-type GtkType)
)

(function gtk_font_selection_dialog_new
  (c-name gtk_font_selection_dialog_new)
  (is-constructor-of GtkFontSelectionDialog)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* title))
)

(method get_font_name
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_get_font_name)
  (return-type gchar*)
)

(method get_font
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_get_font)
  (return-type GdkFont*)
)

(method set_font_name
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_set_font_name)
  (return-type gboolean)
  (parameter (type-and-name const-gchar* fontname))
)

(method set_filter
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_set_filter)
  (return-type none)
  (parameter (type-and-name GtkFontFilterType filter_type))
  (parameter (type-and-name GtkFontType font_type))
  (parameter (type-and-name gchar** foundries))
  (parameter (type-and-name gchar** weights))
  (parameter (type-and-name gchar** slants))
  (parameter (type-and-name gchar** setwidths))
  (parameter (type-and-name gchar** spacings))
  (parameter (type-and-name gchar** charsets))
)

(method get_preview_text
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_get_preview_text)
  (return-type gchar*)
)

(method set_preview_text
  (of-object FontSelectionDialog (Gtk))
  (c-name gtk_font_selection_dialog_set_preview_text)
  (return-type none)
  (parameter (type-and-name const-gchar* text))
)



;; From /usr/include/gtk/gtkframe.h

(function gtk_frame_get_type
  (c-name gtk_frame_get_type)
  (return-type GtkType)
)

(function gtk_frame_new
  (c-name gtk_frame_new)
  (is-constructor-of GtkFrame)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label) (default "NULL") (null-ok))
)

(method set_label
  (of-object Frame (Gtk))
  (c-name gtk_frame_set_label)
  (return-type none)
  (parameter (type-and-name const-gchar* label) (null-ok))
)

(method set_label_align
  (of-object Frame (Gtk))
  (c-name gtk_frame_set_label_align)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
)

(method set_shadow_type
  (of-object Frame (Gtk))
  (c-name gtk_frame_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)



;; From /usr/include/gtk/gtkgamma.h

(function gtk_gamma_curve_get_type
  (c-name gtk_gamma_curve_get_type)
  (return-type guint)
)

(function gtk_gamma_curve_new
  (c-name gtk_gamma_curve_new)
  (is-constructor-of GtkGammaCurve)
  (return-type GtkWidget*)
)


;; From /usr/include/gtk/gtkhandlebox.h

(function gtk_handle_box_get_type
  (c-name gtk_handle_box_get_type)
  (return-type GtkType)
)

(function gtk_handle_box_new
  (c-name gtk_handle_box_new)
  (is-constructor-of GtkHandleBox)
  (return-type GtkWidget*)
)

(method set_shadow_type
  (of-object HandleBox (Gtk))
  (c-name gtk_handle_box_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)

(method set_handle_position
  (of-object HandleBox (Gtk))
  (c-name gtk_handle_box_set_handle_position)
  (return-type none)
  (parameter (type-and-name GtkPositionType position))
)

(method set_snap_edge
  (of-object HandleBox (Gtk))
  (c-name gtk_handle_box_set_snap_edge)
  (return-type none)
  (parameter (type-and-name GtkPositionType edge))
)



;; From /usr/include/gtk/gtkhbbox.h

(function gtk_hbutton_box_get_type
  (c-name gtk_hbutton_box_get_type)
  (return-type guint)
)

(function gtk_hbutton_box_new
  (c-name gtk_hbutton_box_new)
  (is-constructor-of GtkHButtonBox)
  (return-type GtkWidget*)
)

(function hbutton_box_get_spacing_default
  (c-name gtk_hbutton_box_get_spacing_default)
  (return-type gint)
)

(function hbutton_box_get_layout_default
  (c-name gtk_hbutton_box_get_layout_default)
  (return-type GtkButtonBoxStyle)
)

(function hbutton_box_set_spacing_default
  (c-name gtk_hbutton_box_set_spacing_default)
  (return-type none)
  (parameter (type-and-name gint spacing))
)

(function hbutton_box_set_layout_default
  (c-name gtk_hbutton_box_set_layout_default)
  (return-type none)
  (parameter (type-and-name GtkButtonBoxStyle layout))
)



;; From /usr/include/gtk/gtkhbox.h

(function gtk_hbox_get_type
  (c-name gtk_hbox_get_type)
  (return-type GtkType)
)

(function gtk_hbox_new
  (c-name gtk_hbox_new)
  (is-constructor-of GtkHBox)
  (return-type GtkWidget*)
  (parameter (type-and-name gboolean homogeneous) (default "FALSE"))
  (parameter (type-and-name gint spacing) (default "0"))
)



;; From /usr/include/gtk/gtkhpaned.h

(function gtk_hpaned_get_type
  (c-name gtk_hpaned_get_type)
  (return-type guint)
)

(function gtk_hpaned_new
  (c-name gtk_hpaned_new)
  (is-constructor-of GtkHPaned)
  (return-type GtkWidget*)
)



;; From /usr/include/gtk/gtkhruler.h

(function gtk_hruler_get_type
  (c-name gtk_hruler_get_type)
  (return-type guint)
)

(function gtk_hruler_new
  (c-name gtk_hruler_new)
  (is-constructor-of GtkHRuler)
  (return-type GtkWidget*)
)



;; From /usr/include/gtk/gtkhscale.h

(function gtk_hscale_get_type
  (c-name gtk_hscale_get_type)
  (return-type GtkType)
)

(function gtk_hscale_new
  (c-name gtk_hscale_new)
  (is-constructor-of GtkHScale)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok))
)



;; From /usr/include/gtk/gtkhscrollbar.h

(function gtk_hscrollbar_get_type
  (c-name gtk_hscrollbar_get_type)
  (return-type GtkType)
)

(function gtk_hscrollbar_new
  (c-name gtk_hscrollbar_new)
  (is-constructor-of GtkHScrollbar)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok))
)



;; From /usr/include/gtk/gtkhseparator.h

(function gtk_hseparator_get_type
  (c-name gtk_hseparator_get_type)
  (return-type GtkType)
)

(function gtk_hseparator_new
  (c-name gtk_hseparator_new)
  (is-constructor-of GtkHSeparator)
  (return-type GtkWidget*)
)



;; From /usr/include/gtk/gtkimage.h

(function gtk_image_get_type
  (c-name gtk_image_get_type)
  (return-type GtkType)
)

(function gtk_image_new
  (c-name gtk_image_new)
  (is-constructor-of GtkImage)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkImage* val))
  (parameter (type-and-name GdkBitmap* mask))
)

(method set
  (of-object Image (Gtk))
  (c-name gtk_image_set)
  (return-type none)
  (parameter (type-and-name GdkImage* val))
  (parameter (type-and-name GdkBitmap* mask))
)

(method get
  (of-object Image (Gtk))
  (c-name gtk_image_get)
  (return-type none)
  (parameter (type-and-name GdkImage** val))
  (parameter (type-and-name GdkBitmap** mask))
)



;; From /usr/include/gtk/gtkinputdialog.h

(function gtk_input_dialog_get_type
  (c-name gtk_input_dialog_get_type)
  (return-type GtkType)
)

(function gtk_input_dialog_new
  (c-name gtk_input_dialog_new)
  (is-constructor-of GtkInputDialog)
  (return-type GtkWidget*)
)



;; From /usr/include/gtk/gtkinvisible.h

(function gtk_invisible_get_type
  (c-name gtk_invisible_get_type)
  (return-type GtkType)
)

(function gtk_invisible_new
  (c-name gtk_invisible_new)
  (is-constructor-of GtkInvisible)
  (return-type GtkWidget*)
)



;; From /usr/include/gtk/gtkitem.h

(function gtk_item_get_type
  (c-name gtk_item_get_type)
  (return-type GtkType)
)

(method select
  (of-object Item (Gtk))
  (c-name gtk_item_select)
  (return-type none)
)

(method deselect
  (of-object Item (Gtk))
  (c-name gtk_item_deselect)
  (return-type none)
)

(method toggle
  (of-object Item (Gtk))
  (c-name gtk_item_toggle)
  (return-type none)
)



;; From /usr/include/gtk/gtkitemfactory.h

(function gtk_item_factory_get_type
  (c-name gtk_item_factory_get_type)
  (return-type GtkType)
)

(function gtk_item_factory_new
  (c-name gtk_item_factory_new)
  (is-constructor-of GtkItemFactory)
  (return-type GtkItemFactory*)
  (parameter (type-and-name GtkType container_type))
  (parameter (type-and-name const-gchar* path))
  (parameter (type-and-name GtkAccelGroup* accel_group) (null-ok))
)

(method construct
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_construct)
  (return-type none)
  (parameter (type-and-name GtkType container_type))
  (parameter (type-and-name const-gchar* path))
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(function gtk_item_factory_parse_rc
  (c-name gtk_item_factory_parse_rc)
  (return-type none)
  (parameter (type-and-name const-gchar* file_name))
)

(function gtk_item_factory_parse_rc_string
  (c-name gtk_item_factory_parse_rc_string)
  (return-type none)
  (parameter (type-and-name const-gchar* rc_string))
)

(function gtk_item_factory_parse_rc_scanner
  (c-name gtk_item_factory_parse_rc_scanner)
  (return-type none)
  (parameter (type-and-name GScanner* scanner))
)

(function gtk_item_factory_add_foreign
  (c-name gtk_item_factory_add_foreign)
  (return-type none)
  (parameter (type-and-name GtkWidget* accel_widget))
  (parameter (type-and-name const-gchar* full_path))
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint keyval))
  (parameter (type-and-name GdkModifierType modifiers))
)

(function gtk_item_factory_from_widget
  (c-name gtk_item_factory_from_widget)
  (return-type GtkItemFactory*)
  (parameter (type-and-name GtkWidget* widget))
)

(function gtk_item_factory_path_from_widget
  (c-name gtk_item_factory_path_from_widget)
  (return-type gchar*)
  (parameter (type-and-name GtkWidget* widget))
)

(method get_item
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_get_item)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* path))
)

(method get_widget
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_get_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* path))
)

(method get_widget_by_action
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_get_widget_by_action)
  (return-type GtkWidget*)
  (parameter (type-and-name guint action))
)

(method get_item_by_action
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_get_item_by_action)
  (return-type GtkWidget*)
  (parameter (type-and-name guint action))
)

(function gtk_item_factory_dump_items
  (c-name gtk_item_factory_dump_items)
  (return-type none)
  (parameter (type-and-name GtkPatternSpec* path_pspec))
  (parameter (type-and-name gboolean modified_only))
  (parameter (type-and-name GtkPrintFunc print_func))
  (parameter (type-and-name gpointer func_data))
)

(function gtk_item_factory_dump_rc
  (c-name gtk_item_factory_dump_rc)
  (return-type none)
  (parameter (type-and-name const-gchar* file_name))
  (parameter (type-and-name GtkPatternSpec* path_pspec))
  (parameter (type-and-name gboolean modified_only))
)

(function gtk_item_factory_print_func
  (c-name gtk_item_factory_print_func)
  (return-type none)
  (parameter (type-and-name gpointer FILE_pointer))
  (parameter (type-and-name gchar* string))
)

(method create_item
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_create_item)
  (return-type none)
  (parameter (type-and-name GtkItemFactoryEntry* entry))
  (parameter (type-and-name gpointer callback_data))
  (parameter (type-and-name guint callback_type))
)

(method create_items
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_create_items)
  (return-type none)
  (parameter (type-and-name guint n_entries))
  (parameter (type-and-name GtkItemFactoryEntry* entries))
  (parameter (type-and-name gpointer callback_data))
)

(method delete_item
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_delete_item)
  (return-type none)
  (parameter (type-and-name const-gchar* path))
)

(method delete_entry
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_delete_entry)
  (return-type none)
  (parameter (type-and-name GtkItemFactoryEntry* entry))
)

(method delete_entries
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_delete_entries)
  (return-type none)
  (parameter (type-and-name guint n_entries))
  (parameter (type-and-name GtkItemFactoryEntry* entries))
)

(method popup
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_popup)
  (return-type none)
  (parameter (type-and-name guint x))
  (parameter (type-and-name guint y))
  (parameter (type-and-name guint mouse_button))
  (parameter (type-and-name guint32 time))
)

(method popup_with_data
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_popup_with_data)
  (return-type none)
  (parameter (type-and-name gpointer popup_data))
  (parameter (type-and-name GtkDestroyNotify destroy))
  (parameter (type-and-name guint x))
  (parameter (type-and-name guint y))
  (parameter (type-and-name guint mouse_button))
  (parameter (type-and-name guint32 time))
)

(method popup_data
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_popup_data)
  (return-type gpointer)
)

(function gtk_item_factory_popup_data_from_widget
  (c-name gtk_item_factory_popup_data_from_widget)
  (return-type gpointer)
  (parameter (type-and-name GtkWidget* widget))
)

(method set_translate_func
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_set_translate_func)
  (return-type none)
  (parameter (type-and-name GtkTranslateFunc func))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify notify))
)

(function gtk_item_factory_from_path
  (c-name gtk_item_factory_from_path)
  (return-type GtkItemFactory*)
  (parameter (type-and-name const-gchar* path))
)

(function gtk_item_factory_create_menu_entries
  (c-name gtk_item_factory_create_menu_entries)
  (return-type none)
  (parameter (type-and-name guint n_entries))
  (parameter (type-and-name GtkMenuEntry* entries))
)

(function gtk_item_factories_path_delete
  (c-name gtk_item_factories_path_delete)
  (return-type none)
  (parameter (type-and-name const-gchar* ifactory_path))
  (parameter (type-and-name const-gchar* path))
)

(method create_items_ac
  (of-object ItemFactory (Gtk))
  (c-name gtk_item_factory_create_items_ac)
  (return-type none)
  (parameter (type-and-name guint n_entries))
  (parameter (type-and-name GtkItemFactoryEntry* entries))
  (parameter (type-and-name gpointer callback_data))
  (parameter (type-and-name guint callback_type))
)



;; From /usr/include/gtk/gtklabel.h

(function gtk_label_get_type
  (c-name gtk_label_get_type)
  (return-type GtkType)
)

(function gtk_label_new
  (c-name gtk_label_new)
  (is-constructor-of GtkLabel)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* str) (default "NULL"))
)

(method set_text
  (of-object Label (Gtk))
  (c-name gtk_label_set_text)
  (return-type none)
  (parameter (type-and-name const-gchar* str))
)

(method set_justify
  (of-object Label (Gtk))
  (c-name gtk_label_set_justify)
  (return-type none)
  (parameter (type-and-name GtkJustification jtype))
)

(method set_pattern
  (of-object Label (Gtk))
  (c-name gtk_label_set_pattern)
  (return-type none)
  (parameter (type-and-name const-gchar* pattern) (default "NULL"))
)

(method set_line_wrap
  (of-object Label (Gtk))
  (c-name gtk_label_set_line_wrap)
  (return-type none)
  (parameter (type-and-name gboolean wrap))
)

(method get
  (of-object Label (Gtk))
  (c-name gtk_label_get)
  (return-type none)
  (parameter (type-and-name gchar** str))
)

(method parse_uline
  (of-object Label (Gtk))
  (c-name gtk_label_parse_uline)
  (return-type guint)
  (parameter (type-and-name const-gchar* string))
)



;; From /usr/include/gtk/gtklayout.h

(function gtk_layout_get_type
  (c-name gtk_layout_get_type)
  (return-type GtkType)
)

(function gtk_layout_new
  (c-name gtk_layout_new)
  (is-constructor-of GtkLayout)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* hadjustment) (null-ok))
  (parameter (type-and-name GtkAdjustment* vadjustment) (null-ok))
)

(method put
  (of-object Layout (Gtk))
  (c-name gtk_layout_put)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method move
  (of-object Layout (Gtk))
  (c-name gtk_layout_move)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method set_size
  (of-object Layout (Gtk))
  (c-name gtk_layout_set_size)
  (return-type none)
  (parameter (type-and-name guint width))
  (parameter (type-and-name guint height))
)

(method get_hadjustment
  (of-object Layout (Gtk))
  (c-name gtk_layout_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method get_vadjustment
  (of-object Layout (Gtk))
  (c-name gtk_layout_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_hadjustment
  (of-object Layout (Gtk))
  (c-name gtk_layout_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method set_vadjustment
  (of-object Layout (Gtk))
  (c-name gtk_layout_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method freeze
  (of-object Layout (Gtk))
  (c-name gtk_layout_freeze)
  (return-type none)
)

(method thaw
  (of-object Layout (Gtk))
  (c-name gtk_layout_thaw)
  (return-type none)
)



;; From /usr/include/gtk/gtklist.h

(function gtk_list_get_type
  (c-name gtk_list_get_type)
  (return-type GtkType)
)

(function gtk_list_new
  (c-name gtk_list_new)
  (is-constructor-of GtkList)
  (return-type GtkWidget*)
)

(method insert_items
  (of-object List (Gtk))
  (c-name gtk_list_insert_items)
  (return-type none)
  (parameter (type-and-name GList* items))
  (parameter (type-and-name gint position))
)

(method append_items
  (of-object List (Gtk))
  (c-name gtk_list_append_items)
  (return-type none)
  (parameter (type-and-name GList* items))
)

(method prepend_items
  (of-object List (Gtk))
  (c-name gtk_list_prepend_items)
  (return-type none)
  (parameter (type-and-name GList* items))
)

(method remove_items
  (of-object List (Gtk))
  (c-name gtk_list_remove_items)
  (return-type none)
  (parameter (type-and-name GList* items))
)

(method remove_items_no_unref
  (of-object List (Gtk))
  (c-name gtk_list_remove_items_no_unref)
  (return-type none)
  (parameter (type-and-name GList* items))
)

(method clear_items
  (of-object List (Gtk))
  (c-name gtk_list_clear_items)
  (return-type none)
  (parameter (type-and-name gint start))
  (parameter (type-and-name gint end))
)

(method select_item
  (of-object List (Gtk))
  (c-name gtk_list_select_item)
  (return-type none)
  (parameter (type-and-name gint item))
)

(method unselect_item
  (of-object List (Gtk))
  (c-name gtk_list_unselect_item)
  (return-type none)
  (parameter (type-and-name gint item))
)

(method select_child
  (of-object List (Gtk))
  (c-name gtk_list_select_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method unselect_child
  (of-object List (Gtk))
  (c-name gtk_list_unselect_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method child_position
  (of-object List (Gtk))
  (c-name gtk_list_child_position)
  (return-type gint)
  (parameter (type-and-name GtkWidget* child))
)

(method set_selection_mode
  (of-object List (Gtk))
  (c-name gtk_list_set_selection_mode)
  (return-type none)
  (parameter (type-and-name GtkSelectionMode mode))
)

(method extend_selection
  (of-object List (Gtk))
  (c-name gtk_list_extend_selection)
  (return-type none)
  (parameter (type-and-name GtkScrollType scroll_type))
  (parameter (type-and-name gfloat position))
  (parameter (type-and-name gboolean auto_start_selection))
)

(method start_selection
  (of-object List (Gtk))
  (c-name gtk_list_start_selection)
  (return-type none)
)

(method end_selection
  (of-object List (Gtk))
  (c-name gtk_list_end_selection)
  (return-type none)
)

(method select_all
  (of-object List (Gtk))
  (c-name gtk_list_select_all)
  (return-type none)
)

(method unselect_all
  (of-object List (Gtk))
  (c-name gtk_list_unselect_all)
  (return-type none)
)

(method scroll_horizontal
  (of-object List (Gtk))
  (c-name gtk_list_scroll_horizontal)
  (return-type none)
  (parameter (type-and-name GtkScrollType scroll_type))
  (parameter (type-and-name gfloat position))
)

(method scroll_vertical
  (of-object List (Gtk))
  (c-name gtk_list_scroll_vertical)
  (return-type none)
  (parameter (type-and-name GtkScrollType scroll_type))
  (parameter (type-and-name gfloat position))
)

(method toggle_add_mode
  (of-object List (Gtk))
  (c-name gtk_list_toggle_add_mode)
  (return-type none)
)

(method toggle_focus_row
  (of-object List (Gtk))
  (c-name gtk_list_toggle_focus_row)
  (return-type none)
)

(method toggle_row
  (of-object List (Gtk))
  (c-name gtk_list_toggle_row)
  (return-type none)
  (parameter (type-and-name GtkWidget* item))
)

(method undo_selection
  (of-object List (Gtk))
  (c-name gtk_list_undo_selection)
  (return-type none)
)

(method end_drag_selection
  (of-object List (Gtk))
  (c-name gtk_list_end_drag_selection)
  (return-type none)
)



;; From /usr/include/gtk/gtklistitem.h

(function gtk_list_item_get_type
  (c-name gtk_list_item_get_type)
  (return-type GtkType)
)

(function gtk_list_item_new
  (c-name gtk_list_item_new)
  (is-constructor-of GtkListItem)
  (return-type GtkWidget*)
)

(function gtk_list_item_new_with_label
  (c-name gtk_list_item_new_with_label)
  (is-constructor-of GtkListItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method select
  (of-object ListItem (Gtk))
  (c-name gtk_list_item_select)
  (return-type none)
)

(method deselect
  (of-object ListItem (Gtk))
  (c-name gtk_list_item_deselect)
  (return-type none)
)



;; From /usr/include/gtk/gtkmain.h

(function check_version
  (c-name gtk_check_version)
  (return-type gchar*)
  (parameter (type-and-name guint required_major))
  (parameter (type-and-name guint required_minor))
  (parameter (type-and-name guint required_micro))
)

(function init
  (c-name gtk_init)
  (return-type none)
  (parameter (type-and-name int* argc))
  (parameter (type-and-name char*** argv))
)

(function init_check
  (c-name gtk_init_check)
  (return-type gboolean)
  (parameter (type-and-name int* argc))
  (parameter (type-and-name char*** argv))
)

(function exit
  (c-name gtk_exit)
  (return-type none)
  (parameter (type-and-name gint error_code))
)

(function set_locale
  (c-name gtk_set_locale)
  (return-type gchar*)
)

(function events_pending
  (c-name gtk_events_pending)
  (return-type gint)
)

(function main_do_event
  (c-name gtk_main_do_event)
  (return-type none)
  (parameter (type-and-name GdkEvent* event))
)

(function main
  (c-name gtk_main)
  (return-type none)
)

(function main_level
  (c-name gtk_main_level)
  (return-type guint)
)

(function main_quit
  (c-name gtk_main_quit)
  (return-type none)
)

(function main_iteration
  (c-name gtk_main_iteration)
  (return-type gint)
)

(function main_iteration_do
  (c-name gtk_main_iteration_do)
  (return-type gint)
  (parameter (type-and-name gboolean blocking) (default "TRUE"))
)

(function gtk_true
  (c-name gtk_true)
  (return-type gint)
)

(function gtk_false
  (c-name gtk_false)
  (return-type gint)
)

(function grab_add
  (c-name gtk_grab_add)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(function grab_get_current
  (c-name gtk_grab_get_current)
  (return-type GtkWidget*)
)

(function grab_remove
  (c-name gtk_grab_remove)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
)

(function init_add
  (c-name gtk_init_add)
  (return-type none)
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function quit_add_destroy
  (c-name gtk_quit_add_destroy)
  (return-type none)
  (parameter (type-and-name guint main_level))
  (parameter (type-and-name GtkObject* object))
)

(function quit_add
  (c-name gtk_quit_add)
  (return-type guint)
  (parameter (type-and-name guint main_level))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function quit_add_full
  (c-name gtk_quit_add_full)
  (return-type guint)
  (parameter (type-and-name guint main_level))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(function quit_remove
  (c-name gtk_quit_remove)
  (return-type none)
  (parameter (type-and-name guint quit_handler_id))
)

(function quit_remove_by_data
  (c-name gtk_quit_remove_by_data)
  (return-type none)
  (parameter (type-and-name gpointer data))
)

(function timeout_add
  (c-name gtk_timeout_add)
  (return-type guint)
  (parameter (type-and-name guint32 interval))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function timeout_add_full
  (c-name gtk_timeout_add_full)
  (return-type guint)
  (parameter (type-and-name guint32 interval))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(function timeout_remove
  (c-name gtk_timeout_remove)
  (return-type none)
  (parameter (type-and-name guint timeout_handler_id))
)

(function idle_add
  (c-name gtk_idle_add)
  (return-type guint)
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function idle_add_priority
  (c-name gtk_idle_add_priority)
  (return-type guint)
  (parameter (type-and-name gint priority))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name gpointer data))
)

(function idle_add_full
  (c-name gtk_idle_add_full)
  (return-type guint)
  (parameter (type-and-name gint priority))
  (parameter (type-and-name GtkFunction function))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(function idle_remove
  (c-name gtk_idle_remove)
  (return-type none)
  (parameter (type-and-name guint idle_handler_id))
)

(function idle_remove_by_data
  (c-name gtk_idle_remove_by_data)
  (return-type none)
  (parameter (type-and-name gpointer data))
)

(function input_add
  (c-name gtk_input_add_full)
  (return-type guint)
  (parameter (type-and-name gint source))
  (parameter (type-and-name GdkInputCondition condition))
  (parameter (type-and-name GdkInputFunction function))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(function input_remove
  (c-name gtk_input_remove)
  (return-type none)
  (parameter (type-and-name guint input_handler_id))
)

(function key_snooper_install
  (c-name gtk_key_snooper_install)
  (return-type guint)
  (parameter (type-and-name GtkKeySnoopFunc snooper))
  (parameter (type-and-name gpointer func_data))
)

(function key_snooper_remove
  (c-name gtk_key_snooper_remove)
  (return-type none)
  (parameter (type-and-name guint snooper_handler_id))
)

(function get_current_event
  (c-name gtk_get_current_event)
  (return-type GdkEvent*)
)

(function get_event_widget
  (c-name gtk_get_event_widget)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkEvent* event))
)

(function propagate_event
  (c-name gtk_propagate_event)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name GdkEvent* event))
)



;; From /usr/include/gtk/gtkmenu.h

(function gtk_menu_get_type
  (c-name gtk_menu_get_type)
  (return-type GtkType)
)

(function gtk_menu_new
  (c-name gtk_menu_new)
  (is-constructor-of GtkMenu)
  (return-type GtkWidget*)
)

(method append
  (of-object Menu (Gtk))
  (c-name gtk_menu_append)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method prepend
  (of-object Menu (Gtk))
  (c-name gtk_menu_prepend)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method insert
  (of-object Menu (Gtk))
  (c-name gtk_menu_insert)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)

(method popup
  (of-object Menu (Gtk))
  (c-name gtk_menu_popup)
  (return-type none)
  (parameter (type-and-name GtkWidget* parent_menu_shell))
  (parameter (type-and-name GtkWidget* parent_menu_item))
  (parameter (type-and-name GtkMenuPositionFunc func))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name guint button))
  (parameter (type-and-name guint32 activate_time))
)

(method reposition
  (of-object Menu (Gtk))
  (c-name gtk_menu_reposition)
  (return-type none)
)

(method popdown
  (of-object Menu (Gtk))
  (c-name gtk_menu_popdown)
  (return-type none)
)

(method get_active
  (of-object Menu (Gtk))
  (c-name gtk_menu_get_active)
  (return-type GtkWidget*)
)

(method set_active
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_active)
  (return-type none)
  (parameter (type-and-name guint index))
)

(method set_accel_group
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_accel_group)
  (return-type none)
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(method get_accel_group
  (of-object Menu (Gtk))
  (c-name gtk_menu_get_accel_group)
  (return-type GtkAccelGroup*)
)

(method get_uline_accel_group
  (of-object Menu (Gtk))
  (c-name gtk_menu_get_uline_accel_group)
  (return-type GtkAccelGroup*)
)

(method ensure_uline_accel_group
  (of-object Menu (Gtk))
  (c-name gtk_menu_ensure_uline_accel_group)
  (return-type GtkAccelGroup*)
)

(method attach_to_widget
  (of-object Menu (Gtk))
  (c-name gtk_menu_attach_to_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* attach_widget))
  (parameter (type-and-name GtkMenuDetachFunc detacher))
)

(method detach
  (of-object Menu (Gtk))
  (c-name gtk_menu_detach)
  (return-type none)
)

(method get_attach_widget
  (of-object Menu (Gtk))
  (c-name gtk_menu_get_attach_widget)
  (return-type GtkWidget*)
)

(method set_tearoff_state
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_tearoff_state)
  (return-type none)
  (parameter (type-and-name gboolean torn_off))
)

(method set_title
  (of-object Menu (Gtk))
  (c-name gtk_menu_set_title)
  (return-type none)
  (parameter (type-and-name const-gchar* title))
)

(method reorder_child
  (of-object Menu (Gtk))
  (c-name gtk_menu_reorder_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)



;; From /usr/include/gtk/gtkmenubar.h

(function gtk_menu_bar_get_type
  (c-name gtk_menu_bar_get_type)
  (return-type GtkType)
)

(function gtk_menu_bar_new
  (c-name gtk_menu_bar_new)
  (is-constructor-of GtkMenuBar)
  (return-type GtkWidget*)
)

(method append
  (of-object MenuBar (Gtk))
  (c-name gtk_menu_bar_append)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method prepend
  (of-object MenuBar (Gtk))
  (c-name gtk_menu_bar_prepend)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method insert
  (of-object MenuBar (Gtk))
  (c-name gtk_menu_bar_insert)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)

(method set_shadow_type
  (of-object MenuBar (Gtk))
  (c-name gtk_menu_bar_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)


;; From /usr/include/gtk/gtkmenuitem.h

(function gtk_menu_item_get_type
  (c-name gtk_menu_item_get_type)
  (return-type GtkType)
)

(function gtk_menu_item_new
  (c-name gtk_menu_item_new)
  (is-constructor-of GtkMenuItem)
  (return-type GtkWidget*)
)

(function gtk_menu_item_new_with_label
  (c-name gtk_menu_item_new_with_label)
  (is-constructor-of GtkMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method set_submenu
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_set_submenu)
  (return-type none)
  (parameter (type-and-name GtkWidget* submenu))
)

(method remove_submenu
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_remove_submenu)
  (return-type none)
)

(method set_placement
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_set_placement)
  (return-type none)
  (parameter (type-and-name GtkSubmenuPlacement placement))
)

(method configure
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_configure)
  (return-type none)
  (parameter (type-and-name gint show_toggle_indicator))
  (parameter (type-and-name gint show_submenu_indicator))
)

(method select
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_select)
  (return-type none)
)

(method deselect
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_deselect)
  (return-type none)
)

(method activate
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_activate)
  (return-type none)
)

(method right_justify
  (of-object MenuItem (Gtk))
  (c-name gtk_menu_item_right_justify)
  (return-type none)
)



;; From /usr/include/gtk/gtkmenushell.h

(function gtk_menu_shell_get_type
  (c-name gtk_menu_shell_get_type)
  (return-type GtkType)
)

(method append
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_append)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method prepend
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_prepend)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method insert
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_insert)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)

(method deactivate
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_deactivate)
  (return-type none)
)

(method select_item
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_select_item)
  (return-type none)
  (parameter (type-and-name GtkWidget* menu_item))
)

(method deselect
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_deselect)
  (return-type none)
)

(method activate_item
  (of-object MenuShell (Gtk))
  (c-name gtk_menu_shell_activate_item)
  (return-type none)
  (parameter (type-and-name GtkWidget* menu_item))
  (parameter (type-and-name gboolean force_deactivate))
)



;; From /usr/include/gtk/gtkmisc.h

(function gtk_misc_get_type
  (c-name gtk_misc_get_type)
  (return-type GtkType)
)

(method set_alignment
  (of-object Misc (Gtk))
  (c-name gtk_misc_set_alignment)
  (return-type none)
  (parameter (type-and-name gfloat xalign))
  (parameter (type-and-name gfloat yalign))
)

(method set_padding
  (of-object Misc (Gtk))
  (c-name gtk_misc_set_padding)
  (return-type none)
  (parameter (type-and-name gint xpad))
  (parameter (type-and-name gint ypad))
)



;; From /usr/include/gtk/gtknotebook.h

(function gtk_notebook_get_type
  (c-name gtk_notebook_get_type)
  (return-type GtkType)
)

(function gtk_notebook_new
  (c-name gtk_notebook_new)
  (is-constructor-of GtkNotebook)
  (return-type GtkWidget*)
)

(method append_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_append_page)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
)

(method append_page_menu
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_append_page_menu)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
  (parameter (type-and-name GtkWidget* menu_label))
)

(method prepend_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_prepend_page)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
)

(method prepend_page_menu
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_prepend_page_menu)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
  (parameter (type-and-name GtkWidget* menu_label))
)

(method insert_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_insert_page)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
  (parameter (type-and-name gint position))
)

(method insert_page_menu
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_insert_page_menu)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
  (parameter (type-and-name GtkWidget* menu_label))
  (parameter (type-and-name gint position))
)

(method remove_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_remove_page)
  (return-type none)
  (parameter (type-and-name gint page_num))
)

(method get_current_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_current_page)
  (return-type gint)
)

(method get_nth_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_nth_page)
  (return-type GtkWidget*)
  (parameter (type-and-name gint page_num))
)

(method page_num
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_page_num)
  (return-type gint)
  (parameter (type-and-name GtkWidget* child))
)

(method set_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_page)
  (return-type none)
  (parameter (type-and-name gint page_num))
)

(method next_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_next_page)
  (return-type none)
)

(method prev_page
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_prev_page)
  (return-type none)
)

(method set_show_border
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_show_border)
  (return-type none)
  (parameter (type-and-name gboolean show_border))
)

(method set_show_tabs
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_show_tabs)
  (return-type none)
  (parameter (type-and-name gboolean show_tabs))
)

(method set_tab_pos
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_pos)
  (return-type none)
  (parameter (type-and-name GtkPositionType pos))
)

(method set_homogeneous_tabs
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_homogeneous_tabs)
  (return-type none)
  (parameter (type-and-name gboolean homogeneous))
)

(method set_tab_border
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_border)
  (return-type none)
  (parameter (type-and-name guint border_width))
)

(method set_tab_hborder
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_hborder)
  (return-type none)
  (parameter (type-and-name guint tab_hborder))
)

(method set_tab_vborder
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_vborder)
  (return-type none)
  (parameter (type-and-name guint tab_vborder))
)

(method set_scrollable
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_scrollable)
  (return-type none)
  (parameter (type-and-name gboolean scrollable))
)

(method popup_enable
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_popup_enable)
  (return-type none)
)

(method popup_disable
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_popup_disable)
  (return-type none)
)

(method get_tab_label
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_tab_label)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkWidget* child))
)

(method set_tab_label
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_label)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* tab_label))
)

(method set_tab_label_text
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_label_text)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* tab_text))
)

(method get_menu_label
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_get_menu_label)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkWidget* child))
)

(method set_menu_label
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_menu_label)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkWidget* menu_label))
)

(method set_menu_label_text
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_menu_label_text)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name const-gchar* menu_text))
)

(method query_tab_label_packing
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_query_tab_label_packing)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean* expand))
  (parameter (type-and-name gboolean* fill))
  (parameter (type-and-name GtkPackType* pack_type))
)

(method set_tab_label_packing
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_set_tab_label_packing)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean expand))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name GtkPackType pack_type))
)

(method reorder_child
  (of-object Notebook (Gtk))
  (c-name gtk_notebook_reorder_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)



;; From /usr/include/gtk/gtkobject.h

(function gtk_object_get_type
  (c-name gtk_object_get_type)
  (return-type GtkType)
)

(method user_signal_new
  (of-object ObjectClass (Gtk))
  (c-name gtk_object_class_user_signal_new)
  (return-type guint)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkSignalRunType signal_flags))
  (parameter (type-and-name GtkSignalMarshaller marshaller))
  (parameter (type-and-name GtkType return_val))
  (parameter (type-and-name guint nparams))
  (varargs t)
)

(method user_signal_newv
  (of-object ObjectClass (Gtk))
  (c-name gtk_object_class_user_signal_newv)
  (return-type guint)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkSignalRunType signal_flags))
  (parameter (type-and-name GtkSignalMarshaller marshaller))
  (parameter (type-and-name GtkType return_val))
  (parameter (type-and-name guint nparams))
  (parameter (type-and-name GtkType* params))
)

(function gtk_object_new
  (c-name gtk_object_new)
  (return-type GtkObject*)
  (parameter (type-and-name GtkType type))
  (parameter (type-and-name const-gchar* first_arg_name))
  (varargs t)
)

(function gtk_object_newv
  (c-name gtk_object_newv)
  (return-type GtkObject*)
  (parameter (type-and-name GtkType object_type))
  (parameter (type-and-name guint n_args))
  (parameter (type-and-name GtkArg* args))
)

(method default_construct
  (of-object Object (Gtk))
  (c-name gtk_object_default_construct)
  (return-type none)
)

(method constructed
  (of-object Object (Gtk))
  (c-name gtk_object_constructed)
  (return-type none)
)

(method sink
  (of-object Object (Gtk))
  (c-name gtk_object_sink)
  (return-type none)
)

(method ref
  (of-object Object (Gtk))
  (c-name gtk_object_ref)
  (return-type none)
)

(method unref
  (of-object Object (Gtk))
  (c-name gtk_object_unref)
  (return-type none)
)

(method weakref
  (of-object Object (Gtk))
  (c-name gtk_object_weakref)
  (return-type none)
  (parameter (type-and-name GtkDestroyNotify notify))
  (parameter (type-and-name gpointer data))
)

(method weakunref
  (of-object Object (Gtk))
  (c-name gtk_object_weakunref)
  (return-type none)
  (parameter (type-and-name GtkDestroyNotify notify))
  (parameter (type-and-name gpointer data))
)

(method destroy
  (of-object Object (Gtk))
  (c-name gtk_object_destroy)
  (return-type none)
)

(method getv
  (of-object Object (Gtk))
  (c-name gtk_object_getv)
  (return-type none)
  (parameter (type-and-name guint n_args))
  (parameter (type-and-name GtkArg* args))
)

(method get_arg
  (of-object Object (Gtk))
  (c-name gtk_object_get)
  (return-type none)
  (parameter (type-and-name const-gchar* first_arg_name))
  (varargs t)
)

(method set_arg
  (of-object Object (Gtk))
  (c-name gtk_object_set)
  (return-type none)
  (parameter (type-and-name const-gchar* first_arg_name))
  (varargs t)
)

(method setv
  (of-object Object (Gtk))
  (c-name gtk_object_setv)
  (return-type none)
  (parameter (type-and-name guint n_args))
  (parameter (type-and-name GtkArg* args))
)

(function gtk_object_query_args
  (c-name gtk_object_query_args)
  (return-type GtkArg*)
  (parameter (type-and-name GtkType class_type))
  (parameter (type-and-name guint32** arg_flags))
  (parameter (type-and-name guint* n_args))
)

(method set_data
  (of-object Object (Gtk))
  (c-name gtk_object_set_data)
  (return-type none)
  (parameter (type-and-name const-gchar* key))
  (parameter (type-and-name gpointer data))
)

(method set_data_full
  (of-object Object (Gtk))
  (c-name gtk_object_set_data_full)
  (return-type none)
  (parameter (type-and-name const-gchar* key))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method remove_data
  (of-object Object (Gtk))
  (c-name gtk_object_remove_data)
  (return-type none)
  (parameter (type-and-name const-gchar* key))
)

(method get_data
  (of-object Object (Gtk))
  (c-name gtk_object_get_data)
  (return-type gpointer)
  (parameter (type-and-name const-gchar* key))
)

(method remove_no_notify
  (of-object Object (Gtk))
  (c-name gtk_object_remove_no_notify)
  (return-type none)
  (parameter (type-and-name const-gchar* key))
)

(method set_user_data
  (of-object Object (Gtk))
  (c-name gtk_object_set_user_data)
  (return-type none)
  (parameter (type-and-name gpointer data))
)

(method get_user_data
  (of-object Object (Gtk))
  (c-name gtk_object_get_user_data)
  (return-type gpointer)
)

(method add_signals
  (of-object ObjectClass (Gtk))
  (c-name gtk_object_class_add_signals)
  (return-type none)
  (parameter (type-and-name guint* signals))
  (parameter (type-and-name guint nsignals))
)

(function gtk_object_add_arg_type
  (c-name gtk_object_add_arg_type)
  (return-type none)
  (parameter (type-and-name const-gchar* arg_name))
  (parameter (type-and-name GtkType arg_type))
  (parameter (type-and-name guint arg_flags))
  (parameter (type-and-name guint arg_id))
)

(method set_data_by_id
  (of-object Object (Gtk))
  (c-name gtk_object_set_data_by_id)
  (return-type none)
  (parameter (type-and-name GQuark data_id))
  (parameter (type-and-name gpointer data))
)

(method set_data_by_id_full
  (of-object Object (Gtk))
  (c-name gtk_object_set_data_by_id_full)
  (return-type none)
  (parameter (type-and-name GQuark data_id))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy))
)

(method get_data_by_id
  (of-object Object (Gtk))
  (c-name gtk_object_get_data_by_id)
  (return-type gpointer)
  (parameter (type-and-name GQuark data_id))
)

(method remove_data_by_id
  (of-object Object (Gtk))
  (c-name gtk_object_remove_data_by_id)
  (return-type none)
  (parameter (type-and-name GQuark data_id))
)

(method remove_no_notify_by_id
  (of-object Object (Gtk))
  (c-name gtk_object_remove_no_notify_by_id)
  (return-type none)
  (parameter (type-and-name GQuark key_id))
)

(method arg_set
  (of-object Object (Gtk))
  (c-name gtk_object_arg_set)
  (return-type none)
  (parameter (type-and-name GtkArg* arg))
  (parameter (type-and-name GtkArgInfo* info))
)

(method arg_get
  (of-object Object (Gtk))
  (c-name gtk_object_arg_get)
  (return-type none)
  (parameter (type-and-name GtkArg* arg))
  (parameter (type-and-name GtkArgInfo* info))
)

(function gtk_object_args_collect
  (c-name gtk_object_args_collect)
  (return-type gchar*)
  (parameter (type-and-name GtkType object_type))
  (parameter (type-and-name GSList** arg_list_p))
  (parameter (type-and-name GSList** info_list_p))
  (parameter (type-and-name const-gchar* first_arg_name))
  (parameter (type-and-name va_list var_args))
)

(function gtk_object_arg_get_info
  (c-name gtk_object_arg_get_info)
  (return-type gchar*)
  (parameter (type-and-name GtkType object_type))
  (parameter (type-and-name const-gchar* arg_name))
  (parameter (type-and-name GtkArgInfo** info_p))
)

(function gtk_trace_referencing
  (c-name gtk_trace_referencing)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* func))
  (parameter (type-and-name guint dummy))
  (parameter (type-and-name guint line))
  (parameter (type-and-name gboolean do_ref))
)



;; From /usr/include/gtk/gtkoptionmenu.h

(function gtk_option_menu_get_type
  (c-name gtk_option_menu_get_type)
  (return-type GtkType)
)

(function gtk_option_menu_new
  (c-name gtk_option_menu_new)
  (is-constructor-of GtkOptionMenu)
  (return-type GtkWidget*)
)

(method get_menu
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_get_menu)
  (return-type GtkWidget*)
)

(method set_menu
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_set_menu)
  (return-type none)
  (parameter (type-and-name GtkWidget* menu))
)

(method remove_menu
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_remove_menu)
  (return-type none)
)

(method set_history
  (of-object OptionMenu (Gtk))
  (c-name gtk_option_menu_set_history)
  (return-type none)
  (parameter (type-and-name guint index))
)



;; From /usr/include/gtk/gtkpacker.h

(function gtk_packer_get_type
  (c-name gtk_packer_get_type)
  (return-type GtkType)
)

(function gtk_packer_new
  (c-name gtk_packer_new)
  (is-constructor-of GtkPacker)
  (return-type GtkWidget*)
)

(method add_defaults
  (of-object Packer (Gtk))
  (c-name gtk_packer_add_defaults)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkSideType side))
  (parameter (type-and-name GtkAnchorType anchor))
  (parameter (type-and-name GtkPackerOptions options))
)

(method add
  (of-object Packer (Gtk))
  (c-name gtk_packer_add)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkSideType side))
  (parameter (type-and-name GtkAnchorType anchor))
  (parameter (type-and-name GtkPackerOptions options))
  (parameter (type-and-name guint border_width) (default "0"))
  (parameter (type-and-name guint pad_x) (default "0"))
  (parameter (type-and-name guint pad_y) (default "0"))
  (parameter (type-and-name guint i_pad_x) (default "0"))
  (parameter (type-and-name guint i_pad_y) (default "0"))
)

(method set_child_packing
  (of-object Packer (Gtk))
  (c-name gtk_packer_set_child_packing)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name GtkSideType side))
  (parameter (type-and-name GtkAnchorType anchor))
  (parameter (type-and-name GtkPackerOptions options))
  (parameter (type-and-name guint border_width) (default "0"))
  (parameter (type-and-name guint pad_x) (default "0"))
  (parameter (type-and-name guint pad_y) (default "0"))
  (parameter (type-and-name guint i_pad_x) (default "0"))
  (parameter (type-and-name guint i_pad_y) (default "0"))
)

(method reorder_child
  (of-object Packer (Gtk))
  (c-name gtk_packer_reorder_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gint position))
)

(method set_spacing
  (of-object Packer (Gtk))
  (c-name gtk_packer_set_spacing)
  (return-type none)
  (parameter (type-and-name guint spacing))
)

(method set_default_border_width
  (of-object Packer (Gtk))
  (c-name gtk_packer_set_default_border_width)
  (return-type none)
  (parameter (type-and-name guint border))
)

(method set_default_pad
  (of-object Packer (Gtk))
  (c-name gtk_packer_set_default_pad)
  (return-type none)
  (parameter (type-and-name guint pad_x))
  (parameter (type-and-name guint pad_y))
)

(method set_default_ipad
  (of-object Packer (Gtk))
  (c-name gtk_packer_set_default_ipad)
  (return-type none)
  (parameter (type-and-name guint i_pad_x))
  (parameter (type-and-name guint i_pad_y))
)



;; From /usr/include/gtk/gtkpaned.h

(function gtk_paned_get_type
  (c-name gtk_paned_get_type)
  (return-type GtkType)
)

(method add1
  (of-object Paned (Gtk))
  (c-name gtk_paned_add1)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method add2
  (of-object Paned (Gtk))
  (c-name gtk_paned_add2)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)

(method pack1
  (of-object Paned (Gtk))
  (c-name gtk_paned_pack1)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean resize) (default "FALSE"))
  (parameter (type-and-name gboolean shrink) (default "TRUE"))
)

(method pack2
  (of-object Paned (Gtk))
  (c-name gtk_paned_pack2)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name gboolean resize) (default "TRUE"))
  (parameter (type-and-name gboolean shrink) (default "TRUE"))
)

(method set_position
  (of-object Paned (Gtk))
  (c-name gtk_paned_set_position)
  (return-type none)
  (parameter (type-and-name gint position))
)

(method set_handle_size
  (of-object Paned (Gtk))
  (c-name gtk_paned_set_handle_size)
  (return-type none)
  (parameter (type-and-name guint16 size))
)

(method set_gutter_size
  (of-object Paned (Gtk))
  (c-name gtk_paned_set_gutter_size)
  (return-type none)
  (parameter (type-and-name guint16 size))
)

(method compute_position
  (of-object Paned (Gtk))
  (c-name gtk_paned_compute_position)
  (return-type none)
  (parameter (type-and-name gint allocation))
  (parameter (type-and-name gint child1_req))
  (parameter (type-and-name gint child2_req))
)



;; From /usr/include/gtk/gtkpixmap.h

(function gtk_pixmap_get_type
  (c-name gtk_pixmap_get_type)
  (return-type GtkType)
)

(function gtk_pixmap_new
  (c-name gtk_pixmap_new)
  (is-constructor-of GtkPixmap)
  (return-type GtkWidget*)
  (parameter (type-and-name GdkPixmap* pixmap))
  (parameter (type-and-name GdkBitmap* mask))
)

(method set
  (of-object Pixmap (Gtk))
  (c-name gtk_pixmap_set)
  (return-type none)
  (parameter (type-and-name GdkPixmap* val))
  (parameter (type-and-name GdkBitmap* mask))
)

(method get
  (of-object Pixmap (Gtk))
  (c-name gtk_pixmap_get)
  (return-type none)
  (parameter (type-and-name GdkPixmap** val))
  (parameter (type-and-name GdkBitmap** mask))
)

(method set_build_insensitive
  (of-object Pixmap (Gtk))
  (c-name gtk_pixmap_set_build_insensitive)
  (return-type none)
  (parameter (type-and-name guint build))
)



;; From /usr/include/gtk/gtkplug.h

(function gtk_plug_get_type
  (c-name gtk_plug_get_type)
  (return-type guint)
)

(method construct
  (of-object Plug (Gtk))
  (c-name gtk_plug_construct)
  (return-type none)
  (parameter (type-and-name guint32 socket_id))
)

(function gtk_plug_new
  (c-name gtk_plug_new)
  (is-constructor-of GtkPlug)
  (return-type GtkWidget*)
  (parameter (type-and-name guint32 socket_id))
)



;; From /usr/include/gtk/gtkpreview.h

(function gtk_preview_get_type
  (c-name gtk_preview_get_type)
  (return-type GtkType)
)

(function gtk_preview_uninit
  (c-name gtk_preview_uninit)
  (return-type none)
)

(function gtk_preview_new
  (c-name gtk_preview_new)
  (is-constructor-of GtkPreview)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkPreviewType type))
)

(method size
  (of-object Preview (Gtk))
  (c-name gtk_preview_size)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method put
  (of-object Preview (Gtk))
  (c-name gtk_preview_put)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GdkGC* gc))
  (parameter (type-and-name gint srcx))
  (parameter (type-and-name gint srcy))
  (parameter (type-and-name gint destx))
  (parameter (type-and-name gint desty))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method draw_row
  (of-object Preview (Gtk))
  (c-name gtk_preview_draw_row)
  (return-type none)
  (parameter (type-and-name guchar* data))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint w))
)

(method set_expand
  (of-object Preview (Gtk))
  (c-name gtk_preview_set_expand)
  (return-type none)
  (parameter (type-and-name gboolean expand))
)

(function preview_set_gamma
  (c-name gtk_preview_set_gamma)
  (return-type none)
  (parameter (type-and-name double gamma))
)

(function preview_set_color_cube
  (c-name gtk_preview_set_color_cube)
  (return-type none)
  (parameter (type-and-name guint nred_shades))
  (parameter (type-and-name guint ngreen_shades))
  (parameter (type-and-name guint nblue_shades))
  (parameter (type-and-name guint ngray_shades))
)

(function preview_set_install_cmap
  (c-name gtk_preview_set_install_cmap)
  (return-type none)
  (parameter (type-and-name gint install_cmap))
)

(function preview_set_reserved
  (c-name gtk_preview_set_reserved)
  (return-type none)
  (parameter (type-and-name gint nreserved))
)

(method set_dither
  (of-object Preview (Gtk))
  (c-name gtk_preview_set_dither)
  (return-type none)
  (parameter (type-and-name GdkRgbDither dither))
)

(function preview_get_visual
  (c-name gtk_preview_get_visual)
  (return-type GdkVisual*)
)

(function preview_get_cmap
  (c-name gtk_preview_get_cmap)
  (return-type GdkColormap*)
)

(function preview_get_info
  (c-name gtk_preview_get_info)
  (return-type GtkPreviewInfo*)
)

(function preview_reset
  (c-name gtk_preview_reset)
  (return-type none)
)



;; From /usr/include/gtk/gtkprogress.h

(function gtk_progress_get_type
  (c-name gtk_progress_get_type)
  (return-type GtkType)
)

(method set_show_text
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_show_text)
  (return-type none)
  (parameter (type-and-name gint show_text))
)

(method set_text_alignment
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_text_alignment)
  (return-type none)
  (parameter (type-and-name gfloat x_align))
  (parameter (type-and-name gfloat y_align))
)

(method set_format_string
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_format_string)
  (return-type none)
  (parameter (type-and-name const-gchar* format))
)

(method set_adjustment
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_adjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method configure
  (of-object Progress (Gtk))
  (c-name gtk_progress_configure)
  (return-type none)
  (parameter (type-and-name gfloat value))
  (parameter (type-and-name gfloat min))
  (parameter (type-and-name gfloat max))
)

(method set_percentage
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_percentage)
  (return-type none)
  (parameter (type-and-name gfloat percentage))
)

(method set_value
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_value)
  (return-type none)
  (parameter (type-and-name gfloat value))
)

(method get_value
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_value)
  (return-type gfloat)
)

(method set_activity_mode
  (of-object Progress (Gtk))
  (c-name gtk_progress_set_activity_mode)
  (return-type none)
  (parameter (type-and-name guint activity_mode))
)

(method get_current_text
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_current_text)
  (return-type gchar*)
)

(method get_text_from_value
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_text_from_value)
  (return-type gchar*)
  (parameter (type-and-name gfloat value))
)

(method get_current_percentage
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_current_percentage)
  (return-type gfloat)
)

(method get_percentage_from_value
  (of-object Progress (Gtk))
  (c-name gtk_progress_get_percentage_from_value)
  (return-type gfloat)
  (parameter (type-and-name gfloat value))
)



;; From /usr/include/gtk/gtkprogressbar.h

(function gtk_progress_bar_get_type
  (c-name gtk_progress_bar_get_type)
  (return-type GtkType)
)

(function gtk_progress_bar_new
  (c-name gtk_progress_bar_new)
  (return-type GtkWidget*)
)

(function gtk_progress_bar_new_with_adjustment
  (c-name gtk_progress_bar_new_with_adjustment)
  (is-constructor-of GtkProgressBar)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok) (default "NULL"))
)

(method set_bar_style
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_bar_style)
  (return-type none)
  (parameter (type-and-name GtkProgressBarStyle style))
)

(method set_discrete_blocks
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_discrete_blocks)
  (return-type none)
  (parameter (type-and-name guint blocks))
)

(method set_activity_step
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_activity_step)
  (return-type none)
  (parameter (type-and-name guint step))
)

(method set_activity_blocks
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_activity_blocks)
  (return-type none)
  (parameter (type-and-name guint blocks))
)

(method set_orientation
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_set_orientation)
  (return-type none)
  (parameter (type-and-name GtkProgressBarOrientation orientation))
)

(method update
  (of-object ProgressBar (Gtk))
  (c-name gtk_progress_bar_update)
  (return-type none)
  (parameter (type-and-name gfloat percentage))
)



;; From /usr/include/gtk/gtkradiobutton.h

(function gtk_radio_button_get_type
  (c-name gtk_radio_button_get_type)
  (return-type GtkType)
)

(function gtk_radio_button_new
  (c-name gtk_radio_button_new)
  (is-constructor-of GtkRadioButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
)

(function gtk_radio_button_new_from_widget
  (c-name gtk_radio_button_new_from_widget)
  (is-constructor-of GtkRadioButton)
  (return-type GtkWidget*)
)

(function gtk_radio_button_new_with_label
  (c-name gtk_radio_button_new_with_label)
  (is-constructor-of GtkRadioButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
  (parameter (type-and-name const-gchar* label))
)

(function gtk_radio_button_new_with_label_from_widget
  (c-name gtk_radio_button_new_with_label_from_widget)
  (is-constructor-of GtkRadioButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method group
  (of-object RadioButton (Gtk))
  (c-name gtk_radio_button_group)
  (return-type GSList*)
)

(method set_group
  (of-object RadioButton (Gtk))
  (c-name gtk_radio_button_set_group)
  (return-type none)
  (parameter (type-and-name GSList* group))
)



;; From /usr/include/gtk/gtkradiomenuitem.h

(function gtk_radio_menu_item_get_type
  (c-name gtk_radio_menu_item_get_type)
  (return-type GtkType)
)

(function gtk_radio_menu_item_new
  (c-name gtk_radio_menu_item_new)
  (is-constructor-of GtkRadioMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
)

(function gtk_radio_menu_item_new_with_label
  (c-name gtk_radio_menu_item_new_with_label)
  (is-constructor-of GtkRadioMenuItem)
  (return-type GtkWidget*)
  (parameter (type-and-name GSList* group))
  (parameter (type-and-name const-gchar* label))
)

(method group
  (of-object RadioMenuItem (Gtk))
  (c-name gtk_radio_menu_item_group)
  (return-type GSList*)
)

(method set_group
  (of-object RadioMenuItem (Gtk))
  (c-name gtk_radio_menu_item_set_group)
  (return-type none)
  (parameter (type-and-name GSList* group))
)



;; From /usr/include/gtk/gtkrange.h

(function gtk_range_get_type
  (c-name gtk_range_get_type)
  (return-type GtkType)
)

(method get_adjustment
  (of-object Range (Gtk))
  (c-name gtk_range_get_adjustment)
  (return-type GtkAdjustment*)
)

(method set_update_policy
  (of-object Range (Gtk))
  (c-name gtk_range_set_update_policy)
  (return-type none)
  (parameter (type-and-name GtkUpdateType policy))
)

(method set_adjustment
  (of-object Range (Gtk))
  (c-name gtk_range_set_adjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method draw_background
  (of-object Range (Gtk))
  (c-name gtk_range_draw_background)
  (return-type none)
)

(method clear_background
  (of-object Range (Gtk))
  (c-name gtk_range_clear_background)
  (return-type none)
)

(method draw_trough
  (of-object Range (Gtk))
  (c-name gtk_range_draw_trough)
  (return-type none)
)

(method draw_slider
  (of-object Range (Gtk))
  (c-name gtk_range_draw_slider)
  (return-type none)
)

(method draw_step_forw
  (of-object Range (Gtk))
  (c-name gtk_range_draw_step_forw)
  (return-type none)
)

(method draw_step_back
  (of-object Range (Gtk))
  (c-name gtk_range_draw_step_back)
  (return-type none)
)

(method slider_update
  (of-object Range (Gtk))
  (c-name gtk_range_slider_update)
  (return-type none)
)

(method trough_click
  (of-object Range (Gtk))
  (c-name gtk_range_trough_click)
  (return-type gint)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gfloat* jump_perc))
)

(method default_hslider_update
  (of-object Range (Gtk))
  (c-name gtk_range_default_hslider_update)
  (return-type none)
)

(method default_vslider_update
  (of-object Range (Gtk))
  (c-name gtk_range_default_vslider_update)
  (return-type none)
)

(method default_htrough_click
  (of-object Range (Gtk))
  (c-name gtk_range_default_htrough_click)
  (return-type gint)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gfloat* jump_perc))
)

(method default_vtrough_click
  (of-object Range (Gtk))
  (c-name gtk_range_default_vtrough_click)
  (return-type gint)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gfloat* jump_perc))
)

(method default_hmotion
  (of-object Range (Gtk))
  (c-name gtk_range_default_hmotion)
  (return-type none)
  (parameter (type-and-name gint xdelta))
  (parameter (type-and-name gint ydelta))
)

(method default_vmotion
  (of-object Range (Gtk))
  (c-name gtk_range_default_vmotion)
  (return-type none)
  (parameter (type-and-name gint xdelta))
  (parameter (type-and-name gint ydelta))
)



;; From /usr/include/gtk/gtkrc.h

(function rc_add_default_file
  (c-name gtk_rc_add_default_file)
  (return-type none)
  (parameter (type-and-name const-gchar* filename))
)

(function rc_set_default_files
  (c-name gtk_rc_set_default_files)
  (return-type none)
  (parameter (type-and-name gchar** filenames))
)

(function rc_get_default_files
  (c-name gtk_rc_get_default_files)
  (return-type gchar**)
)

(function rc_parse
  (c-name gtk_rc_parse)
  (return-type none)
  (parameter (type-and-name const-gchar* filename))
)

(function rc_parse_string
  (c-name gtk_rc_parse_string)
  (return-type none)
  (parameter (type-and-name const-gchar* rc_string))
)

(function rc_reparse_all
  (c-name gtk_rc_reparse_all)
  (return-type gboolean)
)

(function rc_get_style
  (c-name gtk_rc_get_style)
  (return-type GtkStyle*)
  (parameter (type-and-name GtkWidget* widget))
)

(function rc_add_widget_name_style
  (c-name gtk_rc_add_widget_name_style)
  (return-type none)
  (parameter (type-and-name GtkRcStyle* rc_style))
  (parameter (type-and-name const-gchar* pattern))
)

(function rc_add_widget_class_style
  (c-name gtk_rc_add_widget_class_style)
  (return-type none)
  (parameter (type-and-name GtkRcStyle* rc_style))
  (parameter (type-and-name const-gchar* pattern))
)

(function rc_add_class_style
  (c-name gtk_rc_add_class_style)
  (return-type none)
  (parameter (type-and-name GtkRcStyle* rc_style))
  (parameter (type-and-name const-gchar* pattern))
)

(function rc_set_image_loader
  (c-name gtk_rc_set_image_loader)
  (return-type none)
  (parameter (type-and-name GtkImageLoader loader))
)

(function rc_load_image
  (c-name gtk_rc_load_image)
  (return-type GdkPixmap*)
  (parameter (type-and-name GdkColormap* colormap))
  (parameter (type-and-name GdkColor* transparent_color))
  (parameter (type-and-name const-gchar* filename))
)

(function rc_find_pixmap_in_path
  (c-name gtk_rc_find_pixmap_in_path)
  (return-type gchar*)
  (parameter (type-and-name GScanner* scanner))
  (parameter (type-and-name const-gchar* pixmap_file))
)

(function rc_find_module_in_path
  (c-name gtk_rc_find_module_in_path)
  (return-type gchar*)
  (parameter (type-and-name const-gchar* module_file))
)

(function rc_get_theme_dir
  (c-name gtk_rc_get_theme_dir)
  (return-type gchar*)
)

(function rc_get_module_dir
  (c-name gtk_rc_get_module_dir)
  (return-type gchar*)
)

(function rc_parse_color
  (c-name gtk_rc_parse_color)
  (return-type guint)
  (parameter (type-and-name GScanner* scanner))
  (parameter (type-and-name GdkColor* color))
)

(function rc_parse_state
  (c-name gtk_rc_parse_state)
  (return-type guint)
  (parameter (type-and-name GScanner* scanner))
  (parameter (type-and-name GtkStateType* state))
)

(function rc_parse_priority
  (c-name gtk_rc_parse_priority)
  (return-type guint)
  (parameter (type-and-name GScanner* scanner))
  (parameter (type-and-name GtkPathPriorityType* priority))
)



;; From /usr/include/gtk/gtkruler.h

(function gtk_ruler_get_type
  (c-name gtk_ruler_get_type)
  (return-type GtkType)
)

(method set_metric
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_set_metric)
  (return-type none)
  (parameter (type-and-name GtkMetricType metric))
)

(method set_range
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_set_range)
  (return-type none)
  (parameter (type-and-name gfloat lower))
  (parameter (type-and-name gfloat upper))
  (parameter (type-and-name gfloat position))
  (parameter (type-and-name gfloat max_size))
)

(method draw_ticks
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_draw_ticks)
  (return-type none)
)

(method draw_pos
  (of-object Ruler (Gtk))
  (c-name gtk_ruler_draw_pos)
  (return-type none)
)



;; From /usr/include/gtk/gtkscale.h

(function gtk_scale_get_type
  (c-name gtk_scale_get_type)
  (return-type GtkType)
)

(method set_digits
  (of-object Scale (Gtk))
  (c-name gtk_scale_set_digits)
  (return-type none)
  (parameter (type-and-name gint digits))
)

(method set_draw_value
  (of-object Scale (Gtk))
  (c-name gtk_scale_set_draw_value)
  (return-type none)
  (parameter (type-and-name gboolean draw_value))
)

(method set_value_pos
  (of-object Scale (Gtk))
  (c-name gtk_scale_set_value_pos)
  (return-type none)
  (parameter (type-and-name GtkPositionType pos))
)

(method get_value_width
  (of-object Scale (Gtk))
  (c-name gtk_scale_get_value_width)
  (return-type gint)
)

(method draw_value
  (of-object Scale (Gtk))
  (c-name gtk_scale_draw_value)
  (return-type none)
)



;; From /usr/include/gtk/gtkscrollbar.h

(function gtk_scrollbar_get_type
  (c-name gtk_scrollbar_get_type)
  (return-type GtkType)
)



;; From /usr/include/gtk/gtkscrolledwindow.h

(function gtk_scrolled_window_get_type
  (c-name gtk_scrolled_window_get_type)
  (return-type GtkType)
)

(function gtk_scrolled_window_new
  (c-name gtk_scrolled_window_new)
  (is-constructor-of GtkScrolledWindow)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* hadjustment) (null-ok) (default "NULL"))
  (parameter (type-and-name GtkAdjustment* vadjustment) (null-ok) (default "NULL"))
)

(method set_hadjustment
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* hadjustment))
)

(method set_vadjustment
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* hadjustment))
)

(method get_hadjustment
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method get_vadjustment
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_policy
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_policy)
  (return-type none)
  (parameter (type-and-name GtkPolicyType hscrollbar_policy))
  (parameter (type-and-name GtkPolicyType vscrollbar_policy))
)

(method set_placement
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_set_placement)
  (return-type none)
  (parameter (type-and-name GtkCornerType window_placement))
)

(method add_with_viewport
  (of-object ScrolledWindow (Gtk))
  (c-name gtk_scrolled_window_add_with_viewport)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)



;; From /usr/include/gtk/gtkselection.h

(function gtk_target_list_new
  (c-name gtk_target_list_new)
  (return-type GtkTargetList*)
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name guint ntargets))
)

(method ref
  (of-object TargetList (Gtk))
  (c-name gtk_target_list_ref)
  (return-type none)
)

(method unref
  (of-object TargetList (Gtk))
  (c-name gtk_target_list_unref)
  (return-type none)
)

(method add
  (of-object TargetList (Gtk))
  (c-name gtk_target_list_add)
  (return-type none)
  (parameter (type-and-name GdkAtom target))
  (parameter (type-and-name guint flags))
  (parameter (type-and-name guint info))
)

(method add_table
  (of-object TargetList (Gtk))
  (c-name gtk_target_list_add_table)
  (return-type none)
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name guint ntargets))
)

(method remove
  (of-object TargetList (Gtk))
  (c-name gtk_target_list_remove)
  (return-type none)
  (parameter (type-and-name GdkAtom target))
)

(method find
  (of-object TargetList (Gtk))
  (c-name gtk_target_list_find)
  (return-type gboolean)
  (parameter (type-and-name GdkAtom target))
  (parameter (type-and-name guint* info))
)

(method selection_owner_set
  (of-object Widget (Gtk))
  (c-name gtk_selection_owner_set)
  (return-type gint)
  (parameter (type-and-name GdkAtom selection))
  (parameter (type-and-name guint32 time))
)

(method selection_add_target
  (of-object Widget (Gtk))
  (c-name gtk_selection_add_target)
  (return-type none)
  (parameter (type-and-name GdkAtom selection))
  (parameter (type-and-name GdkAtom target))
  (parameter (type-and-name guint info))
)

(method selection_add_targets
  (of-object Widget (Gtk))
  (c-name gtk_selection_add_targets)
  (return-type none)
  (parameter (type-and-name GdkAtom selection))
  (parameter (type-and-name const-GtkTargetEntry* targets))
  (parameter (type-and-name guint ntargets))
)

(method selection_convert
  (of-object Widget (Gtk))
  (c-name gtk_selection_convert)
  (return-type gint)
  (parameter (type-and-name GdkAtom selection))
  (parameter (type-and-name GdkAtom target))
  (parameter (type-and-name guint32 time))
)

(method set
  (of-object SelectionData (Gtk))
  (c-name gtk_selection_data_set)
  (return-type none)
  (parameter (type-and-name GdkAtom type))
  (parameter (type-and-name gint format))
  (parameter (type-and-name const-guchar* data))
  (parameter (type-and-name gint length))
)

(method selection_remove_all
  (of-object Widget (Gtk))
  (c-name gtk_selection_remove_all)
  (return-type none)
)

(method selection_clear
  (of-object Widget (Gtk))
  (c-name gtk_selection_clear)
  (return-type gint)
  (parameter (type-and-name GdkEventSelection* event))
)

(method selection_request
  (of-object Widget (Gtk))
  (c-name gtk_selection_request)
  (return-type gint)
  (parameter (type-and-name GdkEventSelection* event))
)

(function gtk_selection_incr_event
  (c-name gtk_selection_incr_event)
  (return-type gint)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GdkEventProperty* event))
)

(method selection_notify
  (of-object Widget (Gtk))
  (c-name gtk_selection_notify)
  (return-type gint)
  (parameter (type-and-name GdkEventSelection* event))
)

(method selection_property_notify
  (of-object Widget (Gtk))
  (c-name gtk_selection_property_notify)
  (return-type gint)
  (parameter (type-and-name GdkEventProperty* event))
)

(method copy
  (of-object SelectionData (Gtk))
  (c-name gtk_selection_data_copy)
  (return-type GtkSelectioData*)
)

(method free
  (of-object SelectionData (Gtk))
  (c-name gtk_selection_data_free)
  (return-type none)
)



;; From /usr/include/gtk/gtkseparator.h

(function gtk_separator_get_type
  (c-name gtk_separator_get_type)
  (return-type GtkType)
)



;; From /usr/include/gtk/gtksignal.h

(function gtk_signal_lookup
  (c-name gtk_signal_lookup)
  (return-type guint)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkType object_type))
)

(function gtk_signal_name
  (c-name gtk_signal_name)
  (return-type gchar*)
  (parameter (type-and-name guint signal_id))
)

(function gtk_signal_n_emissions
  (c-name gtk_signal_n_emissions)
  (return-type guint)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name guint signal_id))
)

(function gtk_signal_n_emissions_by_name
  (c-name gtk_signal_n_emissions_by_name)
  (return-type guint)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* name))
)

(method emit_stop
  (of-object Object (Gtk))
  (c-name gtk_signal_emit_stop)
  (return-type none)
  (parameter (type-and-name guint signal_id))
)

(method emit_stop_by_name
  (of-object Object (Gtk))
  (c-name gtk_signal_emit_stop_by_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
)

(method connect
  (of-object Object (Gtk))
  (c-name gtk_signal_connect)
  (return-type guint)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name gpointer func_data))
)

(method connect_after
  (of-object Object (Gtk))
  (c-name gtk_signal_connect_after)
  (return-type guint)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name gpointer func_data))
)

(method connect_object
  (of-object Object (Gtk))
  (c-name gtk_signal_connect_object)
  (return-type guint)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name GtkObject* slot_object))
)

(method connect_object_after
  (of-object Object (Gtk))
  (c-name gtk_signal_connect_object_after)
  (return-type guint)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name GtkObject* slot_object))
)

(function gtk_signal_connect_full
  (c-name gtk_signal_connect_full)
  (return-type guint)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name GtkCallbackMarshal marshal))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GtkDestroyNotify destroy_func))
  (parameter (type-and-name gint object_signal))
  (parameter (type-and-name gint after))
)

(function gtk_signal_connect_object_while_alive
  (c-name gtk_signal_connect_object_while_alive)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* signal))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name GtkObject* alive_object))
)

(function gtk_signal_connect_while_alive
  (c-name gtk_signal_connect_while_alive)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* signal))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name gpointer func_data))
  (parameter (type-and-name GtkObject* alive_object))
)

(method disconnect
  (of-object Object (Gtk))
  (c-name gtk_signal_disconnect)
  (return-type none)
  (parameter (type-and-name guint handler_id))
)

(function gtk_signal_disconnect_by_func
  (c-name gtk_signal_disconnect_by_func)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name gpointer data))
)

(function gtk_signal_disconnect_by_data
  (c-name gtk_signal_disconnect_by_data)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name gpointer data))
)

(method signal_handler_block
  (of-object Object (Gtk))
  (c-name gtk_signal_handler_block)
  (return-type none)
  (parameter (type-and-name guint handler_id))
)

(function gtk_signal_handler_block_by_func
  (c-name gtk_signal_handler_block_by_func)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name gpointer data))
)

(function gtk_signal_handler_block_by_data
  (c-name gtk_signal_handler_block_by_data)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name gpointer data))
)

(method signal_handler_unblock
  (of-object Object (Gtk))
  (c-name gtk_signal_handler_unblock)
  (return-type none)
  (parameter (type-and-name guint handler_id))
)

(function gtk_signal_handler_unblock_by_func
  (c-name gtk_signal_handler_unblock_by_func)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name gpointer data))
)

(function gtk_signal_handler_unblock_by_data
  (c-name gtk_signal_handler_unblock_by_data)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name gpointer data))
)

(method signal_handler_pending
  (of-object Object (Gtk))
  (c-name gtk_signal_handler_pending)
  (return-type guint)
  (parameter (type-and-name guint signal_id))
  (parameter (type-and-name gboolean may_be_blocked))
)

(function gtk_signal_handler_pending_by_func
  (c-name gtk_signal_handler_pending_by_func)
  (return-type guint)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name guint signal_id))
  (parameter (type-and-name gboolean may_be_blocked))
  (parameter (type-and-name GtkSignalFunc func))
  (parameter (type-and-name gpointer data))
)

(method signal_handler_pending_by_id
  (of-object Object (Gtk))
  (c-name gtk_signal_handler_pending_by_id)
  (return-type gint)
  (parameter (type-and-name guint handler_id))
  (parameter (type-and-name gboolean may_be_blocked))
)

(function gtk_signal_add_emission_hook
  (c-name gtk_signal_add_emission_hook)
  (return-type guint)
  (parameter (type-and-name guint signal_id))
  (parameter (type-and-name GtkEmissionHook hook_func))
  (parameter (type-and-name gpointer data))
)

(function gtk_signal_add_emission_hook_full
  (c-name gtk_signal_add_emission_hook_full)
  (return-type guint)
  (parameter (type-and-name guint signal_id))
  (parameter (type-and-name GtkEmissionHook hook_func))
  (parameter (type-and-name gpointer data))
  (parameter (type-and-name GDestroyNotify destroy))
)

(function gtk_signal_remove_emission_hook
  (c-name gtk_signal_remove_emission_hook)
  (return-type none)
  (parameter (type-and-name guint signal_id))
  (parameter (type-and-name guint hook_id))
)

(function gtk_signal_query
  (c-name gtk_signal_query)
  (return-type GtkSignalQuery*)
  (parameter (type-and-name guint signal_id))
)

(function gtk_signal_new
  (c-name gtk_signal_new)
  (return-type guint)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkSignalRunType signal_flags))
  (parameter (type-and-name GtkType object_type))
  (parameter (type-and-name guint function_offset))
  (parameter (type-and-name GtkSignalMarshaller marshaller))
  (parameter (type-and-name GtkType return_val))
  (parameter (type-and-name guint nparams))
  (varargs t)
)

(function gtk_signal_newv
  (c-name gtk_signal_newv)
  (return-type guint)
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkSignalRunType signal_flags))
  (parameter (type-and-name GtkType object_type))
  (parameter (type-and-name guint function_offset))
  (parameter (type-and-name GtkSignalMarshaller marshaller))
  (parameter (type-and-name GtkType return_val))
  (parameter (type-and-name guint nparams))
  (parameter (type-and-name GtkType* params))
)

(method emit
  (of-object Object (Gtk))
  (c-name gtk_signal_emit)
  (return-type none)
  (parameter (type-and-name guint signal_id))
  (varargs t)
)

(function gtk_signal_emit_by_name
  (c-name gtk_signal_emit_by_name)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* name))
  (varargs t)
)

(function gtk_signal_emitv
  (c-name gtk_signal_emitv)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name guint signal_id))
  (parameter (type-and-name GtkArg* params))
)

(function gtk_signal_emitv_by_name
  (c-name gtk_signal_emitv_by_name)
  (return-type none)
  (parameter (type-and-name GtkObject* object))
  (parameter (type-and-name const-gchar* name))
  (parameter (type-and-name GtkArg* params))
)

(method signal_handlers_destroy
  (of-object Object (Gtk))
  (c-name gtk_signal_handlers_destroy)
  (return-type none)
)

(function gtk_signal_set_funcs
  (c-name gtk_signal_set_funcs)
  (return-type none)
  (parameter (type-and-name GtkSignalMarshal marshal_func))
  (parameter (type-and-name GtkSignalDestroy destroy_func))
)



;; From /usr/include/gtk/gtksocket.h

(function gtk_socket_new
  (c-name gtk_socket_new)
  (is-constructor-of GtkSocket)
  (return-type GtkWidget*)
)

(function gtk_socket_get_type
  (c-name gtk_socket_get_type)
  (return-type guint)
)

(method steal
  (of-object Socket (Gtk))
  (c-name gtk_socket_steal)
  (return-type none)
  (parameter (type-and-name guint32 wid))
)



;; From /usr/include/gtk/gtkspinbutton.h

(function gtk_spin_button_get_type
  (c-name gtk_spin_button_get_type)
  (return-type GtkType)
)

(method configure
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_configure)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
  (parameter (type-and-name gfloat climb_rate))
  (parameter (type-and-name guint digits))
)

(function gtk_spin_button_new
  (c-name gtk_spin_button_new)
  (is-constructor-of GtkSpinButton)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok) (default "NULL"))
  (parameter (type-and-name gfloat climb_rate) (default "0.0"))
  (parameter (type-and-name guint digits) (default "0"))
)

(method set_adjustment
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_adjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method get_adjustment
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_adjustment)
  (return-type GtkAdjustment*)
)

(method set_digits
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_digits)
  (return-type none)
  (parameter (type-and-name guint digits))
)

(method get_value_as_float
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_value_as_float)
  (return-type gfloat)
)

(method get_value_as_int
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_get_value_as_int)
  (return-type gint)
)

(method set_value
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_value)
  (return-type none)
  (parameter (type-and-name gfloat value))
)

(method set_update_policy
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_update_policy)
  (return-type none)
  (parameter (type-and-name GtkSpinButtonUpdatePolicy policy))
)

(method set_numeric
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_numeric)
  (return-type none)
  (parameter (type-and-name gboolean numeric))
)

(method spin
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_spin)
  (return-type none)
  (parameter (type-and-name GtkSpinType direction))
  (parameter (type-and-name gfloat increment))
)

(method set_wrap
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_wrap)
  (return-type none)
  (parameter (type-and-name gboolean wrap))
)

(method set_shadow_type
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType shadow_type))
)

(method set_snap_to_ticks
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_set_snap_to_ticks)
  (return-type none)
  (parameter (type-and-name gboolean snap_to_ticks))
)

(method update
  (of-object SpinButton (Gtk))
  (c-name gtk_spin_button_update)
  (return-type none)
)



;; From /usr/include/gtk/gtkstatusbar.h

(function gtk_statusbar_get_type
  (c-name gtk_statusbar_get_type)
  (return-type guint)
)

(function gtk_statusbar_new
  (c-name gtk_statusbar_new)
  (is-constructor-of GtkStatusbar)
  (return-type GtkWidget*)
)

(method get_context_id
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_get_context_id)
  (return-type guint)
  (parameter (type-and-name const-gchar* context_description))
)

(method push
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_push)
  (return-type guint)
  (parameter (type-and-name guint context_id))
  (parameter (type-and-name const-gchar* text))
)

(method pop
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_pop)
  (return-type none)
  (parameter (type-and-name guint context_id))
)

(method remove
  (of-object Statusbar (Gtk))
  (c-name gtk_statusbar_remove)
  (return-type none)
  (parameter (type-and-name guint context_id))
  (parameter (type-and-name guint message_id))
)



;; From /usr/include/gtk/gtkstyle.h

(function gtk_style_new
  (c-name gtk_style_new)
  (return-type GtkStyle*)
)

(method copy
  (of-object Style (Gtk))
  (c-name gtk_style_copy)
  (return-type GtkStyle*)
)

(method attach
  (of-object Style (Gtk))
  (c-name gtk_style_attach)
  (return-type GtkStyle*)
  (parameter (type-and-name GdkWindow* window))
)

(method detach
  (of-object Style (Gtk))
  (c-name gtk_style_detach)
  (return-type none)
)

(method ref
  (of-object Style (Gtk))
  (c-name gtk_style_ref)
  (return-type GtkStyle*)
)

(method unref
  (of-object Style (Gtk))
  (c-name gtk_style_unref)
  (return-type none)
)

(method set_background
  (of-object Style (Gtk))
  (c-name gtk_style_set_background)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
)

(method apply_default_background
  (of-object Style (Gtk))
  (c-name gtk_style_apply_default_background)
  (return-type none)
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name gboolean set_bg))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_hline
  (c-name gtk_draw_hline)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gint x1))
  (parameter (type-and-name gint x2))
  (parameter (type-and-name gint y))
)

(function gtk_draw_vline
  (c-name gtk_draw_vline)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gint y1))
  (parameter (type-and-name gint y2))
  (parameter (type-and-name gint x))
)

(function gtk_draw_shadow
  (c-name gtk_draw_shadow)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_polygon
  (c-name gtk_draw_polygon)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkPoint* points))
  (parameter (type-and-name gint npoints))
  (parameter (type-and-name gboolean fill))
)

(function gtk_draw_arrow
  (c-name gtk_draw_arrow)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_diamond
  (c-name gtk_draw_diamond)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_oval
  (c-name gtk_draw_oval)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_string
  (c-name gtk_draw_string)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name const-gchar* string))
)

(function gtk_draw_box
  (c-name gtk_draw_box)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_flat_box
  (c-name gtk_draw_flat_box)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_check
  (c-name gtk_draw_check)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_option
  (c-name gtk_draw_option)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_cross
  (c-name gtk_draw_cross)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_ramp
  (c-name gtk_draw_ramp)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_tab
  (c-name gtk_draw_tab)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_shadow_gap
  (c-name gtk_draw_shadow_gap)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
  (parameter (type-and-name gint gap_x))
  (parameter (type-and-name gint gap_width))
)

(function gtk_draw_box_gap
  (c-name gtk_draw_box_gap)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
  (parameter (type-and-name gint gap_x))
  (parameter (type-and-name gint gap_width))
)

(function gtk_draw_extension
  (c-name gtk_draw_extension)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
)

(function gtk_draw_focus
  (c-name gtk_draw_focus)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_draw_slider
  (c-name gtk_draw_slider)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkOrientation orientation))
)

(function gtk_draw_handle
  (c-name gtk_draw_handle)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkOrientation orientation))
)

(function gtk_paint_hline
  (c-name gtk_paint_hline)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x1))
  (parameter (type-and-name gint x2))
  (parameter (type-and-name gint y))
)

(function gtk_paint_vline
  (c-name gtk_paint_vline)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint y1))
  (parameter (type-and-name gint y2))
  (parameter (type-and-name gint x))
)

(function gtk_paint_shadow
  (c-name gtk_paint_shadow)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_polygon
  (c-name gtk_paint_polygon)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name GdkPoint* points))
  (parameter (type-and-name gint npoints))
  (parameter (type-and-name gboolean fill))
)

(function gtk_paint_arrow
  (c-name gtk_paint_arrow)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name gboolean fill))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_diamond
  (c-name gtk_paint_diamond)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_oval
  (c-name gtk_paint_oval)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_string
  (c-name gtk_paint_string)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name const-gchar* string))
)

(function gtk_paint_box
  (c-name gtk_paint_box)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_flat_box
  (c-name gtk_paint_flat_box)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_check
  (c-name gtk_paint_check)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_option
  (c-name gtk_paint_option)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_cross
  (c-name gtk_paint_cross)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_ramp
  (c-name gtk_paint_ramp)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name GtkArrowType arrow_type))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_tab
  (c-name gtk_paint_tab)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_shadow_gap
  (c-name gtk_paint_shadow_gap)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
  (parameter (type-and-name gint gap_x))
  (parameter (type-and-name gint gap_width))
)

(function gtk_paint_box_gap
  (c-name gtk_paint_box_gap)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
  (parameter (type-and-name gint gap_x))
  (parameter (type-and-name gint gap_width))
)

(function gtk_paint_extension
  (c-name gtk_paint_extension)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkPositionType gap_side))
)

(function gtk_paint_focus
  (c-name gtk_paint_focus)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(function gtk_paint_slider
  (c-name gtk_paint_slider)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkOrientation orientation))
)

(function gtk_paint_handle
  (c-name gtk_paint_handle)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
  (parameter (type-and-name GdkWindow* window))
  (parameter (type-and-name GtkStateType state_type))
  (parameter (type-and-name GtkShadowType shadow_type))
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name gchar* detail))
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
  (parameter (type-and-name GtkOrientation orientation))
)



;; From /usr/include/gtk/gtktable.h

(function gtk_table_get_type
  (c-name gtk_table_get_type)
  (return-type GtkType)
)

(function gtk_table_new
  (c-name gtk_table_new)
  (is-constructor-of GtkTable)
  (return-type GtkWidget*)
  (parameter (type-and-name guint rows) (default "1"))
  (parameter (type-and-name guint columns) (default "1"))
  (parameter (type-and-name gboolean homogeneous) (default "FALSE"))
)

(method resize
  (of-object Table (Gtk))
  (c-name gtk_table_resize)
  (return-type none)
  (parameter (type-and-name guint rows))
  (parameter (type-and-name guint columns))
)

(method attach
  (of-object Table (Gtk))
  (c-name gtk_table_attach)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
  (parameter (type-and-name guint left_attach))
  (parameter (type-and-name guint right_attach))
  (parameter (type-and-name guint top_attach))
  (parameter (type-and-name guint bottom_attach))
  (parameter (type-and-name GtkAttachOptions xoptions) (default "GTK_EXPAND|GTK_FILL"))
  (parameter (type-and-name GtkAttachOptions yoptions) (default "GTK_EXPAND|GTK_FILL"))
  (parameter (type-and-name guint xpadding) (default "0"))
  (parameter (type-and-name guint ypadding) (default "0"))
)

(method attach_defaults
  (of-object Table (Gtk))
  (c-name gtk_table_attach_defaults)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name guint left_attach))
  (parameter (type-and-name guint right_attach))
  (parameter (type-and-name guint top_attach))
  (parameter (type-and-name guint bottom_attach))
)

(method set_row_spacing
  (of-object Table (Gtk))
  (c-name gtk_table_set_row_spacing)
  (return-type none)
  (parameter (type-and-name guint row))
  (parameter (type-and-name guint spacing))
)

(method set_col_spacing
  (of-object Table (Gtk))
  (c-name gtk_table_set_col_spacing)
  (return-type none)
  (parameter (type-and-name guint column))
  (parameter (type-and-name guint spacing))
)

(method set_row_spacings
  (of-object Table (Gtk))
  (c-name gtk_table_set_row_spacings)
  (return-type none)
  (parameter (type-and-name guint spacing))
)

(method set_col_spacings
  (of-object Table (Gtk))
  (c-name gtk_table_set_col_spacings)
  (return-type none)
  (parameter (type-and-name guint spacing))
)

(method set_homogeneous
  (of-object Table (Gtk))
  (c-name gtk_table_set_homogeneous)
  (return-type none)
  (parameter (type-and-name gboolean homogeneous))
)



;; From /usr/include/gtk/gtktearoffmenuitem.h

(function gtk_tearoff_menu_item_get_type
  (c-name gtk_tearoff_menu_item_get_type)
  (return-type GtkType)
)

(function gtk_tearoff_menu_item_new
  (c-name gtk_tearoff_menu_item_new)
  (is-constructor-of GtkTearoffMenuItem)
  (return-type GtkWidget*)
)



;; From /usr/include/gtk/gtktext.h

(function gtk_text_get_type
  (c-name gtk_text_get_type)
  (return-type GtkType)
)

(function gtk_text_new
  (c-name gtk_text_new)
  (is-constructor-of GtkText)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* hadj) (null-ok) (default "NULL"))
  (parameter (type-and-name GtkAdjustment* vadj) (null-ok) (default "NULL"))
)

(method set_editable
  (of-object Text (Gtk))
  (c-name gtk_text_set_editable)
  (return-type none)
  (parameter (type-and-name gboolean editable))
)

(method set_word_wrap
  (of-object Text (Gtk))
  (c-name gtk_text_set_word_wrap)
  (return-type none)
  (parameter (type-and-name gint word_wrap))
)

(method set_line_wrap
  (of-object Text (Gtk))
  (c-name gtk_text_set_line_wrap)
  (return-type none)
  (parameter (type-and-name gint line_wrap))
)

(method set_adjustments
  (of-object Text (Gtk))
  (c-name gtk_text_set_adjustments)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* hadj))
  (parameter (type-and-name GtkAdjustment* vadj))
)

(method set_point
  (of-object Text (Gtk))
  (c-name gtk_text_set_point)
  (return-type none)
  (parameter (type-and-name guint index))
)

(method get_point
  (of-object Text (Gtk))
  (c-name gtk_text_get_point)
  (return-type guint)
)

(method get_length
  (of-object Text (Gtk))
  (c-name gtk_text_get_length)
  (return-type guint)
)

(method freeze
  (of-object Text (Gtk))
  (c-name gtk_text_freeze)
  (return-type none)
)

(method thaw
  (of-object Text (Gtk))
  (c-name gtk_text_thaw)
  (return-type none)
)

(method insert
  (of-object Text (Gtk))
  (c-name gtk_text_insert)
  (return-type none)
  (parameter (type-and-name GdkFont* font) (null-ok))
  (parameter (type-and-name GdkColor* fore) (null-ok))
  (parameter (type-and-name GdkColor* back) (null-ok))
  (parameter (type-and-name const-char* chars))
  (parameter (type-and-name gint length) (default "-1"))
)

(method backward_delete
  (of-object Text (Gtk))
  (c-name gtk_text_backward_delete)
  (return-type gint)
  (parameter (type-and-name guint nchars))
)

(method forward_delete
  (of-object Text (Gtk))
  (c-name gtk_text_forward_delete)
  (return-type gint)
  (parameter (type-and-name guint nchars))
)



;; From /usr/include/gtk/gtktipsquery.h

(function gtk_tips_query_get_type
  (c-name gtk_tips_query_get_type)
  (return-type GtkType)
)

(function gtk_tips_query_new
  (c-name gtk_tips_query_new)
  (is-constructor-of GtkTipsQuery)
  (return-type GtkWidget*)
)

(method start_query
  (of-object TipsQuery (Gtk))
  (c-name gtk_tips_query_start_query)
  (return-type none)
)

(method stop_query
  (of-object TipsQuery (Gtk))
  (c-name gtk_tips_query_stop_query)
  (return-type none)
)

(method set_caller
  (of-object TipsQuery (Gtk))
  (c-name gtk_tips_query_set_caller)
  (return-type none)
  (parameter (type-and-name GtkWidget* caller))
)

(method set_labels
  (of-object TipsQuery (Gtk))
  (c-name gtk_tips_query_set_labels)
  (return-type none)
  (parameter (type-and-name const-gchar* label_inactive))
  (parameter (type-and-name const-gchar* label_no_tip))
)



;; From /usr/include/gtk/gtktogglebutton.h

(function gtk_toggle_button_get_type
  (c-name gtk_toggle_button_get_type)
  (return-type GtkType)
)

(function gtk_toggle_button_new
  (c-name gtk_toggle_button_new)
  (is-constructor-of GtkToggleButton)
  (return-type GtkWidget*)
)

(function gtk_toggle_button_new_with_label
  (c-name gtk_toggle_button_new_with_label)
  (is-constructor-of GtkToggleButton)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method set_mode
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_set_mode)
  (return-type none)
  (parameter (type-and-name gboolean draw_indicator))
)

(method set_active
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_set_active)
  (return-type none)
  (parameter (type-and-name gboolean is_active))
)

(method get_active
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_get_active)
  (return-type gboolean)
)

(method toggled
  (of-object ToggleButton (Gtk))
  (c-name gtk_toggle_button_toggled)
  (return-type none)
)



;; From /usr/include/gtk/gtktoolbar.h

(function gtk_toolbar_get_type
  (c-name gtk_toolbar_get_type)
  (return-type GtkType)
)

(function gtk_toolbar_new
  (c-name gtk_toolbar_new)
  (is-constructor-of GtkToolbar)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkOrientation orientation))
  (parameter (type-and-name GtkToolbarStyle style))
)

(method append_item
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_append_item)
  (return-type GtkWidget*)
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method prepend_item
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_prepend_item)
  (return-type GtkWidget*)
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method insert_item
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_insert_item)
  (return-type GtkWidget*)
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
  (parameter (type-and-name gint position))
)

(method append_space
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_append_space)
  (return-type none)
)

(method prepend_space
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_prepend_space)
  (return-type none)
)

(method insert_space
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_insert_space)
  (return-type none)
  (parameter (type-and-name gint position))
)

(method append_element
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_append_element)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkToolbarChildType type))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method prepend_element
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_prepend_element)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkToolbarChildType type))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
)

(method insert_element
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_insert_element)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkToolbarChildType type))
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* text))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name GtkWidget* icon))
  (parameter (type-and-name GtkSignalFunc callback))
  (parameter (type-and-name gpointer user_data))
  (parameter (type-and-name gint position))
)

(method append_widget
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_append_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
)

(method prepend_widget
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_prepend_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
)

(method insert_widget
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_insert_widget)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-char* tooltip_text))
  (parameter (type-and-name const-char* tooltip_private_text))
  (parameter (type-and-name gint position))
)

(method set_orientation
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_set_orientation)
  (return-type none)
  (parameter (type-and-name GtkOrientation orientation))
)

(method set_style
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_set_style)
  (return-type none)
  (parameter (type-and-name GtkToolbarStyle style))
)

(method set_space_size
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_set_space_size)
  (return-type none)
  (parameter (type-and-name gint space_size))
)

(method set_space_style
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_set_space_style)
  (return-type none)
  (parameter (type-and-name GtkToolbarSpaceStyle space_style))
)

(method set_tooltips
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_set_tooltips)
  (return-type none)
  (parameter (type-and-name gint enable))
)

(method set_button_relief
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_set_button_relief)
  (return-type none)
  (parameter (type-and-name GtkReliefStyle relief))
)

(method get_button_relief
  (of-object Toolbar (Gtk))
  (c-name gtk_toolbar_get_button_relief)
  (return-type GtkReliefStyle)
)



;; From /usr/include/gtk/gtktooltips.h

(function gtk_tooltips_get_type
  (c-name gtk_tooltips_get_type)
  (return-type GtkType)
)

(function gtk_tooltips_new
  (c-name gtk_tooltips_new)
  (is-constructor-of GtkTooltips)
  (return-type GtkTooltips*)
)

(method enable
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_enable)
  (return-type none)
)

(method disable
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_disable)
  (return-type none)
)

(method set_delay
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_set_delay)
  (return-type none)
  (parameter (type-and-name guint delay))
)

(method set_tip
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_set_tip)
  (return-type none)
  (parameter (type-and-name GtkWidget* widget))
  (parameter (type-and-name const-gchar* tip_text))
  (parameter (type-and-name const-gchar* tip_private))
)

(method set_colors
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_set_colors)
  (return-type none)
  (parameter (type-and-name GdkColor* background))
  (parameter (type-and-name GdkColor* foreground))
)

(function gtk_tooltips_data_get
  (c-name gtk_tooltips_data_get)
  (return-type GtkTooltipsData*)
  (parameter (type-and-name GtkWidget* widget))
)

(method force_window
  (of-object Tooltips (Gtk))
  (c-name gtk_tooltips_force_window)
  (return-type none)
)



;; From /usr/include/gtk/gtktree.h

(function gtk_tree_get_type
  (c-name gtk_tree_get_type)
  (return-type GtkType)
)

(function gtk_tree_new
  (c-name gtk_tree_new)
  (is-constructor-of GtkTree)
  (return-type GtkWidget*)
)

(method append
  (of-object Tree (Gtk))
  (c-name gtk_tree_append)
  (return-type none)
  (parameter (type-and-name GtkWidget* tree_item))
)

(method prepend
  (of-object Tree (Gtk))
  (c-name gtk_tree_prepend)
  (return-type none)
  (parameter (type-and-name GtkWidget* tree_item))
)

(method insert
  (of-object Tree (Gtk))
  (c-name gtk_tree_insert)
  (return-type none)
  (parameter (type-and-name GtkWidget* tree_item))
  (parameter (type-and-name gint position))
)

(method remove_items
  (of-object Tree (Gtk))
  (c-name gtk_tree_remove_items)
  (return-type none)
  (parameter (type-and-name GList* items))
)

(method clear_items
  (of-object Tree (Gtk))
  (c-name gtk_tree_clear_items)
  (return-type none)
  (parameter (type-and-name gint start))
  (parameter (type-and-name gint end))
)

(method select_item
  (of-object Tree (Gtk))
  (c-name gtk_tree_select_item)
  (return-type none)
  (parameter (type-and-name gint item))
)

(method unselect_item
  (of-object Tree (Gtk))
  (c-name gtk_tree_unselect_item)
  (return-type none)
  (parameter (type-and-name gint item))
)

(method select_child
  (of-object Tree (Gtk))
  (c-name gtk_tree_select_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* tree_item))
)

(method unselect_child
  (of-object Tree (Gtk))
  (c-name gtk_tree_unselect_child)
  (return-type none)
  (parameter (type-and-name GtkWidget* tree_item))
)

(method child_position
  (of-object Tree (Gtk))
  (c-name gtk_tree_child_position)
  (return-type gint)
  (parameter (type-and-name GtkWidget* child))
)

(method set_selection_mode
  (of-object Tree (Gtk))
  (c-name gtk_tree_set_selection_mode)
  (return-type none)
  (parameter (type-and-name GtkSelectionMode mode))
)

(method set_view_mode
  (of-object Tree (Gtk))
  (c-name gtk_tree_set_view_mode)
  (return-type none)
  (parameter (type-and-name GtkTreeViewMode mode))
)

(method set_view_lines
  (of-object Tree (Gtk))
  (c-name gtk_tree_set_view_lines)
  (return-type none)
  (parameter (type-and-name guint flag))
)

(method remove_item
  (of-object Tree (Gtk))
  (c-name gtk_tree_remove_item)
  (return-type none)
  (parameter (type-and-name GtkWidget* child))
)



;; From /usr/include/gtk/gtktreeitem.h

(function gtk_tree_item_get_type
  (c-name gtk_tree_item_get_type)
  (return-type GtkType)
)

(function gtk_tree_item_new
  (c-name gtk_tree_item_new)
  (is-constructor-of GtkTreeItem)
  (return-type GtkWidget*)
)

(function gtk_tree_item_new_with_label
  (c-name gtk_tree_item_new_with_label)
  (is-constructor-of GtkTreeItem)
  (return-type GtkWidget*)
  (parameter (type-and-name const-gchar* label))
)

(method set_subtree
  (of-object TreeItem (Gtk))
  (c-name gtk_tree_item_set_subtree)
  (return-type none)
  (parameter (type-and-name GtkWidget* subtree))
)

(method remove_subtree
  (of-object TreeItem (Gtk))
  (c-name gtk_tree_item_remove_subtree)
  (return-type none)
)

(method select
  (of-object TreeItem (Gtk))
  (c-name gtk_tree_item_select)
  (return-type none)
)

(method deselect
  (of-object TreeItem (Gtk))
  (c-name gtk_tree_item_deselect)
  (return-type none)
)

(method expand
  (of-object TreeItem (Gtk))
  (c-name gtk_tree_item_expand)
  (return-type none)
)

(method collapse
  (of-object TreeItem (Gtk))
  (c-name gtk_tree_item_collapse)
  (return-type none)
)



;; From /usr/include/gtk/gtktypeutils.h

(method unique
  (of-object Type (Gtk))
  (c-name gtk_type_unique)
  (return-type GtkType)
  (parameter (type-and-name const-GtkTypeInfo* type_info))
)

(method set_chunk_alloc
  (of-object Type (Gtk))
  (c-name gtk_type_set_chunk_alloc)
  (return-type none)
  (parameter (type-and-name guint n_chunks))
)

(function gtk_type_name
  (c-name gtk_type_name)
  (return-type gchar*)
  (parameter (type-and-name guint type))
)

(function gtk_type_from_name
  (c-name gtk_type_from_name)
  (return-type GtkType)
  (parameter (type-and-name const-gchar* name))
)

(method parent
  (of-object Type (Gtk))
  (c-name gtk_type_parent)
  (return-type GtkType)
)

(method class
  (of-object Type (Gtk))
  (c-name gtk_type_class)
  (return-type gpointer)
)

(method parent_class
  (of-object Type (Gtk))
  (c-name gtk_type_parent_class)
  (return-type gpointer)
)

(method children_types
  (of-object Type (Gtk))
  (c-name gtk_type_children_types)
  (return-type GList*)
)

(method new
  (of-object Type (Gtk))
  (c-name gtk_type_new)
  (return-type gpointer)
)

(method free
  (of-object Type (Gtk))
  (c-name gtk_type_free)
  (return-type none)
  (parameter (type-and-name gpointer mem))
)

(method describe_heritage
  (of-object Type (Gtk))
  (c-name gtk_type_describe_heritage)
  (return-type none)
)

(method describe_tree
  (of-object Type (Gtk))
  (c-name gtk_type_describe_tree)
  (return-type none)
  (parameter (type-and-name gboolean show_size))
)

(method is_a
  (of-object Type (Gtk))
  (c-name gtk_type_is_a)
  (return-type gboolean)
  (parameter (type-and-name GtkType is_a_type))
)

(function gtk_type_check_object_cast
  (c-name gtk_type_check_object_cast)
  (return-type GtkTypeObject*)
  (parameter (type-and-name GtkTypeObject* type_object))
  (parameter (type-and-name GtkType cast_type))
)

(function gtk_type_check_class_cast
  (c-name gtk_type_check_class_cast)
  (return-type GtkTypeClass*)
  (parameter (type-and-name GtkTypeClass* klass))
  (parameter (type-and-name GtkType cast_type))
)

(function gtk_type_register_enum
  (c-name gtk_type_register_enum)
  (return-type GtkType)
  (parameter (type-and-name const-gchar* type_name))
  (parameter (type-and-name GtkEnumValue* values))
)

(function gtk_type_register_flags
  (c-name gtk_type_register_flags)
  (return-type GtkType)
  (parameter (type-and-name const-gchar* type_name))
  (parameter (type-and-name GtkFlagValue* values))
)

(method enum_get_values
  (of-object Type (Gtk))
  (c-name gtk_type_enum_get_values)
  (return-type GtkEnumValue*)
)

(method flags_get_values
  (of-object Type (Gtk))
  (c-name gtk_type_flags_get_values)
  (return-type GtkFlagValue*)
)

(method enum_find_value
  (of-object Type (Gtk))
  (c-name gtk_type_enum_find_value)
  (return-type GtkEnumValue*)
  (parameter (type-and-name const-gchar* value_name))
)

(method flags_find_value
  (of-object Type (Gtk))
  (c-name gtk_type_flags_find_value)
  (return-type GtkFlagValue*)
  (parameter (type-and-name const-gchar* value_name))
)

(method set_varargs_type
  (of-object Type (Gtk))
  (c-name gtk_type_set_varargs_type)
  (return-type none)
  (parameter (type-and-name GtkType varargs_type))
)

(method get_varargs_type
  (of-object Type (Gtk))
  (c-name gtk_type_get_varargs_type)
  (return-type GtkType)
)

(method query
  (of-object Type (Gtk))
  (c-name gtk_type_query)
  (return-type GtkTypeQuery*)
)



;; From /usr/include/gtk/gtkvbbox.h

(function gtk_vbutton_box_get_type
  (c-name gtk_vbutton_box_get_type)
  (return-type guint)
)

(function gtk_vbutton_box_new
  (c-name gtk_vbutton_box_new)
  (is-constructor-of GtkVButtonBox)
  (return-type GtkWidget*)
)

(function vbutton_box_get_spacing_default
  (c-name gtk_vbutton_box_get_spacing_default)
  (return-type gint)
)

(function vbutton_box_set_spacing_default
  (c-name gtk_vbutton_box_set_spacing_default)
  (return-type none)
  (parameter (type-and-name gint spacing))
)

(function vbutton_box_get_layout_default
  (c-name gtk_vbutton_box_get_layout_default)
  (return-type GtkButtonBoxStyle)
)

(function vbutton_box_set_layout_default
  (c-name gtk_vbutton_box_set_layout_default)
  (return-type none)
  (parameter (type-and-name GtkButtonBoxStyle layout))
)



;; From /usr/include/gtk/gtkvbox.h

(function gtk_vbox_get_type
  (c-name gtk_vbox_get_type)
  (return-type GtkType)
)

(function gtk_vbox_new
  (c-name gtk_vbox_new)
  (is-constructor-of GtkVBox)
  (return-type GtkWidget*)
  (parameter (type-and-name gboolean homogeneous) (default "FALSE"))
  (parameter (type-and-name gint spacing) (default "0"))
)



;; From /usr/include/gtk/gtkviewport.h

(function gtk_viewport_get_type
  (c-name gtk_viewport_get_type)
  (return-type GtkType)
)

(function gtk_viewport_new
  (c-name gtk_viewport_new)
  (is-constructor-of GtkViewport)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* hadjustment) (null-ok) (default "NULL"))
  (parameter (type-and-name GtkAdjustment* vadjustment) (null-ok) (default "NULL"))
)

(method get_hadjustment
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_get_hadjustment)
  (return-type GtkAdjustment*)
)

(method get_vadjustment
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_get_vadjustment)
  (return-type GtkAdjustment*)
)

(method set_hadjustment
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_set_hadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method set_vadjustment
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_set_vadjustment)
  (return-type none)
  (parameter (type-and-name GtkAdjustment* adjustment))
)

(method set_shadow_type
  (of-object Viewport (Gtk))
  (c-name gtk_viewport_set_shadow_type)
  (return-type none)
  (parameter (type-and-name GtkShadowType type))
)



;; From /usr/include/gtk/gtkvpaned.h

(function gtk_vpaned_get_type
  (c-name gtk_vpaned_get_type)
  (return-type guint)
)

(function gtk_vpaned_new
  (c-name gtk_vpaned_new)
  (is-constructor-of GtkVPaned)
  (return-type GtkWidget*)
)



;; From /usr/include/gtk/gtkvruler.h

(function gtk_vruler_get_type
  (c-name gtk_vruler_get_type)
  (return-type guint)
)

(function gtk_vruler_new
  (c-name gtk_vruler_new)
  (is-constructor-of GtkVRuler)
  (return-type GtkWidget*)
)



;; From /usr/include/gtk/gtkvscale.h

(function gtk_vscale_get_type
  (c-name gtk_vscale_get_type)
  (return-type GtkType)
)

(function gtk_vscale_new
  (c-name gtk_vscale_new)
  (is-constructor-of GtkVScale)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok) (default "NULL"))
)



;; From /usr/include/gtk/gtkvscrollbar.h

(function gtk_vscrollbar_new
  (c-name gtk_vscrollbar_new)
  (is-constructor-of GtkVScrollbar)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkAdjustment* adjustment) (null-ok) (default "NULL"))
)



;; From /usr/include/gtk/gtkvseparator.h

(function gtk_vseparator_get_type
  (c-name gtk_vseparator_get_type)
  (return-type GtkType)
)

(function gtk_vseparator_new
  (c-name gtk_vseparator_new)
  (is-constructor-of GtkVSeparator)
  (return-type GtkWidget*)
)



;; From /usr/include/gtk/gtkwidget.h

(function gtk_widget_get_type
  (c-name gtk_widget_get_type)
  (return-type GtkType)
)

(function gtk_widget_new
  (c-name gtk_widget_new)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkType type))
  (parameter (type-and-name const-gchar* first_arg_name))
  (varargs t)
)

(function gtk_widget_newv
  (c-name gtk_widget_newv)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkType type))
  (parameter (type-and-name guint nargs))
  (parameter (type-and-name GtkArg* args))
)

(method ref
  (of-object Widget (Gtk))
  (c-name gtk_widget_ref)
  (return-type none)
)

(method unref
  (of-object Widget (Gtk))
  (c-name gtk_widget_unref)
  (return-type none)
)

(method destroy
  (of-object Widget (Gtk))
  (c-name gtk_widget_destroy)
  (return-type none)
)

(method destroyed
  (of-object Widget (Gtk))
  (c-name gtk_widget_destroyed)
  (return-type none)
  (parameter (type-and-name GtkWidget** widget_pointer))
)

(method get
  (of-object Widget (Gtk))
  (c-name gtk_widget_get)
  (return-type none)
  (parameter (type-and-name GtkArg* arg))
)

(method getv
  (of-object Widget (Gtk))
  (c-name gtk_widget_getv)
  (return-type none)
  (parameter (type-and-name guint nargs))
  (parameter (type-and-name GtkArg* args))
)

(method set
  (of-object Widget (Gtk))
  (c-name gtk_widget_set)
  (return-type none)
  (parameter (type-and-name const-gchar* first_arg_name))
  (varargs t)
)

(method setv
  (of-object Widget (Gtk))
  (c-name gtk_widget_setv)
  (return-type none)
  (parameter (type-and-name guint nargs))
  (parameter (type-and-name GtkArg* args))
)

(method unparent
  (of-object Widget (Gtk))
  (c-name gtk_widget_unparent)
  (return-type none)
)

(method show
  (of-object Widget (Gtk))
  (c-name gtk_widget_show)
  (return-type none)
)

(method show_now
  (of-object Widget (Gtk))
  (c-name gtk_widget_show_now)
  (return-type none)
)

(method hide
  (of-object Widget (Gtk))
  (c-name gtk_widget_hide)
  (return-type none)
)

(method show_all
  (of-object Widget (Gtk))
  (c-name gtk_widget_show_all)
  (return-type none)
)

(method hide_all
  (of-object Widget (Gtk))
  (c-name gtk_widget_hide_all)
  (return-type none)
)

(method map
  (of-object Widget (Gtk))
  (c-name gtk_widget_map)
  (return-type none)
)

(method unmap
  (of-object Widget (Gtk))
  (c-name gtk_widget_unmap)
  (return-type none)
)

(method realize
  (of-object Widget (Gtk))
  (c-name gtk_widget_realize)
  (return-type none)
)

(method unrealize
  (of-object Widget (Gtk))
  (c-name gtk_widget_unrealize)
  (return-type none)
)

(method queue_draw
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_draw)
  (return-type none)
)

(method queue_draw_area
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_draw_area)
  (return-type none)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method queue_clear
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_clear)
  (return-type none)
)

(method queue_clear_area
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_clear_area)
  (return-type none)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method queue_resize
  (of-object Widget (Gtk))
  (c-name gtk_widget_queue_resize)
  (return-type none)
)

(method draw
  (of-object Widget (Gtk))
  (c-name gtk_widget_draw)
  (return-type none)
  (parameter (type-and-name GdkRectangle* area))
)

(method draw_focus
  (of-object Widget (Gtk))
  (c-name gtk_widget_draw_focus)
  (return-type none)
)

(method draw_default
  (of-object Widget (Gtk))
  (c-name gtk_widget_draw_default)
  (return-type none)
)

(method size_request
  (of-object Widget (Gtk))
  (c-name gtk_widget_size_request)
  (return-type none)
  (parameter (type-and-name GtkRequisition* requisition))
)

(method size_allocate
  (of-object Widget (Gtk))
  (c-name gtk_widget_size_allocate)
  (return-type none)
  (parameter (type-and-name GtkAllocation* allocation))
)

(method get_child_requisition
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_child_requisition)
  (return-type none)
  (parameter (type-and-name GtkRequisition* requisition))
)

(method add_accelerator
  (of-object Widget (Gtk))
  (c-name gtk_widget_add_accelerator)
  (return-type none)
  (parameter (type-and-name const-gchar* accel_signal))
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name guint accel_mods))
  (parameter (type-and-name GtkAccelFlags accel_flags))
)

(method remove_accelerator
  (of-object Widget (Gtk))
  (c-name gtk_widget_remove_accelerator)
  (return-type none)
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name guint accel_mods))
)

(method remove_accelerators
  (of-object Widget (Gtk))
  (c-name gtk_widget_remove_accelerators)
  (return-type none)
  (parameter (type-and-name const-gchar* accel_signal))
  (parameter (type-and-name gboolean visible_only))
)

(method accelerator_signal
  (of-object Widget (Gtk))
  (c-name gtk_widget_accelerator_signal)
  (return-type guint)
  (parameter (type-and-name GtkAccelGroup* accel_group))
  (parameter (type-and-name guint accel_key))
  (parameter (type-and-name guint accel_mods))
)

(method lock_accelerators
  (of-object Widget (Gtk))
  (c-name gtk_widget_lock_accelerators)
  (return-type none)
)

(method unlock_accelerators
  (of-object Widget (Gtk))
  (c-name gtk_widget_unlock_accelerators)
  (return-type none)
)

(method accelerators_locked
  (of-object Widget (Gtk))
  (c-name gtk_widget_accelerators_locked)
  (return-type gboolean)
)

(method event
  (of-object Widget (Gtk))
  (c-name gtk_widget_event)
  (return-type gint)
  (parameter (type-and-name GdkEvent* event))
)

(method activate
  (of-object Widget (Gtk))
  (c-name gtk_widget_activate)
  (return-type gboolean)
)

(method set_scroll_adjustments
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_scroll_adjustments)
  (return-type gboolean)
  (parameter (type-and-name GtkAdjustment* hadjustment))
  (parameter (type-and-name GtkAdjustment* vadjustment))
)

(method reparent
  (of-object Widget (Gtk))
  (c-name gtk_widget_reparent)
  (return-type none)
  (parameter (type-and-name GtkWidget* new_parent))
)

(method popup
  (of-object Widget (Gtk))
  (c-name gtk_widget_popup)
  (return-type none)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method intersect
  (of-object Widget (Gtk))
  (c-name gtk_widget_intersect)
  (return-type gint)
  (parameter (type-and-name GdkRectangle* area))
  (parameter (type-and-name GdkRectangle* intersection))
)

(method grab_focus
  (of-object Widget (Gtk))
  (c-name gtk_widget_grab_focus)
  (return-type none)
)

(method grab_default
  (of-object Widget (Gtk))
  (c-name gtk_widget_grab_default)
  (return-type none)
)

(method set_name
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
)

(method get_name
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_name)
  (return-type gchar*)
)

(method set_state
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_state)
  (return-type none)
  (parameter (type-and-name GtkStateType state))
)

(method set_sensitive
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_sensitive)
  (return-type none)
  (parameter (type-and-name gboolean sensitive))
)

(method set_app_paintable
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_app_paintable)
  (return-type none)
  (parameter (type-and-name gboolean app_paintable))
)

(method set_parent
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_parent)
  (return-type none)
  (parameter (type-and-name GtkWidget* parent))
)

(method set_parent_window
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_parent_window)
  (return-type none)
  (parameter (type-and-name GdkWindow* parent_window))
)

(method get_parent_window
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_parent_window)
  (return-type GdkWindow*)
)

(method set_uposition
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_uposition)
  (return-type none)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)

(method set_usize
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_usize)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method set_events
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_events)
  (return-type none)
  (parameter (type-and-name gint events))
)

(method add_events
  (of-object Widget (Gtk))
  (c-name gtk_widget_add_events)
  (return-type none)
  (parameter (type-and-name gint events))
)

(method set_extension_events
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_extension_events)
  (return-type none)
  (parameter (type-and-name GdkExtensionMode mode))
)

(method get_extension_events
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_extension_events)
  (return-type GdkExtensionMode)
)

(method get_toplevel
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_toplevel)
  (return-type GtkWidget*)
)

(method get_ancestor
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_ancestor)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkType widget_type))
)

(method get_colormap
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_colormap)
  (return-type GdkColormap*)
)

(method get_visual
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_visual)
  (return-type GdkVisual*)
)

(method set_colormap
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_colormap)
  (return-type none)
  (parameter (type-and-name GdkColormap* colormap))
)

(method set_visual
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_visual)
  (return-type none)
  (parameter (type-and-name GdkVisual* visual))
)

(method get_events
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_events)
  (return-type gint)
)

(method get_pointer
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_pointer)
  (return-type none)
  (parameter (type-and-name gint* x))
  (parameter (type-and-name gint* y))
)

(method is_ancestor
  (of-object Widget (Gtk))
  (c-name gtk_widget_is_ancestor)
  (return-type gint)
  (parameter (type-and-name GtkWidget* ancestor))
)

(method hide_on_delete
  (of-object Widget (Gtk))
  (c-name gtk_widget_hide_on_delete)
  (return-type gint)
)

(method set_style
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_style)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
)

(method set_rc_style
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_rc_style)
  (return-type none)
)

(method ensure_style
  (of-object Widget (Gtk))
  (c-name gtk_widget_ensure_style)
  (return-type none)
)

(method get_style
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_style)
  (return-type GtkStyle*)
)

(method restore_default_style
  (of-object Widget (Gtk))
  (c-name gtk_widget_restore_default_style)
  (return-type none)
)

(method modify_style
  (of-object Widget (Gtk))
  (c-name gtk_widget_modify_style)
  (return-type none)
  (parameter (type-and-name GtkRcStyle* style))
)

(method set_composite_name
  (of-object Widget (Gtk))
  (c-name gtk_widget_set_composite_name)
  (return-type none)
  (parameter (type-and-name const-gchar* name))
)

(method get_composite_name
  (of-object Widget (Gtk))
  (c-name gtk_widget_get_composite_name)
  (return-type gchar*)
)

(method reset_rc_styles
  (of-object Widget (Gtk))
  (c-name gtk_widget_reset_rc_styles)
  (return-type none)
)

(function widget_push_style
  (c-name gtk_widget_push_style)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
)

(function widget_push_colormap
  (c-name gtk_widget_push_colormap)
  (return-type none)
  (parameter (type-and-name GdkColormap* cmap))
)

(function widget_push_visual
  (c-name gtk_widget_push_visual)
  (return-type none)
  (parameter (type-and-name GdkVisual* visual))
)

(function widget_push_composite_child
  (c-name gtk_widget_push_composite_child)
  (return-type none)
)

(function widget_pop_composite_child
  (c-name gtk_widget_pop_composite_child)
  (return-type none)
)

(function widget_pop_style
  (c-name gtk_widget_pop_style)
  (return-type none)
)

(function widget_pop_colormap
  (c-name gtk_widget_pop_colormap)
  (return-type none)
)

(function widget_pop_visual
  (c-name gtk_widget_pop_visual)
  (return-type none)
)

(function widget_set_default_style
  (c-name gtk_widget_set_default_style)
  (return-type none)
  (parameter (type-and-name GtkStyle* style))
)

(function widget_set_default_colormap
  (c-name gtk_widget_set_default_colormap)
  (return-type none)
  (parameter (type-and-name GdkColormap* colormap))
)

(function widget_set_default_visual
  (c-name gtk_widget_set_default_visual)
  (return-type none)
  (parameter (type-and-name GdkVisual* visual))
)

(function widget_get_default_style
  (c-name gtk_widget_get_default_style)
  (return-type GtkStyle*)
)

(function widget_get_default_colormap
  (c-name gtk_widget_get_default_colormap)
  (return-type GdkColormap*)
)

(function widget_get_default_visual
  (c-name gtk_widget_get_default_visual)
  (return-type GdkVisual*)
)

(method shape_combine_mask
  (of-object Widget (Gtk))
  (c-name gtk_widget_shape_combine_mask)
  (return-type none)
  (parameter (type-and-name GdkBitmap* shape_mask))
  (parameter (type-and-name gint offset_x))
  (parameter (type-and-name gint offset_y))
)

(method reset_shapes
  (of-object Widget (Gtk))
  (c-name gtk_widget_reset_shapes)
  (return-type none)
)

(method path
  (of-object Widget (Gtk))
  (c-name gtk_widget_path)
  (return-type none)
  (parameter (type-and-name guint* path_length))
  (parameter (type-and-name gchar** path))
  (parameter (type-and-name gchar** path_reversed))
)

(method class_path
  (of-object Widget (Gtk))
  (c-name gtk_widget_class_path)
  (return-type none)
  (parameter (type-and-name guint* path_length))
  (parameter (type-and-name gchar** path))
  (parameter (type-and-name gchar** path_reversed))
)



;; From /usr/include/gtk/gtkwindow.h

(function gtk_window_get_type
  (c-name gtk_window_get_type)
  (return-type GtkType)
)

(function gtk_window_new
  (c-name gtk_window_new)
  (is-constructor-of GtkWindow)
  (return-type GtkWidget*)
  (parameter (type-and-name GtkWindowType type) (default "GTK_WINDOW_TOPLEVEL"))
)

(method set_title
  (of-object Window (Gtk))
  (c-name gtk_window_set_title)
  (return-type none)
  (parameter (type-and-name const-gchar* title))
)

(method set_wmclass
  (of-object Window (Gtk))
  (c-name gtk_window_set_wmclass)
  (return-type none)
  (parameter (type-and-name const-gchar* wmclass_name))
  (parameter (type-and-name const-gchar* wmclass_class))
)

(method set_policy
  (of-object Window (Gtk))
  (c-name gtk_window_set_policy)
  (return-type none)
  (parameter (type-and-name gint allow_shrink))
  (parameter (type-and-name gint allow_grow))
  (parameter (type-and-name gint auto_shrink))
)

(method add_accel_group
  (of-object Window (Gtk))
  (c-name gtk_window_add_accel_group)
  (return-type none)
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(method remove_accel_group
  (of-object Window (Gtk))
  (c-name gtk_window_remove_accel_group)
  (return-type none)
  (parameter (type-and-name GtkAccelGroup* accel_group))
)

(method set_position
  (of-object Window (Gtk))
  (c-name gtk_window_set_position)
  (return-type none)
  (parameter (type-and-name GtkWindowPosition position))
)

(method activate_focus
  (of-object Window (Gtk))
  (c-name gtk_window_activate_focus)
  (return-type gint)
)

(method activate_default
  (of-object Window (Gtk))
  (c-name gtk_window_activate_default)
  (return-type gint)
)

(method set_transient_for
  (of-object Window (Gtk))
  (c-name gtk_window_set_transient_for)
  (return-type none)
  (parameter (type-and-name GtkWindow* parent))
)

(method set_geometry_hints
  (of-object Window (Gtk))
  (c-name gtk_window_set_geometry_hints)
  (return-type none)
  (parameter (type-and-name GtkWidget* geometry_widget))
  (parameter (type-and-name GdkGeometry* geometry))
  (parameter (type-and-name GdkWindowHints geom_mask))
)

(method set_default_size
  (of-object Window (Gtk))
  (c-name gtk_window_set_default_size)
  (return-type none)
  (parameter (type-and-name gint width))
  (parameter (type-and-name gint height))
)

(method set_modal
  (of-object Window (Gtk))
  (c-name gtk_window_set_modal)
  (return-type none)
  (parameter (type-and-name gboolean modal))
)

(method set_focus
  (of-object Window (Gtk))
  (c-name gtk_window_set_focus)
  (return-type none)
  (parameter (type-and-name GtkWidget* focus))
)

(method set_default
  (of-object Window (Gtk))
  (c-name gtk_window_set_default)
  (return-type none)
  (parameter (type-and-name GtkWidget* defaultw))
)

(method remove_embedded_xid
  (of-object Window (Gtk))
  (c-name gtk_window_remove_embedded_xid)
  (return-type none)
  (parameter (type-and-name guint xid))
)

(method add_embedded_xid
  (of-object Window (Gtk))
  (c-name gtk_window_add_embedded_xid)
  (return-type none)
  (parameter (type-and-name guint xid))
)

(method reposition
  (of-object Window (Gtk))
  (c-name gtk_window_reposition)
  (return-type none)
  (parameter (type-and-name gint x))
  (parameter (type-and-name gint y))
)


