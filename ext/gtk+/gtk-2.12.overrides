%% include gtk-2.10.overrides

%% {{{ GtkIconView

%%
add-arginfo GtkIconView get_tooltip_context
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, x)
    ZEND_ARG_INFO(0, y)
    ZEND_ARG_INFO(0, keyboard_mode)
ZEND_END_ARG_INFO();

%%
override gtk_icon_view_get_tooltip_context
PHP_METHOD
{
	zval *php_model = NULL, *php_iter = NULL, *php_path = NULL;
	gint x, y;
	gboolean keyboard_mode;
    GtkTreeModel *model = NULL;
	GtkTreePath *path = NULL;
	GtkTreeIter iter = {0, };

    if(!php_gtk_parse_args(ZEND_NUM_ARGS(),"iii", &x, &y, &keyboard_mode)) {
        return;
    }

	if (!gtk_icon_view_get_tooltip_context (GTK_ICON_VIEW(PHPG_GOBJECT(this_ptr)),
		&x, &y, keyboard_mode, &model, &path, &iter))
	RETURN_FALSE;

	phpg_gobject_new(&php_model, (GObject *) model TSRMLS_CC);
	phpg_gboxed_new(&php_iter, GTK_TYPE_TREE_ITER, &iter, TRUE, TRUE TSRMLS_CC);
	phpg_tree_path_to_zval(path, &php_path TSRMLS_CC);
	php_gtk_build_value(&return_value, "(NNN)", php_model, php_path, php_iter);
}
%% }}}

%% {{{ GtkTreeView

%%
add-arginfo GtkTreeView get_tooltip_context
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, x)
    ZEND_ARG_INFO(0, y)
    ZEND_ARG_INFO(0, keyboard_mode)
ZEND_END_ARG_INFO();

%%
override gtk_tree_view_get_tooltip_context
PHP_METHOD
{
	zval *php_model = NULL, *php_iter = NULL, *php_path = NULL;
	gint x, y;
	gboolean keyboard_mode;
    GtkTreeModel *model = NULL;
	GtkTreePath *path = NULL;
	GtkTreeIter iter = {0, };

    if(!php_gtk_parse_args(ZEND_NUM_ARGS(),"iii", &x, &y, &keyboard_mode)) {
        return;
    }

	if (!gtk_tree_view_get_tooltip_context (GTK_TREE_VIEW(PHPG_GOBJECT(this_ptr)),
		&x, &y, keyboard_mode, &model, &path, &iter))
    RETURN_FALSE;

	phpg_gobject_new(&php_model, (GObject *) model TSRMLS_CC);
	phpg_gboxed_new(&php_iter, GTK_TYPE_TREE_ITER, &iter, TRUE, TRUE TSRMLS_CC);
	phpg_tree_path_to_zval(path, &php_path TSRMLS_CC);
	php_gtk_build_value(&return_value, "(NNN)", php_model, php_path, php_iter);
}
%% }}}

%% {{{ GtkScaleButton

%%
headers
static void phpg_scale_button_set_icons_assist(GtkScaleButton *, zval * TSRMLS_DC);

%%
add-arginfo GtkScaleButton __construct
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, iconsize)
    ZEND_ARG_INFO(0, min)
    ZEND_ARG_INFO(0, max)
    ZEND_ARG_INFO(0, step)
    ZEND_ARG_INFO(0, iconlist)
ZEND_END_ARG_INFO();

%%
override gtk_scale_button_new
PHP_METHOD
{
    gint iconsize;
    gdouble min, max, step;
    GObject *obj;
    zval *iconlist = NULL;
    
    GtkAdjustment *adj;

    if(!php_gtk_parse_args(ZEND_NUM_ARGS(),"iddd|a",&iconsize,&min,&max,&step,&iconlist)) {
        return;
    }

    obj = (GObject *)g_object_newv(phpg_gtype_from_zval(this_ptr),0,NULL);
        if(!obj) { PHPG_THROW_CONSTRUCT_EXCEPTION(GtkScaleButton); }
        adj = (GtkAdjustment *)gtk_adjustment_new(min,min,max,step,step,0);
        gtk_scale_button_set_adjustment(GTK_SCALE_BUTTON(obj),GTK_ADJUSTMENT(adj));
       
    if(iconlist) {
        phpg_scale_button_set_icons_assist(
            GTK_SCALE_BUTTON(obj),
            iconlist TSRMLS_CC
        );
    }

    phpg_gobject_set_wrapper(
        this_ptr,
        G_OBJECT(obj) TSRMLS_CC
    );
}

%%
override gtk_scale_button_set_icons
static void
phpg_scale_button_set_icons_assist(GtkScaleButton *button, zval *iconlist TSRMLS_DC)
{
	zval **iconname;
	int listlen,iter;
	gchar **list = NULL;

	if(iconlist)
		listlen = zend_hash_num_elements(Z_ARRVAL_P(iconlist));
	else
		listlen = 0;

	if(listlen > 0) {
		list = g_malloc0(sizeof(gchar *) * (listlen + 2));
		/* space for not overwriting the head pointer and leaving a null on
		 the tail end. */
		
		iter = 1;

		/* indexing the array string pointers into a pointer array for the
		   set_icons function. */
		zend_hash_internal_pointer_reset(Z_ARRVAL_P(iconlist));
		while(zend_hash_get_current_data(Z_ARRVAL_P(iconlist),(void **)&iconname) == SUCCESS) {
			if(Z_TYPE_PP(iconname) == IS_STRING) {
				list[iter++] = (gchar *)Z_ARRVAL_PP(iconname);
			} else {
				php_error_docref(
					NULL TSRMLS_CC,
					E_WARNING,
					"each item in icon array is to be a string"
				);
			}
			
			zend_hash_move_forward(Z_ARRVAL_P(iconlist));
		} list[iter] = NULL;
	}
	
	else {
		list = NULL;
	}

	gtk_scale_button_set_icons(
		GTK_SCALE_BUTTON(button),
		(const gchar **)(list+1)
	);

	if(list) {
		g_strfreev(list);
	}
}

PHP_METHOD
{
    zval *iconlist = NULL;

    if(!php_gtk_parse_args(ZEND_NUM_ARGS(),"a",&iconlist)) {
        return;
    }

    phpg_scale_button_set_icons_assist(
        GTK_SCALE_BUTTON(PHPG_GOBJECT(this_ptr)),
        iconlist TSRMLS_CC
    );
}

%% }}}

%%
deprecate gtk_tooltips_enable
since GTK+ 2.12, please use new GtkTooltip API

%%
deprecate gtk_tooltips_disable
since GTK+ 2.12, please use new GtkTooltip API

%%
deprecate gtk_tooltips_forcewindow
since GTK+ 2.12, please use new GtkTooltip API

%%
deprecate gtk_tooltips_get_info_from_tip_window
since GTK+ 2.12, please use new GtkTooltip API

%%
deprecate gtk_tooltips_new
since GTK+ 2.12, please use new GtkTooltip API

%%
deprecate gtk_tooltips_set_delay
since GTK+ 2.12, please use new GtkTooltip API

%%
deprecate gtk_tooltips_set_tip
since GTK+ 2.12, please use new GtkTooltip API

%%
deprecate gtk_about_dialog_get_name
since GTK+ 2.12, please use GtkAboutDialog::get_program_name()

%%
deprecate gtk_about_dialog_set_name
since GTK+ 2.12, please use GtkAboutDialog::set_program_name()

%%
deprecate gtk_notebook_set_group_id
since GTK+ 2.12, please use GtkNotebook::set_group()

%%
deprecate gtk_notebook_get_group_id
since GTK+ 2.12, please use GtkNotebook::get_group()

%%
deprecate gtk_menu_tool_button_set_arrow_tooltip
since GTK+ 2.12, please use GtkMenuToolButton::set_arrow_tooltip_text()

%%
deprecate gtk_tool_item_set_tooltip
since GTK+ 2.12, please use GtkToolItem::set_tooltip_text()

%%
deprecate gtk_menu_item_remove_submenu
since GTK+ 2.12, please use GtkMenuItem::set_submenu(null);

%%
deprecate gtk_tree_view_tree_to_widget_coords
since GTK+ 2.12, please use GtkTreeView::convert_bin_window_to_widget_coords()

%%
deprecate gtk_tree_view_widget_to_tree_coords
since GTK+ 2.12, please use GtkTreeView::convert_widget_to_bin_window_coords()

