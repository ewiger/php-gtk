/* vim: set et ft=cpp fdm=marker: */
%%
headers
#include "gen_atk.h"
#include "gen_gdk.h"
#include "gen_pango.h"
#include "ext/standard/file.h"

/* TODO
 * implement gtk_adjustment_set_all
 */
%% {{{ ignores [confirmed]

%%
ignore-glob
    *_ref
    *_unref
    *_get_type
    gtk_arg_*
    gtk_args_*
    gtk_check_button_new_*
    gtk_init_add_*
    gtk_marshal_*
    gtk_quit_add_*
    gtk_radio_button_new_*
    gtk_radio_tool_button_new_*
    gtk_signal_*
    gtk_timeout_add_*
    gtk_toggle_button_new_*
%%
ignore-win32-glob
    gtk_plug_*
    gtk_socket_*
%%
ignore
    gtk_button_new_with_label
    gtk_button_new_with_mnemonic
    gtk_color_button_new
    gtk_dialog_new
    gtk_exit
    gtk_false
    gtk_icon_view_new_with_model
    gtk_image_menu_item_new_from_stock
    gtk_image_menu_item_new_with_label
    gtk_image_menu_item_new_with_mnemonic
    gtk_init
    gtk_init_check
    gtk_menu_item_new_with_label
    gtk_menu_item_new_with_mnemonic
    gtk_radio_menu_item_new_with_label
    gtk_radio_menu_item_new_with_mnemonic
    gtk_true
%%
ignore-win32
    GtkPlug
    GtkSocket
%% }}}
    
%% {{{ ignores [tbd]
%%
ignore-glob
    gtk_idle_add_*
    gtk_target_list_*
%%
ignore
    gtk_accel_group_activate
    gtk_accel_group_add
    gtk_accel_group_attach
    gtk_accel_group_create_add
    gtk_accel_group_create_remove
    gtk_accel_group_detach
    gtk_accel_group_entries_from_object
    gtk_accel_group_get_entry
    gtk_accel_group_handle_add
    gtk_accel_group_handle_remove
    gtk_accel_group_lock
    gtk_accel_group_lock_entry
    gtk_accel_group_new
    gtk_accel_group_ref
    gtk_accel_group_remove
    gtk_accel_groups_activate
    gtk_accel_groups_from_object
    gtk_accel_group_unlock
    gtk_accel_group_unlock_entry
    gtk_accel_group_unref
    gtk_adjustment_set_all
    gtk_clist_construct
    gtk_clist_set_row_data_full
    gtk_draw_box_gap
    gtk_draw_check
    gtk_draw_cross
    gtk_draw_extension
    gtk_draw_flat_box
    gtk_draw_focus
    gtk_draw_handle
    gtk_draw_option
    gtk_draw_ramp
    gtk_draw_shadow_gap
    gtk_draw_slider
    gtk_draw_tab
    gtk_file_chooser_dialog_new
    gtk_idle_remove_by_data
    gtk_item_factory_create_item
    gtk_item_factory_create_items_ac
    gtk_item_factory_create_menu_entries
    gtk_item_factory_delete_entries
    gtk_item_factory_delete_entry
    gtk_item_factory_popup_data
    gtk_item_factory_popup_with_data
    gtk_item_factory_set_translate_func
    gtk_key_snooper_install
    gtk_key_snooper_remove
    gtk_label_new_with_mnemonic
    gtk_menu_attach_to_widget
    gtk_message_dialog_new_with_markup
    gtk_object_add_arg_type
    gtk_object_arg_get
    gtk_object_arg_get_info
    gtk_object_args_collect
    gtk_object_arg_set
    gtk_object_get
    gtk_object_get_data_by_id
    gtk_object_get_user_data
    gtk_object_getv
    gtk_object_new
    gtk_object_newv
    gtk_object_query_args
    gtk_object_remove_data_by_id
    gtk_object_remove_no_notify_by_id
    gtk_object_set
    gtk_object_set_data_by_id
    gtk_object_set_data_by_id_full
    gtk_object_set_data_full
    gtk_object_set_user_data
    gtk_object_setv
    gtk_object_weakref
    gtk_object_weakunref
    gtk_preview_uninit
    gtk_progress_bar_new
    gtk_progress_bar_update
    gtk_propagate_event
    gtk_quit_remove_by_data
    gtk_range_default_htrough_click
    gtk_range_default_vtrough_click
    gtk_range_trough_click
    gtk_set_locale
    gtk_signal_add_emission_hook_full
    gtk_signal_disconnect_by_data
    gtk_signal_disconnect_by_func
    gtk_signal_emit
    gtk_signal_emit_by_name
    gtk_signal_emitv
    gtk_signal_emitv_by_name
    gtk_signal_handler_block_by_data
    gtk_signal_handler_block_by_func
    gtk_signal_handler_pending_by_func
    gtk_signal_handler_unblock_by_data
    gtk_signal_handler_unblock_by_func
    gtk_signal_n_emissions
    gtk_signal_n_emissions_by_name
    gtk_signal_query
    gtk_signal_set_funcs
    gtk_text_view_new_with_buffer
    gtk_tooltips_data_get
    gtk_trace_referencing
    gtk_type_check_class_cast
    gtk_type_check_object_cast
    gtk_type_register_enum
    gtk_type_register_flags
    gtk_widget_get
    gtk_widget_getv
    gtk_widget_new
    gtk_widget_newv
    gtk_widget_reset_shapes
    gtk_widget_set
    gtk_widget_setv
    gtk_window_add_embedded_xid
    gtk_window_remove_embedded_xid
    gtk_window_reposition
%%
ignore
    GtkArgFlags
    GtkPrivateFlags
%% }}}

%% {{{ constants
%%
constants
    /* register non-enum constants */

    phpg_register_int_constant(gtk_ce, "PRIORITY_HIGH", sizeof("PRIORITY_HIGH")-1, G_PRIORITY_HIGH);
    phpg_register_int_constant(gtk_ce, "PRIORITY_DEFAULT", sizeof("PRIORITY_HIGH")-1, G_PRIORITY_HIGH);
    phpg_register_int_constant(gtk_ce, "PRIORITY_HIGH_IDLE", sizeof("PRIORITY_HIGH_IDLE")-1, G_PRIORITY_HIGH_IDLE);
    phpg_register_int_constant(gtk_ce, "PRIORITY_DEFAULT_IDLE", sizeof("PRIORITY_DEFAULT_IDLE")-1, G_PRIORITY_DEFAULT_IDLE);
    phpg_register_int_constant(gtk_ce, "PRIORITY_LOW", sizeof("PRIORITY_LOW")-1, G_PRIORITY_LOW);

    /* Fundamental GTypes */
    phpg_register_int_constant(gtk_ce, "TYPE_INVALID", sizeof("TYPE_INVALID")-1, G_TYPE_INVALID);
    phpg_register_int_constant(gtk_ce, "TYPE_NONE", sizeof("TYPE_NONE")-1, G_TYPE_NONE);
    phpg_register_int_constant(gtk_ce, "TYPE_INTERFACE", sizeof("TYPE_INTERFACE")-1, G_TYPE_INTERFACE);
    phpg_register_int_constant(gtk_ce, "TYPE_CHAR", sizeof("TYPE_CHAR")-1, G_TYPE_CHAR);
    phpg_register_int_constant(gtk_ce, "TYPE_BOOLEAN", sizeof("TYPE_BOOLEAN")-1, G_TYPE_BOOLEAN);
    phpg_register_int_constant(gtk_ce, "TYPE_LONG", sizeof("TYPE_LONG")-1, G_TYPE_LONG);
    phpg_register_int_constant(gtk_ce, "TYPE_ENUM", sizeof("TYPE_ENUM")-1, G_TYPE_ENUM);
    phpg_register_int_constant(gtk_ce, "TYPE_FLAGS", sizeof("TYPE_FLAGS")-1, G_TYPE_FLAGS);
    phpg_register_int_constant(gtk_ce, "TYPE_DOUBLE", sizeof("TYPE_DOUBLE")-1, G_TYPE_DOUBLE);
    phpg_register_int_constant(gtk_ce, "TYPE_STRING", sizeof("TYPE_STRING")-1, G_TYPE_STRING);
    phpg_register_int_constant(gtk_ce, "TYPE_POINTER", sizeof("TYPE_POINTER")-1, G_TYPE_POINTER);
    phpg_register_int_constant(gtk_ce, "TYPE_BOXED", sizeof("TYPE_BOXED")-1, G_TYPE_BOXED);
    phpg_register_int_constant(gtk_ce, "TYPE_PARAM", sizeof("TYPE_PARAM")-1, G_TYPE_PARAM);
    phpg_register_int_constant(gtk_ce, "TYPE_OBJECT", sizeof("TYPE_OBJECT")-1, G_TYPE_OBJECT);
    phpg_register_int_constant(gtk_ce, "TYPE_PHP_VALUE", sizeof("TYPE_PHP_VALUE")-1, G_TYPE_PHP_VALUE);
%% }}}

%% {{{ main loop

%%
add-arginfo Gtk timeout_add
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, interval)
    ZEND_ARG_INFO(0, callback)
ZEND_END_ARG_INFO();

%%
override gtk_timeout_add

static void phpg_gtk_timeout_add_impl(INTERNAL_FUNCTION_PARAMETERS, zend_bool with_priority)
{
    guint interval;
    gint priority = G_PRIORITY_DEFAULT;
    zval *callback = NULL;
    zval *extra;
    zval *data = NULL;
    char *callback_filename;
    uint callback_lineno;
    guint handler_id;
    int req_args = with_priority ? 3 : 2;

    if (ZEND_NUM_ARGS() < req_args) {
        php_error(E_WARNING, "%s::%s() requires at least %d arguments, %d given",
                  get_active_class_name(NULL TSRMLS_CC),
                  get_active_function_name(TSRMLS_C), req_args, ZEND_NUM_ARGS());
        return;
    }

    if (with_priority) {
        if (!php_gtk_parse_args(req_args, "iiV", &interval, &priority, &callback))
            return;
    } else {
        if (!php_gtk_parse_args(req_args, "iV", &interval, &callback))
            return;
    }

    callback_filename = zend_get_executed_filename(TSRMLS_C);
    callback_lineno = zend_get_executed_lineno(TSRMLS_C);
    extra = php_gtk_func_args_as_hash(ZEND_NUM_ARGS(), req_args, ZEND_NUM_ARGS());
    if (!extra) {
        MAKE_STD_ZVAL(extra);
        array_init(extra);
    }
    php_gtk_build_value(&data, "(VNsi)", callback, extra, callback_filename, callback_lineno);

    handler_id = g_timeout_add_full(priority, interval, phpg_handler_marshal, data, phpg_destroy_notify);
    RETURN_LONG(handler_id);
}

PHP_METHOD
{
    phpg_gtk_timeout_add_impl(INTERNAL_FUNCTION_PARAM_PASSTHRU, 0);
}

%%
add-arginfo Gtk timeout_add_priority
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, interval)
    ZEND_ARG_INFO(0, priority)
    ZEND_ARG_INFO(0, callback)
ZEND_END_ARG_INFO();

%%
add Gtk timeout_add_priority
PHP_METHOD
{
    phpg_gtk_timeout_add_impl(INTERNAL_FUNCTION_PARAM_PASSTHRU, 1);
}

%%
add Gtk get_version
PHP_METHOD
{
    guint major;
    guint minor;
    guint micro;
    char version[256];

    major = GTK_MAJOR_VERSION;
    minor = GTK_MINOR_VERSION;
    micro = GTK_MICRO_VERSION;

    snprintf(version, sizeof(version), "GTK %d.%d.%d", major, minor, micro);

    RETURN_STRING(version, 1);
}

%%
add-arginfo Gtk quit_add
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, main_level)
    ZEND_ARG_INFO(0, callback)
ZEND_END_ARG_INFO();

%%
override gtk_quit_add

PHP_METHOD
{
    guint main_level;
    zval *callback = NULL;
    zval *extra;
    zval *data = NULL;
    char *callback_filename;
    uint callback_lineno;
    guint handler_id;

    if (ZEND_NUM_ARGS() < 2) {
        php_error(E_WARNING, "%s::%s() requires at least 2 arguments, %d given",
                  get_active_class_name(NULL TSRMLS_CC),
                  get_active_function_name(TSRMLS_C), ZEND_NUM_ARGS());
        return;
    }

    if (!php_gtk_parse_args(2, "iV", &main_level, &callback))
        return;

    callback_filename = zend_get_executed_filename(TSRMLS_C);
    callback_lineno = zend_get_executed_lineno(TSRMLS_C);
    extra = php_gtk_func_args_as_hash(ZEND_NUM_ARGS(), 2, ZEND_NUM_ARGS());
    if (!extra) {
        MAKE_STD_ZVAL(extra);
        array_init(extra);
    }
    php_gtk_build_value(&data, "(VNsi)", callback, extra, callback_filename, callback_lineno);

    handler_id = gtk_quit_add_full(main_level, phpg_handler_marshal, NULL, data, phpg_destroy_notify);
    RETURN_LONG(handler_id);
}

%% }}}

%% {{{ functions

%%
override gtk_icon_size_lookup
PHP_METHOD
{
    gint width, height;
    zval *php_size = NULL;
    GtkIconSize size;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "V", &php_size))
        return;

    if (php_size && phpg_gvalue_get_enum(GTK_TYPE_ICON_SIZE, php_size, (gint *)&size) == FAILURE) {
        return;
    }

    gtk_icon_size_lookup(size, &width, &height);

    php_gtk_build_value(&return_value, "(ii)", width, height);
}

%%
override gtk_stock_list_ids
PHP_METHOD
{
    GSList *ids;

    array_init(return_value);
    for (ids = gtk_stock_list_ids(); ids; ids = ids->next) {
        add_next_index_string(return_value, (char *) ids->data, 1);
        g_free(ids->data);
    }
    g_slist_free(ids);
}

%%
add-arginfo Gtk stock_lookup
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, stock_id)
ZEND_END_ARG_INFO();

%%
override gtk_stock_lookup
PHP_METHOD
{
    char *stock_id;
    GtkStockItem item;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "s", &stock_id))
        return;

    if (gtk_stock_lookup(stock_id, &item)) {
        php_gtk_build_value(&return_value, "(ssiis)", item.stock_id, item.label,
                            item.modifier, item.keyval, item.translation_domain);
    } else {
        return;
    }
}
%% }}}

%% {{{ GtkAdjustment

%%
override gtk_adjustment_new
PHP_METHOD
{
    gdouble value = 0;
    gdouble lower = 0;
    gdouble upper = 0;
    gdouble step_incr = 0;
    gdouble page_incr = 0;
    gdouble page_size = 0;
    GObject *wrapped_obj;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|dddddd", &value, &lower, &upper,
                            &step_incr, &page_incr, &page_size))
        return;

    wrapped_obj = g_object_new(phpg_gtype_from_zval(this_ptr),
                               "value", value, "lower", lower,
                               "upper", upper, "step_increment", step_incr,
                               "page_increment", page_incr, "page_size", page_size, NULL);

    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkAdjustment);
    }

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}

%% }}}

%% {{{ GtkButton

%%
add-arginfo GtkButton __construct
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, text)
    ZEND_ARG_INFO(0, use_underline)
ZEND_END_ARG_INFO();

%%
override gtk_button_new
PHP_METHOD
{
    GObject *wrapped_obj;
    gchar *text = NULL;
    zend_bool use_underline = 1;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|sb", &text, &use_underline)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkButton);
    }

    if (text) {
        wrapped_obj = (GObject *)g_object_new(phpg_gtype_from_zval(this_ptr), "label",
                                              text, "use-underline", use_underline, NULL);
    } else {
        wrapped_obj = (GObject *)g_object_new(phpg_gtype_from_zval(this_ptr), NULL);
    }

    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkButton);
    }

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}

%%
add-arginfo GtkButton new_from_stock
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, stock_id)
ZEND_END_ARG_INFO();

%%
override gtk_button_new_from_stock new_from_stock ZEND_ACC_PUBLIC|ZEND_ACC_STATIC
PHP_METHOD
{
    GObject *wrapped_obj;
    gchar *stock_id = NULL;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "s", &stock_id)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkButton);
    }

    wrapped_obj = (GObject *)g_object_new(phpg_gtype_from_class(EG(scope)), "label", stock_id,
                                          "use-stock", TRUE, "use-underline", TRUE, NULL);

    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkButton);
    }

    phpg_gobject_new(&return_value, wrapped_obj TSRMLS_CC);
    g_object_unref(wrapped_obj); /* phpg_gobject_new() increments reference count */
}
%% }}}

%% {{{ GtkCheckButton
%%
add-arginfo GtkCheckButton __construct
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, text)
    ZEND_ARG_INFO(0, use_underline)
ZEND_END_ARG_INFO();

%%
override gtk_check_button_new
PHP_METHOD
{
    GObject *wrapped_obj;
    gchar *text = NULL;
    zend_bool use_underline = 1;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|sb", &text, &use_underline)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkCheckButton);
    }

    if (text) {
        wrapped_obj = (GObject *)g_object_new(phpg_gtype_from_zval(this_ptr), "label",
                                              text, "use-underline", use_underline, NULL);
    } else {
        wrapped_obj = (GObject *)g_object_new(phpg_gtype_from_zval(this_ptr), NULL);
    }

    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkCheckButton);
    }

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}
%% }}}

%% {{{ GtkCheckMenuItem
%%
add-arginfo GtkCheckMenuItem __construct
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, text)
    ZEND_ARG_INFO(0, use_underline)
ZEND_END_ARG_INFO();

%%
override gtk_check_menu_item_new
PHP_METHOD
{
    GObject *wrapped_obj;
    gchar *text = NULL;
    zend_bool use_underline = 1;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|sb", &text, &use_underline)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkMenuItem);
    }

    wrapped_obj = (GObject *)g_object_new(phpg_gtype_from_zval(this_ptr), NULL);
    if (text) {
        GtkWidget *accel_label;
        accel_label = g_object_new(GTK_TYPE_ACCEL_LABEL, NULL);
        gtk_misc_set_alignment(GTK_MISC(accel_label), 0.0, 0.5);
        gtk_container_add(GTK_CONTAINER(wrapped_obj), accel_label);
        if (use_underline)
            gtk_label_set_text_with_mnemonic(GTK_LABEL(accel_label), text);
        else
            gtk_label_set_text(GTK_LABEL(accel_label), text);
        gtk_accel_label_set_accel_widget(GTK_ACCEL_LABEL(accel_label), GTK_WIDGET(wrapped_obj));
        gtk_widget_show(accel_label);
    }

    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkMenuItem);
    }

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}
%% }}}

%% {{{ GtkColorSelection
%%
override gtk_color_selection_get_current_color
PHP_METHOD
{

    GdkColor color = { 0 , 0 , 0 , 0 };

    if (ZEND_NUM_ARGS() > 0) {
        php_error(E_WARNING, "%s::%s() requires 0 arguments, %d given",
                  get_active_class_name(NULL TSRMLS_CC),
                  get_active_function_name(TSRMLS_C), ZEND_NUM_ARGS());
        return;
    }

    gtk_color_selection_get_current_color(GTK_COLOR_SELECTION(PHPG_GOBJECT(this_ptr)), &color);
    phpg_gboxed_new(&return_value, GDK_TYPE_COLOR, &color, TRUE, TRUE TSRMLS_CC);

}

%%
override gtk_color_selection_get_previous_color
PHP_METHOD
{

    GdkColor color = { 0 , 0 , 0 , 0 };

    if (ZEND_NUM_ARGS() > 0) {
        php_error(E_WARNING, "%s::%s() requires 0 arguments, %d given",
                  get_active_class_name(NULL TSRMLS_CC),
                  get_active_function_name(TSRMLS_C), ZEND_NUM_ARGS());
        return;
    }

    gtk_color_selection_get_previous_color(GTK_COLOR_SELECTION(PHPG_GOBJECT(this_ptr)), &color);
    phpg_gboxed_new(&return_value, GDK_TYPE_COLOR, &color, TRUE, TRUE TSRMLS_CC);

}
%% }}}

%% include gtkcontainer.overrides

%% {{{ GtkDialog
%%
override gtk_dialog_new_with_buttons
PHP_METHOD
{
    char *title = NULL;
    GtkWindow *parent = NULL;
    zval *php_parent = NULL, *php_flags = NULL;
    zval *buttons = NULL;
    GtkDialogFlags flags = 0;
    GObject *wrapped_obj;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|sNVa", &title, &php_parent, gtkwindow_ce, &php_flags, &buttons)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkDialog);
    }
    if (php_parent) {
        if (Z_TYPE_P(php_parent) == IS_NULL)
            parent = NULL;
        else
            parent = GTK_WINDOW(PHPG_GOBJECT(php_parent));
    }

    if (php_flags && phpg_gvalue_get_flags(GTK_TYPE_DIALOG_FLAGS, php_flags, (gint *)&flags) == FAILURE) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkDialog);
    }

    wrapped_obj = (GObject *)g_object_new(phpg_gtype_from_zval(this_ptr), NULL);
    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkDialog);
    }

    if (title) {
        gtk_window_set_title(GTK_WINDOW(wrapped_obj), title);
    }
    if (parent) {
        gtk_window_set_transient_for(GTK_WINDOW(wrapped_obj), parent);
    }
    if (flags & GTK_DIALOG_MODAL) {
        gtk_window_set_modal(GTK_WINDOW(wrapped_obj), TRUE);
    }
    if (flags & GTK_DIALOG_DESTROY_WITH_PARENT) {
        gtk_window_set_destroy_with_parent (GTK_WINDOW(wrapped_obj), TRUE);
    }
    if (flags & GTK_DIALOG_NO_SEPARATOR) {
        gtk_dialog_set_has_separator (GTK_DIALOG(wrapped_obj), FALSE);
    }

    if (buttons) {
        zval **text, **response;

        if (zend_hash_num_elements(Z_ARRVAL_P(buttons)) % 2) {
            php_error(E_WARNING, "%s::%s(): button list has to contain pairs of items",
                      get_active_class_name(NULL TSRMLS_CC), get_active_function_name(TSRMLS_C));
            gtk_object_destroy(GTK_OBJECT(wrapped_obj));
            PHPG_THROW_CONSTRUCT_EXCEPTION(GtkDialog);
        }

        zend_hash_internal_pointer_reset(Z_ARRVAL_P(buttons));
        while (zend_hash_get_current_data(Z_ARRVAL_P(buttons), (void **)&text) == SUCCESS) {
            zend_hash_move_forward(Z_ARRVAL_P(buttons));
            zend_hash_get_current_data(Z_ARRVAL_P(buttons), (void **)&response); /* safe */
            zend_hash_move_forward(Z_ARRVAL_P(buttons));

            if (Z_TYPE_PP(text) != IS_STRING || Z_TYPE_PP(response) != IS_LONG) {
                php_error(E_WARNING, "%s::%s(): each pair in button list has to be string/number",
                          get_active_class_name(NULL TSRMLS_CC), get_active_function_name(TSRMLS_C));
                gtk_object_destroy(GTK_OBJECT(wrapped_obj));
                PHPG_THROW_CONSTRUCT_EXCEPTION(GtkDialog);
            }

            gtk_dialog_add_button(GTK_DIALOG(wrapped_obj), Z_STRVAL_PP(text), Z_LVAL_PP(response));
        }
    }

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}
%% }}}

%% {{{ GtkIconSet
%%
override gtk_icon_set_get_sizes
PHP_METHOD
{
    GtkIconSize *sizes;
    gint n_sizes, i;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    gtk_icon_set_get_sizes((GtkIconSet *)PHPG_GBOXED(this_ptr), &sizes, &n_sizes);
    array_init(return_value);

    for (i = 0; i < n_sizes; i++) {
        add_next_index_long(return_value, sizes[i]);
    }

    g_free(sizes);
}
%% }}}

%% {{{ GtkImageMenuItem
%%
add-arginfo GtkImageMenuItem __construct
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, stock_id)
    ZEND_ARG_INFO(0, accel_group)
ZEND_END_ARG_INFO();

%%
override gtk_image_menu_item_new
PHP_METHOD
{
	char *stock_id = NULL;
	zend_bool free_stock_id;
	zval *php_accel_group = NULL;
    GtkAccelGroup *accel_group = NULL;
	GObject *wrapped_obj;

    if (phpg_gtype_from_zval(this_ptr) != GTK_TYPE_IMAGE_MENU_ITEM) {
        PHPG_THROW_EXCEPTION(phpg_construct_exception, "Subclassing GtkImageMenuItem requires more than you know");
        return;
    }

	if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|uO", &stock_id, &free_stock_id, &php_accel_group, gtkaccelgroup_ce)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkImageMenuItem);
	}
    
    if (php_accel_group) {
        accel_group = GTK_ACCEL_GROUP(PHPG_GOBJECT(php_accel_group));
    }

    if (stock_id) {
        wrapped_obj = (GObject *) gtk_image_menu_item_new_from_stock(stock_id, accel_group);
    } else {
        wrapped_obj = (GObject *) gtk_image_menu_item_new();
    }
	if (free_stock_id) g_free(stock_id);

	if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkImageMenuItem);
	}
    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}
%% }}}

%% {{{ GtkFileChooserDialog
%%
override gtk_file_chooser_dialog_new_with_backend
PHP_METHOD
{
    char *title = NULL, *backend = NULL;
    zval *php_parent = NULL, *php_action = NULL;
    zval *buttons = NULL;
    GtkWindow *parent = NULL;
    GtkFileChooserAction action = GTK_FILE_CHOOSER_ACTION_OPEN;
    GObject *wrapped_obj;
    int n = 0;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|sNVas", &title, &php_parent,
                            gtkwindow_ce, &php_action, &buttons, &backend)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkFileChooserDialog);
    }

    if (php_parent) {
        if (Z_TYPE_P(php_parent) == IS_NULL)
            parent = NULL;
        else
            parent = GTK_WINDOW(PHPG_GOBJECT(php_parent));
    }

    if (php_action && phpg_gvalue_get_enum(GTK_TYPE_FILE_CHOOSER_ACTION, php_action, (gint *)&action) == FAILURE) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkFileChooserDialog);
    }

    if (buttons) {
        n = zend_hash_num_elements(Z_ARRVAL_P(buttons));
    }
    if (n % 2) {
        php_error(E_WARNING, "%s::%s(): button list has to contain pairs of items",
                  get_active_class_name(NULL TSRMLS_CC), get_active_function_name(TSRMLS_C));
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkFileChooserDialog);
    }

    wrapped_obj = (GObject *) g_object_new(phpg_gtype_from_zval(this_ptr),
                                           "title", title,
                                           "action", action,
                                           "file-system-backend", backend, NULL);
    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkFileChooserDialog);
    }

    if (parent) {
        gtk_window_set_transient_for(GTK_WINDOW(wrapped_obj), parent);
    }

    if (buttons) {
        zval **text, **response;

        if (zend_hash_num_elements(Z_ARRVAL_P(buttons)) % 2) {
            php_error(E_WARNING, "%s::%s(): button list has to contain pairs of items",
                      get_active_class_name(NULL TSRMLS_CC), get_active_function_name(TSRMLS_C));
            gtk_object_destroy(GTK_OBJECT(wrapped_obj));
            PHPG_THROW_CONSTRUCT_EXCEPTION(GtkDialog);
        }

        zend_hash_internal_pointer_reset(Z_ARRVAL_P(buttons));
        while (zend_hash_get_current_data(Z_ARRVAL_P(buttons), (void **)&text) == SUCCESS) {
            zend_hash_move_forward(Z_ARRVAL_P(buttons));
            zend_hash_get_current_data(Z_ARRVAL_P(buttons), (void **)&response); /* safe */
            zend_hash_move_forward(Z_ARRVAL_P(buttons));

            if (Z_TYPE_PP(text) != IS_STRING || Z_TYPE_PP(response) != IS_LONG) {
                php_error(E_WARNING, "%s::%s(): each pair in button list has to string/number",
                          get_active_class_name(NULL TSRMLS_CC), get_active_function_name(TSRMLS_C));
                gtk_object_destroy(GTK_OBJECT(wrapped_obj));
                PHPG_THROW_CONSTRUCT_EXCEPTION(GtkDialog);
            }

            gtk_dialog_add_button(GTK_DIALOG(wrapped_obj), Z_STRVAL_PP(text), Z_LVAL_PP(response));
        }
    }

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}
%% }}}

%% {{{ GtkLabel
%%
add-arginfo GtkLabel __construct
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, text)
    ZEND_ARG_INFO(0, use_underline)
ZEND_END_ARG_INFO();

%%
override gtk_label_new
PHP_METHOD
{
    GObject *wrapped_obj;
    gchar *text = NULL;
    zend_bool use_underline = 0;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|sb", &text, &use_underline)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkLabel);
    }

    if (text) {
        wrapped_obj = (GObject *)g_object_new(phpg_gtype_from_zval(this_ptr), "label", text,
                                              "use-underline", use_underline, NULL);
    } else {
        wrapped_obj = (GObject *)g_object_new(phpg_gtype_from_zval(this_ptr), NULL);
    }

    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkLabel);
    }

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}

%%
override gtk_label_get
PHP_METHOD
{
    gchar *text = NULL;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    gtk_label_get(GTK_LABEL(PHPG_GOBJECT(this_ptr)), &text);
    if (text) {
        RETURN_STRING(text, 1);
    } else {
        RETURN_EMPTY_STRING();
    }
}
%%
override gtk_label_get_selection_bounds
PHP_METHOD
{
    gint start, end;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    gtk_label_get_selection_bounds(GTK_LABEL(PHPG_GOBJECT(this_ptr)), &start, &end);
    php_gtk_build_value(&return_value, "(ii)", start, end);
}
%%
override gtk_label_get_layout_offsets
PHP_METHOD
{
    gint x, y;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    gtk_label_get_layout_offsets(GTK_LABEL(PHPG_GOBJECT(this_ptr)), &x, &y);
    php_gtk_build_value(&return_value, "(ii)", x, y);
}
%% }}}

%% {{{ GtkMenu
%%
override gtk_menu_popup
static void php_gtk_menu_position(GtkMenu *menu, int *x, int *y, int *push_in, gpointer data)
{
    phpg_cb_data_t *cbd = (phpg_cb_data_t *) data;
    char *callback_name;
    zval *retval = NULL;
    zval ***args = NULL;
    int n_args = 0;
    TSRMLS_FETCH();

    if (!zend_is_callable(cbd->callback, 0, &callback_name)) {
        php_error(E_WARNING, "unable to call menu position callback '%s' specified in %s on line %d", callback_name, cbd->src_filename, cbd->src_lineno);
        efree(callback_name);
        return;
    }

    if (cbd->user_args) {
        args = php_gtk_hash_as_array_offset(cbd->user_args, 0, &n_args);
    }

    call_user_function_ex(EG(function_table), NULL, cbd->callback, &retval, n_args, args, 0, NULL TSRMLS_CC);

    if (retval) {
        if (Z_TYPE_P(retval) == IS_ARRAY && !php_gtk_parse_args_hash_quiet(retval, "ii|b", x, y, push_in)) {
            php_error(E_WARNING, "unable to parse result of menu position callback");
        }
        zval_ptr_dtor(&retval);
    }

    if (args) {
        efree(args);
    }

    efree(callback_name);
}

PHP_METHOD
{
    GtkWidget *pms = NULL, *pmi = NULL;
    zval *php_pms = NULL, *php_pmi = NULL;
    zval *callback = NULL, *user_args = NULL;
    int button = 0, time = 0;
    phpg_cb_data_t *data;

    NOT_STATIC_METHOD();

    if (ZEND_NUM_ARGS() > 5) {
        if (!php_gtk_parse_varargs(ZEND_NUM_ARGS(), 5, &user_args, "NNVii", &php_pms, gtkwidget_ce, &php_pmi, gtkwidget_ce, &callback, &button, &time)) {
            return;
        }
    } else {
        if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|NNVii", &php_pms, gtkwidget_ce, &php_pmi, gtkwidget_ce, &callback, &button, &time)) {
            return;
        }
    }

    if (php_pms && Z_TYPE_P(php_pms) != IS_NULL)
        pms = GTK_WIDGET(PHPG_GOBJECT(php_pms));
    if (php_pmi && Z_TYPE_P(php_pmi) != IS_NULL)
        pmi = GTK_WIDGET(PHPG_GOBJECT(php_pmi));
    if (!time)
        time = gtk_get_current_event_time();

    if (callback && Z_TYPE_P(callback) != IS_NULL) {

        zval_add_ref(&callback);
        data = phpg_cb_data_new(callback, user_args TSRMLS_CC);

        gtk_menu_popup(GTK_MENU(PHPG_GOBJECT(this_ptr)), pms, pmi, 
        (GtkMenuPositionFunc)php_gtk_menu_position, data, button, time);

    } else {

        gtk_menu_popup(GTK_MENU(PHPG_GOBJECT(this_ptr)), pms, pmi, NULL, NULL, button, time);
    }
}
%% }}}

%% {{{ GtkMessageDialog
%%
add-arginfo GtkMessageDialog __construct
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, parent)
    ZEND_ARG_INFO(0, flags)
    ZEND_ARG_INFO(0, type)
    ZEND_ARG_INFO(0, buttons)
    ZEND_ARG_INFO(0, message)
ZEND_END_ARG_INFO();

%%
override gtk_message_dialog_new
PHP_METHOD
{
    GtkWindow *parent = NULL;
    zval *php_parent = NULL, *php_flags = NULL, *php_type = NULL, *php_buttons = NULL;
    GtkDialogFlags flags = 0;
    GtkMessageType type = GTK_MESSAGE_INFO;
    GtkButtonsType buttons = GTK_BUTTONS_NONE;
    char *message = NULL;
    GObject *wrapped_obj;

    if (phpg_gtype_from_zval(this_ptr) != GTK_TYPE_MESSAGE_DIALOG) {
        PHPG_THROW_EXCEPTION(phpg_construct_exception, "Subclassing GtkMessageDialog requires more than you know");
        return;
    }

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|NVVVs", &php_parent, gtkwindow_ce, &php_flags, &php_type, &php_buttons, &message)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkMessageDialog);
    }

    if (php_parent) {
        if (Z_TYPE_P(php_parent) == IS_NULL)
            parent = NULL;
        else
            parent = GTK_WINDOW(PHPG_GOBJECT(php_parent));
    }

    if (php_flags && phpg_gvalue_get_flags(GTK_TYPE_DIALOG_FLAGS, php_flags, (gint *)&flags) == FAILURE) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkMessageDialog);
    }

    if (php_type && phpg_gvalue_get_enum(GTK_TYPE_MESSAGE_TYPE, php_type, (gint *)&type) == FAILURE) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkMessageDialog);
    }

    if (php_buttons && phpg_gvalue_get_enum(GTK_TYPE_BUTTONS_TYPE, php_buttons, (gint *)&buttons) == FAILURE) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkMessageDialog);
    }

    if (!message) {
        message = "";
    }

    wrapped_obj = (GObject *) gtk_message_dialog_new(parent, flags, type, buttons, "%s", message);
    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkMessageDialog);
    }

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}
%% }}}

%% {{{ GtkMenuItem
%%
add-arginfo GtkMenuItem __construct
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, text)
    ZEND_ARG_INFO(0, use_underline)
ZEND_END_ARG_INFO();

%%
override gtk_menu_item_new
PHP_METHOD
{
    GObject *wrapped_obj;
    gchar *text = NULL;
    zend_bool use_underline = 1;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|sb", &text, &use_underline)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkMenuItem);
    }

    wrapped_obj = (GObject *)g_object_new(phpg_gtype_from_zval(this_ptr), NULL);
    if (text) {
        GtkWidget *accel_label;
        accel_label = g_object_new(GTK_TYPE_ACCEL_LABEL, NULL);
        gtk_misc_set_alignment(GTK_MISC(accel_label), 0.0, 0.5);
        gtk_container_add(GTK_CONTAINER(wrapped_obj), accel_label);
        if (use_underline)
            gtk_label_set_text_with_mnemonic(GTK_LABEL(accel_label), text);
        else
            gtk_label_set_text(GTK_LABEL(accel_label), text);
        gtk_accel_label_set_accel_widget(GTK_ACCEL_LABEL(accel_label), GTK_WIDGET(wrapped_obj));
        gtk_widget_show(accel_label);
    }

    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkMenuItem);
    }

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);

}
%% }}}

%% {{{ GtkProgressBar

%%
override gtk_progress_bar_new_with_adjustment
PHP_METHOD
{
	GtkAdjustment *adjustment = NULL;
	zval *php_adjustment = NULL;
	GObject *wrapped_obj;

	if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|N", &php_adjustment, gtkadjustment_ce)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkProgressBar);
	}
    if (php_adjustment) {
        if (Z_TYPE_P(php_adjustment) == IS_NULL)
            adjustment = NULL;
        else
            adjustment = GTK_ADJUSTMENT(PHPG_GOBJECT(php_adjustment));
    }

    if (adjustment) {
        wrapped_obj = g_object_new(phpg_gtype_from_zval(this_ptr), "adjustment", adjustment, NULL);
    } else {
        wrapped_obj = g_object_new(phpg_gtype_from_zval(this_ptr), NULL);
    }

	if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkProgressBar);
	}
    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}

%% }}}

%% {{{ GtkRadioMenuItem
%%
add-arginfo GtkRadioMenuItem __construct
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, group)
    ZEND_ARG_INFO(0, text)
    ZEND_ARG_INFO(0, use_underline)
ZEND_END_ARG_INFO();

%%
override gtk_radio_menu_item_new
PHP_METHOD
{
    zval *php_group = NULL;
    char *label = NULL;
    zend_bool use_underline = 1;
    GtkRadioMenuItem *group = NULL;
    GObject *wrapped_obj;
    GType gtype = phpg_gtype_from_zval(this_ptr);

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|Nsb", &php_group, gtkradiomenuitem_ce, &label, &use_underline)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkRadioButton);
    }

    if (php_group && Z_TYPE_P(php_group) != IS_NULL) {
        group = GTK_RADIO_MENU_ITEM(PHPG_GOBJECT(php_group));
    }

    wrapped_obj = (GObject *) g_object_new(gtype, NULL);

    if (label) {
        GtkWidget *accel_label;
        accel_label = g_object_new(GTK_TYPE_ACCEL_LABEL, NULL);
        gtk_misc_set_alignment(GTK_MISC(accel_label), 0.0, 0.5);
        gtk_container_add(GTK_CONTAINER(wrapped_obj), accel_label);
        if (use_underline)
            gtk_label_set_text_with_mnemonic(GTK_LABEL(accel_label), label);
        else
            gtk_label_set_text(GTK_LABEL(accel_label), label);
        gtk_accel_label_set_accel_widget(GTK_ACCEL_LABEL(accel_label), GTK_WIDGET(wrapped_obj));
        gtk_widget_show(accel_label);
    }
    if (group) {
        gtk_radio_menu_item_set_group(GTK_RADIO_MENU_ITEM(wrapped_obj), gtk_radio_menu_item_get_group(group));
    }

    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkRadioButton);
    }
    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);

}

%%
add-arginfo GtkRadioMenuItem set_group
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, group)
ZEND_END_ARG_INFO();

%%
override gtk_radio_menu_item_set_group
PHP_METHOD
{
    zval *php_group = NULL;
    GtkRadioMenuItem *group = NULL;
    GSList *list;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "V", &php_group, gtkradiomenuitem_ce)) {
        return;
    }

    group = GTK_RADIO_MENU_ITEM(PHPG_GOBJECT(php_group));
    list = gtk_radio_menu_item_get_group(group);
    if (list == gtk_radio_menu_item_get_group(GTK_RADIO_MENU_ITEM(PHPG_GOBJECT(this_ptr)))) {
        return;
    }
    gtk_radio_menu_item_set_group(GTK_RADIO_MENU_ITEM(PHPG_GOBJECT(this_ptr)), list);
}

%%
override gtk_radio_menu_item_get_group
PHP_METHOD
{
    GSList *list, *tmp;
    zval *item;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "")) {
        return;
    }

    list = gtk_radio_menu_item_get_group(GTK_RADIO_MENU_ITEM(PHPG_GOBJECT(this_ptr)));
    array_init(return_value);
    for (tmp = list; tmp; tmp = tmp->next) {
        MAKE_STD_ZVAL(item);
        phpg_gobject_new(&item, G_OBJECT(tmp->data) TSRMLS_CC);
        add_next_index_zval(return_value, item);
    }
}
/* }}} */

%% {{{ GtkRadioButton
%%
add-arginfo GtkRadioButton __construct
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, group)
    ZEND_ARG_INFO(0, text)
    ZEND_ARG_INFO(0, use_underline)
ZEND_END_ARG_INFO();

%%
override gtk_radio_button_new
PHP_METHOD
{
    zval *php_group = NULL;
    char *label = NULL;
    zend_bool use_underline = 1;
    GtkRadioButton *group = NULL;
    GObject *wrapped_obj;
    GType gtype = phpg_gtype_from_zval(this_ptr);

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|Nsb", &php_group, gtkradiobutton_ce, &label, &use_underline)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkRadioButton);
    }

    if (php_group && Z_TYPE_P(php_group) != IS_NULL) {
        group = GTK_RADIO_BUTTON(PHPG_GOBJECT(php_group));
    }

    if (group) {
        if (label) {
            wrapped_obj = (GObject *) g_object_new(gtype, "group", group, "label", label,
                                                   "use-underline", use_underline, NULL);
        } else {
            wrapped_obj = (GObject *) g_object_new(gtype, "group", group, NULL);
        }
    } else {
        if (label) {
            wrapped_obj = (GObject *) g_object_new(gtype, "label", label, "use-underline",
                                                   use_underline, NULL);
        } else {
            wrapped_obj = (GObject *) g_object_new(gtype, NULL);
        }
    }

    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkRadioButton);
    }
    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}

%% }}}

%% {{{ GtkRadioToolButton
%%
add-arginfo GtkRadioToolButton __construct
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, group)
    ZEND_ARG_INFO(0, stock_id)
ZEND_END_ARG_INFO();

%%
override gtk_radio_tool_button_new

PHP_METHOD
{
    zval *php_group = NULL;
    GtkRadioToolButton *group = NULL;
    char *stock_id = NULL;
    GObject *wrapped_obj;
    GType gtype = phpg_gtype_from_zval(this_ptr);

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|Ns", &php_group, gtkradiotoolbutton_ce, &stock_id)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkRadioToolButton);
    }

    if (php_group && Z_TYPE_P(php_group) != IS_NULL) {
        group = GTK_RADIO_TOOL_BUTTON(PHPG_GOBJECT(php_group));
    }

    if (group) {
        if (stock_id) {
            wrapped_obj = (GObject *) g_object_new(gtype, "group", group, "stock_id", stock_id, NULL);
        } else {
            wrapped_obj = (GObject *) g_object_new(gtype, "group", group, NULL);
        }
    } else {
        if (stock_id) {
            wrapped_obj = (GObject *) g_object_new(gtype, "stock_id", stock_id, NULL);
        } else {
            wrapped_obj = (GObject *) g_object_new(gtype, NULL);
        }
    }

    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkRadioToolButton);
    }
    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}
%% }}}

%% include gtkstyle.overrides

%% {{{ GtkTextAttributes

%%
override-prop GtkTextAttributes bg_color
PHPG_PROP_READER
{
    GdkColor php_retval;

    php_retval = ((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.bg_color;
    phpg_gboxed_new(&return_value, GDK_TYPE_COLOR, &php_retval, TRUE, TRUE TSRMLS_CC);

    return SUCCESS;
}

%%
override-prop GtkTextAttributes fg_color
PHPG_PROP_READER
{
    GdkColor php_retval;

    php_retval = ((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.fg_color;
    phpg_gboxed_new(&return_value, GDK_TYPE_COLOR, &php_retval, TRUE, TRUE TSRMLS_CC);

    return SUCCESS;
}

%%
override-prop GtkTextAttributes bg_stipple
PHPG_PROP_READER
{
    GdkBitmap *php_retval;

    php_retval = ((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.bg_stipple;
    phpg_gobject_new(&return_value, (GObject *)php_retval TSRMLS_CC);

    return SUCCESS;
}

%%
override-prop GtkTextAttributes fg_stipple
PHPG_PROP_READER
{
    GdkBitmap *php_retval;

    php_retval = ((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.fg_stipple;
    phpg_gobject_new(&return_value, (GObject *)php_retval TSRMLS_CC);

    return SUCCESS;
}

%%
override-prop GtkTextAttributes rise
PHPG_PROP_READER
{
    RETVAL_LONG(((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.rise);

    return SUCCESS;
}

%%
override-prop GtkTextAttributes underline
PHPG_PROP_READER
{
    RETVAL_LONG(((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.underline);

    return SUCCESS;
}

%%
override-prop GtkTextAttributes strikethrough
PHPG_PROP_READER
{
    RETVAL_LONG(((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.strikethrough);

    return SUCCESS;
}

%%
override-prop GtkTextAttributes draw_bg
PHPG_PROP_READER
{
    RETVAL_BOOL(((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.draw_bg);

    return SUCCESS;
}
%% }}}

%% {{{ GtkToggleButton
%%
add-arginfo GtkToggleButton __construct
static
ZEND_BEGIN_ARG_INFO_EX(ARGINFO_NAME, 0, 0, 0)
    ZEND_ARG_INFO(0, text)
    ZEND_ARG_INFO(0, use_underline)
ZEND_END_ARG_INFO();

%%
override gtk_toggle_button_new
PHP_METHOD
{
    GObject *wrapped_obj;
    gchar *text = NULL;
    zend_bool use_underline = 1;

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|sb", &text, &use_underline)) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkToggleButton);
    }

    if (text) {
        wrapped_obj = (GObject *)g_object_new(phpg_gtype_from_zval(this_ptr), "label",
                                              text, "use-underline", use_underline, NULL);
    } else {
        wrapped_obj = (GObject *)g_object_new(phpg_gtype_from_zval(this_ptr), NULL);
    }

    if (!wrapped_obj) {
        PHPG_THROW_CONSTRUCT_EXCEPTION(GtkToggleButton);
    }

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}
%% }}}

%% {{{ GtkWidget
%%
add-arginfo GtkWidget intersect
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, area)
ZEND_END_ARG_INFO();

%%
override gtk_widget_intersect
PHP_METHOD
{
    zval *php_area;
    GdkRectangle area, intersection;
    
    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "V", &php_area))
        return;

    if (phpg_rectangle_from_zval(php_area, &area TSRMLS_CC) == FAILURE) {
        php_error(E_WARNING, "%s::%s() expects area argument to be either a 4-element array or a GdkRectangle object", get_active_class_name(NULL TSRMLS_CC), get_active_function_name(TSRMLS_C));
        return;
    }
    if (gtk_widget_intersect(GTK_WIDGET(PHPG_GOBJECT(this_ptr)), &area, &intersection)) {
        phpg_gboxed_new(&return_value, GDK_TYPE_RECTANGLE, &intersection, TRUE, TRUE TSRMLS_CC);
    } else {
        RETURN_FALSE;
    }
}

%% }}}

%% include gtktreeview.overrides
