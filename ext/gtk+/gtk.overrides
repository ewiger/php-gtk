/* vim: set ft=cpp fdm=marker: */
%%
headers
#include "gen_atk.h"
#include "gen_gdk.h"
#include "gen_pango.h"
#include "ext/standard/file.h"

/* TODO
 * implement gtk_adjustment_set_all
 * implement gtk_radio_tool_button_new
 */
%% {{{ ignores

%%
ignore-glob
	*_get_type
	gtk_marshal_*
	gtk_arg_*
	gtk_args_*
	gtk_signal_connect*
	gtk_signal_new*
	gtk_init_add_*
	gtk_quit_add_*
	gtk_timeout_add_*
	gtk_idle_add_*
	gtk_accelerator_*
	gtk_target_list_*
	gtk_radio_tool_button_new*
%%
ignore
	gtk_accel_group_activate
	gtk_accel_group_add
	gtk_accel_group_attach
	gtk_accel_group_create_add
	gtk_accel_group_create_remove
	gtk_accel_group_detach
	gtk_accel_group_entries_from_object
	gtk_accel_group_get_entry
	gtk_accel_group_handle_add
	gtk_accel_group_handle_remove
	gtk_accel_group_lock
	gtk_accel_group_lock_entry
	gtk_accel_group_new
	gtk_accel_group_ref
	gtk_accel_group_remove
	gtk_accel_groups_activate
	gtk_accel_groups_from_object
	gtk_accel_group_unlock
	gtk_accel_group_unlock_entry
	gtk_accel_group_unref
	gtk_adjustment_set_all
	gtk_button_new_with_label
	gtk_button_new_with_mnemonic
	gtk_clist_construct
	gtk_clist_set_row_data_full
	gtk_container_add_child_arg_type
	gtk_container_addv
	gtk_container_add_with_args
	gtk_container_arg_get
	gtk_container_arg_set
	gtk_container_child_arg_get_info
	gtk_container_child_args_collect
	gtk_container_child_composite_name
	gtk_container_child_getv
	gtk_container_child_set
	gtk_container_child_setv
	gtk_container_clear_resize_widgets
	gtk_container_dequeue_resize_handler
	gtk_container_forall
	gtk_container_foreach
	gtk_container_foreach_full
	gtk_container_get_toplevels
	gtk_container_query_child_args
	gtk_container_queue_resize
	gtk_draw_box_gap
	gtk_draw_check
	gtk_draw_cross
	gtk_draw_extension
	gtk_draw_flat_box
	gtk_draw_focus
	gtk_draw_handle
	gtk_draw_option
	gtk_draw_ramp
	gtk_draw_shadow_gap
	gtk_draw_slider
	gtk_draw_tab
	gtk_exit
	gtk_get_current_event
	gtk_get_event_widget
	gtk_idle_remove_by_data
	gtk_init
	gtk_init_check
	gtk_item_factory_create_item
	gtk_item_factory_create_items_ac
	gtk_item_factory_create_menu_entries
	gtk_item_factory_delete_entries
	gtk_item_factory_delete_entry
	gtk_item_factory_popup_data
	gtk_item_factory_popup_with_data
	gtk_item_factory_set_translate_func
	gtk_key_snooper_install
	gtk_key_snooper_remove
	gtk_label_new_with_mnemonic
	gtk_menu_attach_to_widget
	gtk_object_add_arg_type
	gtk_object_arg_get
	gtk_object_arg_get_info
	gtk_object_args_collect
	gtk_object_arg_set
	gtk_object_get
	gtk_object_get_data_by_id
	gtk_object_get_user_data
	gtk_object_getv
	gtk_object_new
	gtk_object_newv
	gtk_object_query_args
	gtk_object_remove_data_by_id
	gtk_object_remove_no_notify_by_id
	gtk_object_set
	gtk_object_set_data_by_id
	gtk_object_set_data_by_id_full
	gtk_object_set_data_full
	gtk_object_set_user_data
	gtk_object_setv
	gtk_object_weakref
	gtk_object_weakunref
	gtk_preview_uninit
	gtk_progress_bar_new
	gtk_progress_bar_update
	gtk_propagate_event
	gtk_quit_remove_by_data
	gtk_range_default_htrough_click
	gtk_range_default_vtrough_click
	gtk_range_trough_click
	gtk_set_locale
	gtk_signal_add_emission_hook_full
	gtk_signal_disconnect_by_data
	gtk_signal_disconnect_by_func
	gtk_signal_emit
	gtk_signal_emit_by_name
	gtk_signal_emitv
	gtk_signal_emitv_by_name
	gtk_signal_handler_block_by_data
	gtk_signal_handler_block_by_func
	gtk_signal_handler_pending_by_func
	gtk_signal_handler_unblock_by_data
	gtk_signal_handler_unblock_by_func
	gtk_signal_n_emissions
	gtk_signal_n_emissions_by_name
	gtk_signal_query
	gtk_signal_set_funcs
	gtk_text_view_new_with_buffer
	gtk_tooltips_data_get
	gtk_trace_referencing
	gtk_tree_view_new_with_model
	gtk_type_check_class_cast
	gtk_type_check_object_cast
	gtk_type_register_enum
	gtk_type_register_flags
	gtk_widget_get
	gtk_widget_getv
	gtk_widget_new
	gtk_widget_newv
	gtk_widget_reset_shapes
	gtk_widget_set
	gtk_widget_setv
	gtk_window_add_embedded_xid
	gtk_window_remove_embedded_xid
	gtk_window_reposition
%%
ignore
	GtkArgFlags
	GtkPrivateFlags
%% }}}

%% {{{ GtkButton
%%
override gtk_button_new
static PHP_METHOD(GtkButton, __construct)
{
	GObject *wrapped_obj;
	gchar *text = NULL;
	zend_bool use_underline = 0;

	NOT_STATIC_METHOD();

	if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|sb", &text, &use_underline)) {
		PHPG_THROW_EXCEPTION(phpg_construct_exception, "could not construct GtkButton object");
	}

	if (text) {
		wrapped_obj = (GObject *)g_object_new(GTK_TYPE_BUTTON, "label", text,
											  "use-underline", use_underline, NULL);
	} else {
		wrapped_obj = (GObject *)gtk_button_new();
	}

	if (!wrapped_obj) {
		PHPG_THROW_EXCEPTION(phpg_construct_exception, "could not construct GtkButton object");
	}

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}
%%
override gtk_button_new_from_stock new_from_stock ZEND_ACC_PUBLIC|ZEND_ACC_STATIC
static PHP_METHOD(GtkButton, new_from_stock)
{
	GObject *wrapped_obj;
	gchar *stock = NULL;

	if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "s", &stock)) {
		PHPG_THROW_EXCEPTION(phpg_construct_exception, "could not construct GtkButton object");
	}

	wrapped_obj = (GObject *)g_object_new(GTK_TYPE_BUTTON, "label", stock,
										  "use-stock", TRUE, "use-underline", TRUE, NULL);

	if (!wrapped_obj) {
		PHPG_THROW_EXCEPTION(phpg_construct_exception, "could not construct GtkButton object");
	}

    phpg_gobject_new(&return_value, wrapped_obj TSRMLS_CC);
}
%% }}}

%% {{{ GtkLabel
%%
override gtk_label_new
static PHP_METHOD(GtkLabel, __construct)
{
	GObject *wrapped_obj;
	gchar *text = NULL;
	zend_bool use_underline = 0;

	NOT_STATIC_METHOD();

	if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "|sb", &text, &use_underline)) {
		PHPG_THROW_EXCEPTION(phpg_construct_exception, "could not construct GtkLabel object");
	}

	if (text) {
		wrapped_obj = (GObject *)g_object_new(GTK_TYPE_LABEL, "label", text,
											  "use-underline", use_underline, NULL);
	} else {
		wrapped_obj = (GObject *)gtk_label_new(NULL);
	}

	if (!wrapped_obj) {
		PHPG_THROW_EXCEPTION(phpg_construct_exception, "could not construct GtkLabel object");
	}

    phpg_gobject_set_wrapper(this_ptr, wrapped_obj TSRMLS_CC);
}

%%
override gtk_label_get
static PHP_METHOD(GtkLabel, get)
{
	gchar *text = NULL;

	NOT_STATIC_METHOD();

	if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
		return;

	gtk_label_get(GTK_LABEL(PHP_GTK_GET(this_ptr)), &text);
	if (text) {
		RETURN_STRING(text, 1);
	} else {
		RETURN_EMPTY_STRING();
	}
}
%%
override gtk_label_get_selection_bounds
static PHP_METHOD(GtkLabel, get_selection_bounds)
{
	gint start, end;

	NOT_STATIC_METHOD();

	if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
		return;

	gtk_label_get_selection_bounds(GTK_LABEL(PHP_GTK_GET(this_ptr)), &start, &end);
	*return_value = *php_gtk_build_value("(ii)", start, end);
}
%%
override gtk_label_get_layout_offsets
static PHP_METHOD(GtkLabel, get_layout_offsets)
{
	gint x, y;

	NOT_STATIC_METHOD();

	if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
		return;

	gtk_label_get_layout_offsets(GTK_LABEL(PHP_GTK_GET(this_ptr)), &x, &y);
	*return_value = *php_gtk_build_value("(ii)", x, y);
}
%% }}}

%%
override-prop GtkTextAttributes bg_color
PHPG_PROP_READER(GtkTextAttributes, bg_color)
{
	GdkColor php_retval;

	php_retval = ((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.bg_color;
	phpg_gboxed_new(&return_value, GDK_TYPE_COLOR, &php_retval, TRUE, TRUE);

	return SUCCESS;
}

%%
override-prop GtkTextAttributes fg_color
PHPG_PROP_READER(GtkTextAttributes, fg_color)
{
	GdkColor php_retval;

	php_retval = ((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.fg_color;
	phpg_gboxed_new(&return_value, GDK_TYPE_COLOR, &php_retval, TRUE, TRUE);

	return SUCCESS;
}

%%
override-prop GtkTextAttributes bg_stipple
PHPG_PROP_READER(GtkTextAttributes, bg_stipple)
{
	GdkBitmap *php_retval;

	php_retval = ((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.bg_stipple;
	phpg_gobject_new(&return_value, php_retval TSRMLS_CC);

	return SUCCESS;
}

%%
override-prop GtkTextAttributes fg_stipple
PHPG_PROP_READER(GtkTextAttributes, fg_stipple)
{
	GdkBitmap *php_retval;

	php_retval = ((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.fg_stipple;
	phpg_gobject_new(&return_value, php_retval TSRMLS_CC);

	return SUCCESS;
}

%%
override-prop GtkTextAttributes rise
PHPG_PROP_READER(GtkTextAttributes, rise)
{
	RETVAL_LONG(((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.rise);

	return SUCCESS;
}

%%
override-prop GtkTextAttributes underline
PHPG_PROP_READER(GtkTextAttributes, underline)
{
	RETVAL_LONG(((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.underline);

	return SUCCESS;
}

%%
override-prop GtkTextAttributes strikethrough
PHPG_PROP_READER(GtkTextAttributes, strikethrough)
{
	RETVAL_LONG(((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.strikethrough);

	return SUCCESS;
}

%%
override-prop GtkTextAttributes draw_bg
PHPG_PROP_READER(GtkTextAttributes, draw_bg)
{
	RETVAL_BOOL(((GtkTextAttributes *)((phpg_gboxed_t *)object)->boxed)->appearance.draw_bg);

	return SUCCESS;
}
