/* vim: set ft=cpp fdm=marker et: */

%%
headers

static void phpg_text_tag_table_foreach_func_marshal (GtkTextTagTable *table, gpointer data);

%% {{{ ignores
%%
ignore
    gtk_text_view_new
%% }}}

%% {{{ GtkTextBuffer

%%
override gtk_text_buffer_get_bounds
PHP_METHOD
{
    GtkTextIter start, end;
    zval *php_start = NULL;
    zval *php_end = NULL;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    gtk_text_buffer_get_bounds(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &start, &end);

    phpg_gboxed_new(&php_start, GTK_TYPE_TEXT_ITER, &start, TRUE, TRUE TSRMLS_CC);
    phpg_gboxed_new(&php_end, GTK_TYPE_TEXT_ITER, &end, TRUE, TRUE TSRMLS_CC);

    php_gtk_build_value(&return_value, "(NN)", php_start, php_end);
}

%%
override gtk_text_buffer_get_selection_bounds
PHP_METHOD
{
    GtkTextIter start, end;
    zval *php_start = NULL;
    zval *php_end = NULL;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    if (gtk_text_buffer_get_selection_bounds(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &start, &end)) {
        phpg_gboxed_new(&php_start, GTK_TYPE_TEXT_ITER, &start, TRUE, TRUE TSRMLS_CC);
        phpg_gboxed_new(&php_end, GTK_TYPE_TEXT_ITER, &end, TRUE, TRUE TSRMLS_CC);

        php_gtk_build_value(&return_value, "(NN)", php_start, php_end);
    } else {
        RETURN_FALSE;
    }
}

%%
override gtk_text_buffer_get_start_iter
PHP_METHOD
{
    GtkTextIter iter;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    gtk_text_buffer_get_start_iter(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter);
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
override gtk_text_buffer_get_end_iter
PHP_METHOD
{
    GtkTextIter iter;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    gtk_text_buffer_get_end_iter(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter);
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
add-arginfo GtkTextBuffer get_iter_at_line
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, line_number)
ZEND_END_ARG_INFO();

%%
override gtk_text_buffer_get_iter_at_line
PHP_METHOD
{
    GtkTextIter iter;
    int line_number;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "i", &line_number))
        return;

    gtk_text_buffer_get_iter_at_line(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter, line_number);
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
override gtk_text_buffer_get_iter_at_mark
PHP_METHOD
{
    GtkTextIter iter;
    zval *mark;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "O", &mark, gtktextmark_ce))
        return;

    gtk_text_buffer_get_iter_at_mark(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter,
                                     GTK_TEXT_MARK(PHPG_GOBJECT(mark)));
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
override gtk_text_buffer_get_iter_at_child_anchor
PHP_METHOD
{
    GtkTextIter iter;
    zval *anchor;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "O", &anchor, gtktextchildanchor_ce))
        return;

    gtk_text_buffer_get_iter_at_child_anchor(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter,
                                     GTK_TEXT_CHILD_ANCHOR(PHPG_GOBJECT(anchor)));
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
add-arginfo GtkTextBuffer get_iter_at_line_offset
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, line_number)
    ZEND_ARG_INFO(0, char_offset)
ZEND_END_ARG_INFO();

%%
override gtk_text_buffer_get_iter_at_line_offset
PHP_METHOD
{
    GtkTextIter iter;
    int line_number, char_offset;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "ii", &line_number, &char_offset))
        return;

    gtk_text_buffer_get_iter_at_line_offset(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter, line_number, char_offset);
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
add-arginfo GtkTextBuffer get_iter_at_line_index
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, line_number)
    ZEND_ARG_INFO(0, byte_offset)
ZEND_END_ARG_INFO();

%%
override gtk_text_buffer_get_iter_at_line_index
PHP_METHOD
{
    GtkTextIter iter;
    int line_number, byte_offset = 0;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "ii", &line_number, byte_offset))
        return;

    gtk_text_buffer_get_iter_at_line_index(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter, line_number, byte_offset);
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
add-arginfo GtkTextBuffer get_iter_at_offset
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, char_offset)
ZEND_END_ARG_INFO();

%%
override gtk_text_buffer_get_iter_at_offset
PHP_METHOD
{
    GtkTextIter iter;
    int char_offset;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "i", &char_offset))
        return;

    gtk_text_buffer_get_iter_at_offset(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter, char_offset);
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
add-arginfo GtkTextBuffer set_text
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, text)
    ZEND_ARG_INFO(0, length)
ZEND_END_ARG_INFO();

%%
override gtk_text_buffer_set_text
PHP_METHOD
{
    char *text;
    int text_len;
    zend_bool free_text;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "u#", &text, &text_len, &free_text))
        return;

    gtk_text_buffer_set_text(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), text, text_len);

    if (free_text) g_free(text);
}

%% }}}

%% {{{ GtkTextIter

%%
override gtk_text_iter_get_tags
PHP_METHOD
{
    GSList *tags, *tag;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    tags = gtk_text_iter_get_tags((GtkTextIter *)PHPG_GBOXED(this_ptr));

    array_init(return_value);
    for (tag = tags; tag; tag = tag->next) {
        zval *php_tag = NULL;
        phpg_gobject_new(&php_tag, G_OBJECT(tag->data) TSRMLS_CC);
        add_next_index_zval(return_value, php_tag);
    }
    g_slist_free(tags);
}

%%
override gtk_text_iter_get_marks
PHP_METHOD
{
    GSList *marks, *mark;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    marks = gtk_text_iter_get_marks((GtkTextIter *)PHPG_GBOXED(this_ptr));

    array_init(return_value);
    for (mark = marks; mark; mark = mark->next) {
        zval *php_mark = NULL;
        phpg_gobject_new(&php_mark, G_OBJECT(mark->data) TSRMLS_CC);
        add_next_index_zval(return_value, php_mark);
    }
    g_slist_free(marks);
}

%%
override gtk_text_iter_get_toggled_tags
PHP_METHOD
{
    GSList *tags, *tag;
    zend_bool toggled_on = 1;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "b", &toggled_on))
        return;

    tags = gtk_text_iter_get_toggled_tags((GtkTextIter *)PHPG_GBOXED(this_ptr), toggled_on);

    array_init(return_value);
    for (tag = tags; tag; tag = tag->next) {
        zval *php_tag = NULL;
        phpg_gobject_new(&php_tag, G_OBJECT(tag->data) TSRMLS_CC);
        add_next_index_zval(return_value, php_tag);
    }
    g_slist_free(tags);
}

%% }}}

%% {{{ GtkTextChildAnchor

%%
override gtk_text_child_anchor_get_widgets
PHP_METHOD
{
    GList *widgets;
    gint i, len;
    zval *php_item = NULL;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    widgets = gtk_text_child_anchor_get_widgets(GTK_TEXT_CHILD_ANCHOR(PHPG_GOBJECT(this_ptr)));
    len = g_list_length(widgets);

    array_init(return_value);
    for (i = 0; i < len; i++) {
        MAKE_STD_ZVAL(php_item);
        phpg_gobject_new(&php_item, (GObject *)g_list_nth_data(widgets, i) TSRMLS_CC);
        add_next_index_zval(return_value, php_item);
    }

    g_list_free(widgets);
}

%% }}}

%% {{{ GtkTextTagTable

%%
add-arginfo GtkTextTagTable foreach
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, callback)
ZEND_END_ARG_INFO();

%%
override gtk_text_tag_table_foreach
static void phpg_text_tag_table_foreach_func_marshal(GtkTextTagTable *table, gpointer data)
{
    phpg_cb_data_t *cbd = (phpg_cb_data_t *) data;
    zval *retval = NULL;
    zval ***args = NULL;
    int n_args = 0;
    char *callback_name;
    zval *php_table = NULL;

    TSRMLS_FETCH();

    if (!zend_is_callable(cbd->callback, 0, &callback_name)) {
        php_error(E_WARNING, "Unable to invoke callback '%s' specified in %s on line %ld", callback_name, cbd->src_filename, cbd->src_lineno);
        efree(callback_name);
        return;
    }

    phpg_gobject_new(&php_table,       (GObject*)table       TSRMLS_CC);

    args = php_gtk_hash_as_array_offset(cbd->user_args, 1, &n_args);
    args[0] = &php_table;

    call_user_function_ex(EG(function_table), NULL, cbd->callback, &retval, n_args, args, 0, NULL TSRMLS_CC);

    zval_ptr_dtor(&php_table);

    if (retval) {
        zval_ptr_dtor(&retval);
    }

    phpg_handle_marshaller_exception(TSRMLS_C);

    efree(callback_name);
    efree(args);
}

PHP_METHOD
{
    zval *php_callback, *extra;
    phpg_cb_data_t *cb_data;
    GtkTextTagTableForeach callback;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_varargs(ZEND_NUM_ARGS(), 1, &extra, "V", &php_callback))
        return;

    zval_add_ref(&php_callback);
    cb_data  = phpg_cb_data_new(php_callback, extra TSRMLS_CC);
    callback = (GtkTextTagTableForeach)phpg_text_tag_table_foreach_func_marshal;

    gtk_text_tag_table_foreach(GTK_TEXT_TAG_TABLE(PHPG_GOBJECT(this_ptr)), callback, cb_data);
    phpg_cb_data_destroy(cb_data);
}


%% }}}

%% {{{ GtkTextView

%%
add-arginfo GtkTextView buffer_to_window_coords
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, window_type)
    ZEND_ARG_INFO(0, buffer_x)
    ZEND_ARG_INFO(0, buffer_y)
ZEND_END_ARG_INFO();

%%
override gtk_text_view_buffer_to_window_coords
PHP_METHOD
{
    gint buffer_x, buffer_y, window_x, window_y;
    GtkTextWindowType win_type;
    zval *php_win_type = NULL;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "Vii", &php_win_type, &buffer_x, &buffer_y))
        return;

    if (php_win_type && phpg_gvalue_get_enum(GTK_TYPE_TEXT_WINDOW_TYPE, php_win_type, (gint *)&win_type) == FAILURE)
        return;

    gtk_text_view_buffer_to_window_coords(GTK_TEXT_VIEW(PHPG_GOBJECT(this_ptr)), win_type, buffer_x, buffer_y, &window_x, &window_y);
    php_gtk_build_value(&return_value, "(ii)", window_x, window_y);
}


%%
add-arginfo GtkTextView get_iter_at_location
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, x)
    ZEND_ARG_INFO(0, y)
ZEND_END_ARG_INFO();

%%
override gtk_text_view_get_iter_at_location
PHP_METHOD
{
    gint x, y;
    GtkTextIter iter;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "ii", &x, &y))
        return;

    gtk_text_view_get_iter_at_location(GTK_TEXT_VIEW(PHPG_GOBJECT(this_ptr)), &iter, x, y);

    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}


%%
add-arginfo GtkTextView get_iter_at_position
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, x)
    ZEND_ARG_INFO(0, y)
ZEND_END_ARG_INFO();

%%
override gtk_text_view_get_iter_at_position
PHP_METHOD
{
    gint x, y, trailing;
    zval *php_iter = NULL;
    GtkTextIter iter;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "ii", &x, &y))
        return;

    gtk_text_view_get_iter_at_position(GTK_TEXT_VIEW(PHPG_GOBJECT(this_ptr)), &iter, &trailing, x, y);

    phpg_gboxed_new(&php_iter, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);

    php_gtk_build_value(&return_value, "(Ni)", php_iter, trailing);
}


%%
add-arginfo GtkTextView get_iter_location
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_OBJ_INFO(0, iter, GtkTextIter, 0)
ZEND_END_ARG_INFO();

%%
override gtk_text_view_get_iter_location
PHP_METHOD
{
    zval *php_iter = NULL;
    GtkTextIter *iter = NULL;
    GdkRectangle rect;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "O", &php_iter, gtktextiter_ce))
        return;

    if (php_iter && IS_OBJECT == Z_TYPE_P(php_iter)) {
        iter = (GtkTextIter *) PHPG_GBOXED(php_iter);
    }

    gtk_text_view_get_iter_location(GTK_TEXT_VIEW(PHPG_GOBJECT(this_ptr)), iter, &rect);
    phpg_gboxed_new(&return_value, GDK_TYPE_RECTANGLE, &rect, TRUE, TRUE TSRMLS_CC);
}


%%
add-arginfo GtkTextView get_line_at_y
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, y)
ZEND_END_ARG_INFO();

%%
override gtk_text_view_get_line_at_y
PHP_METHOD
{
    gint y, line_top;
    zval *php_iter = NULL;
    GtkTextIter iter;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "i", &y))
        return;

    gtk_text_view_get_line_at_y(GTK_TEXT_VIEW(PHPG_GOBJECT(this_ptr)), &iter, y, &line_top);

    phpg_gboxed_new(&php_iter, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);

    php_gtk_build_value(&return_value, "(Ni)", php_iter, line_top);
}


%%
add-arginfo GtkTextView get_line_yrange
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_OBJ_INFO(0, iter, GtkTextIter, 0)
ZEND_END_ARG_INFO();

%%
override gtk_text_view_get_line_yrange
PHP_METHOD
{
    zval *php_iter = NULL;
    GtkTextIter *iter = NULL;
    gint y, height;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "O", &php_iter, gtktextiter_ce))
        return;

    if (php_iter && IS_OBJECT == Z_TYPE_P(php_iter)) {
        iter = (GtkTextIter *) PHPG_GBOXED(php_iter);
    }

    gtk_text_view_get_line_yrange(GTK_TEXT_VIEW(PHPG_GOBJECT(this_ptr)), iter, &y, &height);
    php_gtk_build_value(&return_value, "(ii)", y, height);
}

%%
override gtk_text_view_get_visible_rect
PHP_METHOD
{
    GdkRectangle rect;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    gtk_text_view_get_visible_rect(GTK_TEXT_VIEW(PHPG_GOBJECT(this_ptr)), &rect);
    phpg_gboxed_new(&return_value, GDK_TYPE_RECTANGLE, &rect, TRUE, TRUE TSRMLS_CC);
}

%%
add-arginfo GtkTextView window_to_buffer_coords
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, window_type)
    ZEND_ARG_INFO(0, window_x)
    ZEND_ARG_INFO(0, window_y)
ZEND_END_ARG_INFO();

%%
override gtk_text_view_window_to_buffer_coords
PHP_METHOD
{
    gint window_x, window_y, buffer_x, buffer_y;
    GtkTextWindowType win_type;
    zval *php_win_type = NULL;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "Vii", &php_win_type, &window_x, &window_y))
        return;

    if (php_win_type && phpg_gvalue_get_enum(GTK_TYPE_TEXT_WINDOW_TYPE, php_win_type, (gint *)&win_type) == FAILURE)
        return;

    gtk_text_view_window_to_buffer_coords(GTK_TEXT_VIEW(PHPG_GOBJECT(this_ptr)), win_type, window_x, window_y, &buffer_x, &buffer_y);
    php_gtk_build_value(&return_value, "(ii)", buffer_x, buffer_y);
}

%% }}}
