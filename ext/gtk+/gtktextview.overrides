/* vim: set ft=cpp fdm=marker et: */

%% {{{ ignores
%%
ignore
    gtk_text_view_new
%% }}}

%% {{{ GtkTextBuffer

%%
override gtk_text_buffer_get_start_iter
PHP_METHOD
{
    GtkTextIter iter;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    gtk_text_buffer_get_start_iter(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter);
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
override gtk_text_buffer_get_end_iter
PHP_METHOD
{
    GtkTextIter iter;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    gtk_text_buffer_get_end_iter(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter);
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
add-arginfo GtkTextBuffer get_iter_at_line
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, line_number)
ZEND_END_ARG_INFO();

%%
override gtk_text_buffer_get_iter_at_line
PHP_METHOD
{
    GtkTextIter iter;
    int line_number;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "i", &line_number))
        return;

    gtk_text_buffer_get_iter_at_line(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter, line_number);
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
add-arginfo GtkTextBuffer get_iter_at_line_offset
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, line_number)
    ZEND_ARG_INFO(0, char_offset)
ZEND_END_ARG_INFO();

%%
override gtk_text_buffer_get_iter_at_line_offset
PHP_METHOD
{
    GtkTextIter iter;
    int line_number, char_offset;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "ii", &line_number, &char_offset))
        return;

    gtk_text_buffer_get_iter_at_line_offset(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter, line_number, char_offset);
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
add-arginfo GtkTextBuffer get_iter_at_line_index
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, line_number)
    ZEND_ARG_INFO(0, byte_offset)
ZEND_END_ARG_INFO();

%%
override gtk_text_buffer_get_iter_at_line_index
PHP_METHOD
{
    GtkTextIter iter;
    int line_number, byte_offset = 0;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "ii", &line_number, byte_offset))
        return;

    gtk_text_buffer_get_iter_at_line_index(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter, line_number, byte_offset);
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
add-arginfo GtkTextBuffer get_iter_at_offset
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, char_offset)
ZEND_END_ARG_INFO();

%%
override gtk_text_buffer_get_iter_at_offset
PHP_METHOD
{
    GtkTextIter iter;
    int char_offset;

    NOT_STATIC_METHOD();
    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "i", &char_offset))
        return;

    gtk_text_buffer_get_iter_at_offset(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), &iter, char_offset);
    phpg_gboxed_new(&return_value, GTK_TYPE_TEXT_ITER, &iter, TRUE, TRUE TSRMLS_CC);
}

%%
add-arginfo GtkTextBuffer set_text
static
ZEND_BEGIN_ARG_INFO(ARGINFO_NAME, 0)
    ZEND_ARG_INFO(0, text)
    ZEND_ARG_INFO(0, length)
ZEND_END_ARG_INFO();

%%
override gtk_text_buffer_set_text
PHP_METHOD
{
    char *text;
    int text_len;
    zend_bool free_text;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "u#", &text, &text_len, &free_text))
        return;

    gtk_text_buffer_set_text(GTK_TEXT_BUFFER(PHPG_GOBJECT(this_ptr)), text, text_len);

    if (free_text) g_free(text);
}

%% }}}
