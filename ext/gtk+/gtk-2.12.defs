;; -*- scheme -*-

(include "gtk-2.12-types.defs")

;; From gtkbuildable.h

(define-function gtk_buildable_get_type
  (c-name "gtk_buildable_get_type")
  (return-type "GType")
)

(define-method set_name
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_set_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_name
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_get_name")
  (return-type "const-gchar*")
)

(define-method add_child
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_add_child")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "type" (null-ok))
  )
)

(define-method set_buildable_property
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_set_buildable_property")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("const-gchar*" "name")
    '("const-GValue*" "value")
  )
)

(define-method construct_child
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_construct_child")
  (return-type "GObject*")
  (parameters
    '("GtkBuilder*" "builder")
    '("const-gchar*" "name")
  )
)

(define-method custom_tag_start
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_custom_tag_start")
  (return-type "gboolean")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "tagname")
    '("GMarkupParser*" "parser")
    '("gpointer*" "data")
  )
)

(define-method custom_tag_end
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_custom_tag_end")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "tagname")
    '("gpointer*" "data")
  )
)

(define-method custom_finished
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_custom_finished")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "tagname")
    '("gpointer" "data")
  )
)

(define-method parser_finished
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_parser_finished")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
  )
)

(define-method get_internal_child
  (of-object "GtkBuildable")
  (c-name "gtk_buildable_get_internal_child")
  (return-type "GObject*")
  (parameters
    '("GtkBuilder*" "builder")
    '("const-gchar*" "childname")
  )
)

(define-virtual set_name
  (of-object "GtkBuildable")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-virtual get_name
  (of-object "GtkBuildable")
  (return-type "constgchar*")
)

(define-virtual add_child
  (of-object "GtkBuildable")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "type")
  )
)

(define-virtual set_buildable_property
  (of-object "GtkBuildable")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("const-gchar*" "name")
    '("const-GValue*" "value")
  )
)

(define-virtual construct_child
  (of-object "GtkBuildable")
  (return-type "GObject*")
  (parameters
    '("GtkBuilder*" "builder")
    '("const-gchar*" "name")
  )
)

(define-virtual custom_tag_start
  (of-object "GtkBuildable")
  (return-type "gboolean")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "tagname")
    '("GMarkupParser*" "parser")
    '("gpointer*" "data")
  )
)

(define-virtual custom_tag_end
  (of-object "GtkBuildable")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "tagname")
    '("gpointer*" "data")
  )
)

(define-virtual custom_finished
  (of-object "GtkBuildable")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
    '("GObject*" "child")
    '("const-gchar*" "tagname")
    '("gpointer" "data")
  )
)

(define-virtual parser_finished
  (of-object "GtkBuildable")
  (return-type "none")
  (parameters
    '("GtkBuilder*" "builder")
  )
)

(define-virtual get_internal_child
  (of-object "GtkBuildable")
  (return-type "GObject*")
  (parameters
    '("GtkBuilder*" "builder")
    '("const-gchar*" "childname")
  )
)



;; From gtkbuilder.h

(define-function builder_error_quark
  (c-name "gtk_builder_error_quark")
  (return-type "GQuark")
)

(define-function gtk_builder_get_type
  (c-name "gtk_builder_get_type")
  (return-type "GType")
)

(define-function gtk_builder_new
  (c-name "gtk_builder_new")
  (is-constructor-of "GtkBuilder")
  (return-type "GtkBuilder*")
)

(define-method add_from_file
  (of-object "GtkBuilder")
  (c-name "gtk_builder_add_from_file")
  (return-type "guint")
  (parameters
    '("const-gchar*" "filename")
    '("GError**" "error")
  )
)

(define-method add_from_string
  (of-object "GtkBuilder")
  (c-name "gtk_builder_add_from_string")
  (return-type "guint")
  (parameters
    '("const-gchar*" "buffer")
    '("gsize" "length")
    '("GError**" "error")
  )
)

(define-method get_object
  (of-object "GtkBuilder")
  (c-name "gtk_builder_get_object")
  (return-type "GObject*")
  (parameters
    '("const-gchar*" "name")
  )
)

(define-method get_objects
  (of-object "GtkBuilder")
  (c-name "gtk_builder_get_objects")
  (return-type "GSList*")
)

(define-method connect_signals
  (of-object "GtkBuilder")
  (c-name "gtk_builder_connect_signals")
  (return-type "none")
  (parameters
    '("gpointer" "user_data")
  )
)

(define-method connect_signals_full
  (of-object "GtkBuilder")
  (c-name "gtk_builder_connect_signals_full")
  (return-type "none")
  (parameters
    '("GtkBuilderConnectFunc" "func")
    '("gpointer" "user_data")
  )
)

(define-method set_translation_domain
  (of-object "GtkBuilder")
  (c-name "gtk_builder_set_translation_domain")
  (return-type "none")
  (parameters
    '("const-gchar*" "domain" (null-ok))
  )
)

(define-method get_translation_domain
  (of-object "GtkBuilder")
  (c-name "gtk_builder_get_translation_domain")
  (return-type "const-gchar*")
)

(define-method get_type_from_name
  (of-object "GtkBuilder")
  (c-name "gtk_builder_get_type_from_name")
  (return-type "GType")
  (parameters
    '("const-char*" "type_name")
  )
)

(define-method value_from_string
  (of-object "GtkBuilder")
  (c-name "gtk_builder_value_from_string")
  (return-type "gboolean")
  (parameters
    '("GParamSpec*" "pspec")
    '("const-gchar*" "string")
    '("GValue*" "value")
    '("GError**" "error")
  )
)

(define-method value_from_string_type
  (of-object "GtkBuilder")
  (c-name "gtk_builder_value_from_string_type")
  (return-type "gboolean")
  (parameters
    '("GType" "type")
    '("const-gchar*" "string")
    '("GValue*" "value")
    '("GError**" "error")
  )
)

(define-virtual get_type_from_name
  (of-object "GtkBuilder")
  (return-type "GType")
  (parameters
    '("const-char*" "type_name")
  )
)



;; From gtkaboutdialog.h

(define-method get_program_name
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_get_program_name")
  (return-type "const-gchar*")
)

(define-method set_program_name
  (of-object "GtkAboutDialog")
  (c-name "gtk_about_dialog_set_program_name")
  (return-type "none")
  (parameters
    '("const-gchar*" "name")
  )
)



;; From gtkaction.h

(define-method create_menu
  (of-object "GtkAction")
  (c-name "gtk_action_create_menu")
  (return-type "GtkWidget*")
)



;; From gtkcelllayout.h

(define-method get_cells
  (of-object "GtkCellLayout")
  (c-name "gtk_cell_layout_get_cells")
  (return-type "GList*")
)



;; From gtkentrycompletion.h

(define-method get_completion_prefix
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_get_completion_prefix")
  (return-type "const-gchar*")
)

(define-method set_inline_selection
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_set_inline_selection")
  (return-type "none")
  (parameters
    '("gboolean" "inline_selection")
  )
)

(define-method get_inline_selection
  (of-object "GtkEntryCompletion")
  (c-name "gtk_entry_completion_get_inline_selection")
  (return-type "gboolean")
)



;; From gtkentry.h

(define-method set_cursor_hadjustment
  (of-object "GtkEntry")
  (c-name "gtk_entry_set_cursor_hadjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment" (null-ok))
  )
)

(define-method get_cursor_hadjustment
  (of-object "GtkEntry")
  (c-name "gtk_entry_get_cursor_hadjustment")
  (return-type "GtkAdjustment*")
)



;; From gtkicontheme.h

(define-method choose_icon
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_choose_icon")
  (return-type "GtkIconInfo*")
  (parameters
    '("const-gchar*[]" "icon_names")
    '("gint" "size")
    '("GtkIconLookupFlags" "flags")
  )
)

(define-method list_contexts
  (of-object "GtkIconTheme")
  (c-name "gtk_icon_theme_list_contexts")
  (return-type "GList*")
)



;; From gtkiconview.h

(define-method convert_widget_to_bin_window_coords
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_convert_widget_to_bin_window_coords")
  (return-type "none")
  (parameters
    '("gint" "wx")
    '("gint" "wy")
    '("gint*" "bx")
    '("gint*" "by")
  )
)

(define-method set_tooltip_item
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_tooltip_item")
  (return-type "none")
  (parameters
    '("GtkTooltip*" "tooltip")
    '("GtkTreePath*" "path")
  )
)

(define-method set_tooltip_cell
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_tooltip_cell")
  (return-type "none")
  (parameters
    '("GtkTooltip*" "tooltip")
    '("GtkTreePath*" "path")
    '("GtkCellRenderer*" "cell" (null-ok))
  )
)

(define-method get_tooltip_context
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_tooltip_context")
  (return-type "gboolean")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("gboolean" "keyboard_tip")
    '("GtkTreeModel**" "model")
    '("GtkTreePath**" "path")
    '("GtkTreeIter*" "iter")
  )
)

(define-method set_tooltip_column
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_set_tooltip_column")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method get_tooltip_column
  (of-object "GtkIconView")
  (c-name "gtk_icon_view_get_tooltip_column")
  (return-type "gint")
)



;; From gtkliststore.h

(define-method set_valuesv
  (of-object "GtkListStore")
  (c-name "gtk_list_store_set_valuesv")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint*" "columns")
    '("GValue*" "values")
    '("gint" "n_values")
  )
)



;; From gtkmenutoolbutton.h

(define-method set_arrow_tooltip_text
  (of-object "GtkMenuToolButton")
  (c-name "gtk_menu_tool_button_set_arrow_tooltip_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text")
  )
)

(define-method set_arrow_tooltip_markup
  (of-object "GtkMenuToolButton")
  (c-name "gtk_menu_tool_button_set_arrow_tooltip_markup")
  (return-type "none")
  (parameters
    '("const-gchar*" "markup")
  )
)



;; From gtknotebook.h

(define-method set_group
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_set_group")
  (return-type "none")
  (parameters
    '("gpointer" "group")
  )
)

(define-method get_group
  (of-object "GtkNotebook")
  (c-name "gtk_notebook_get_group")
  (return-type "gpointer")
)



;; From gtkpagesetup.h

(define-function page_setup_new_from_file
  (c-name "gtk_page_setup_new_from_file")
  (return-type "GtkPageSetup*")
  (parameters
    '("const-gchar*" "file_name")
    '("GError**" "error")
  )
)

(define-function page_setup_new_from_key_file
  (c-name "gtk_page_setup_new_from_key_file")
  (return-type "GtkPageSetup*")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
    '("GError**" "error")
  )
)

(define-method to_file
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_to_file")
  (return-type "gboolean")
  (parameters
    '("const-char*" "file_name")
    '("GError**" "error")
  )
)

(define-method to_key_file
  (of-object "GtkPageSetup")
  (c-name "gtk_page_setup_to_key_file")
  (return-type "none")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
  )
)



;; From gtkpapersize.h

(define-function paper_size_get_paper_sizes
  (c-name "gtk_paper_size_get_paper_sizes")
  (return-type "GList*")
  (parameters
    '("gboolean" "include_custom")
  )
)

(define-function paper_size_new_from_key_file
  (c-name "gtk_paper_size_new_from_key_file")
  (return-type "GtkPaperSize*")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
    '("GError**" "error")
  )
)

(define-method to_key_file
  (of-object "GtkPaperSize")
  (c-name "gtk_paper_size_to_key_file")
  (return-type "none")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
  )
)



;; From gtkprintsettings.h

(define-function print_settings_new_from_file
  (c-name "gtk_print_settings_new_from_file")
  (return-type "GtkPrintSettings*")
  (parameters
    '("const-gchar*" "file_name")
    '("GError**" "error")
  )
)

(define-method to_file
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_to_file")
  (return-type "gboolean")
  (parameters
    '("const-gchar*" "file_name")
    '("GError**" "error")
  )
)

(define-function print_settings_new_from_key_file
  (c-name "gtk_print_settings_new_from_key_file")
  (return-type "GtkPrintSettings*")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
    '("GError**" "error")
  )
)

(define-method to_key_file
  (of-object "GtkPrintSettings")
  (c-name "gtk_print_settings_to_key_file")
  (return-type "none")
  (parameters
    '("GKeyFile*" "key_file")
    '("const-gchar*" "group_name")
  )
)



;; From gtkrange.h

(define-method set_show_fill_level
  (of-object "GtkRange")
  (c-name "gtk_range_set_show_fill_level")
  (return-type "none")
  (parameters
    '("gboolean" "show_fill_level")
  )
)

(define-method get_show_fill_level
  (of-object "GtkRange")
  (c-name "gtk_range_get_show_fill_level")
  (return-type "gboolean")
)

(define-method set_restrict_to_fill_level
  (of-object "GtkRange")
  (c-name "gtk_range_set_restrict_to_fill_level")
  (return-type "none")
  (parameters
    '("gboolean" "restrict_to_fill_level")
  )
)

(define-method get_restrict_to_fill_level
  (of-object "GtkRange")
  (c-name "gtk_range_get_restrict_to_fill_level")
  (return-type "gboolean")
)

(define-method set_fill_level
  (of-object "GtkRange")
  (c-name "gtk_range_set_fill_level")
  (return-type "none")
  (parameters
    '("gdouble" "fill_level")
  )
)

(define-method get_fill_level
  (of-object "GtkRange")
  (c-name "gtk_range_get_fill_level")
  (return-type "gdouble")
)



;; From gtkrc.h

(define-function rc_parse_color_full
  (c-name "gtk_rc_parse_color_full")
  (return-type "guint")
  (parameters
    '("GScanner*" "scanner")
    '("GtkRcStyle*" "style")
    '("GdkColor*" "color")
  )
)



;; From gtkrecentaction.h

(define-function gtk_recent_action_get_type
  (c-name "gtk_recent_action_get_type")
  (return-type "GType")
)

(define-function gtk_recent_action_new
  (c-name "gtk_recent_action_new")
  (is-constructor-of "GtkRecentAction")
  (return-type "GtkAction*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "label")
    '("const-gchar*" "tooltip")
    '("const-gchar*" "stock_id")
  )
)

(define-function recent_action_new_for_manager
  (c-name "gtk_recent_action_new_for_manager")
  (return-type "GtkAction*")
  (parameters
    '("const-gchar*" "name")
    '("const-gchar*" "label")
    '("const-gchar*" "tooltip")
    '("const-gchar*" "stock_id")
    '("GtkRecentManager*" "manager")
  )
)

(define-method get_show_numbers
  (of-object "GtkRecentAction")
  (c-name "gtk_recent_action_get_show_numbers")
  (return-type "gboolean")
)

(define-method set_show_numbers
  (of-object "GtkRecentAction")
  (c-name "gtk_recent_action_set_show_numbers")
  (return-type "none")
  (parameters
    '("gboolean" "show_numbers")
  )
)



;; From gtkscalebutton.h

(define-function gtk_scale_button_get_type
  (c-name "gtk_scale_button_get_type")
  (return-type "GType")
)

(define-function gtk_scale_button_new
  (c-name "gtk_scale_button_new")
  (is-constructor-of "GtkScaleButton")
  (return-type "GtkWidget*")
  (parameters
    '("GtkIconSize" "size")
    '("gdouble" "min")
    '("gdouble" "max")
    '("gdouble" "step")
    '("const-gchar**" "icons")
  )
)

(define-method set_icons
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_set_icons")
  (return-type "none")
  (parameters
    '("const-gchar**" "icons")
  )
)

(define-method get_value
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_get_value")
  (return-type "gdouble")
)

(define-method set_value
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_set_value")
  (return-type "none")
  (parameters
    '("gdouble" "value")
  )
)

(define-method get_adjustment
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_get_adjustment")
  (return-type "GtkAdjustment*")
)

(define-method set_adjustment
  (of-object "GtkScaleButton")
  (c-name "gtk_scale_button_set_adjustment")
  (return-type "none")
  (parameters
    '("GtkAdjustment*" "adjustment")
  )
)



;; From gtkstatusicon.h

(define-method set_screen
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_set_screen")
  (return-type "none")
  (parameters
    '("GdkScreen*" "screen")
  )
)

(define-method get_screen
  (of-object "GtkStatusIcon")
  (c-name "gtk_status_icon_get_screen")
  (return-type "GdkScreen*")
)



;; From gtktextbuffer.h

(define-method add_mark
  (of-object "GtkTextBuffer")
  (c-name "gtk_text_buffer_add_mark")
  (return-type "none")
  (parameters
    '("GtkTextMark*" "mark")
    '("const-GtkTextIter*" "where")
  )
)



;; From gtktextmark.h

(define-function gtk_text_mark_new
  (c-name "gtk_text_mark_new")
  (is-constructor-of "GtkTextMark")
  (return-type "GtkTextMark*")
  (parameters
    '("const-gchar*" "name")
    '("gboolean" "left_gravity")
  )
)



;; From gtktooltip.h

(define-function gtk_tooltip_get_type
  (c-name "gtk_tooltip_get_type")
  (return-type "GType")
)

(define-method set_markup
  (of-object "GtkTooltip")
  (c-name "gtk_tooltip_set_markup")
  (return-type "none")
  (parameters
    '("const-gchar*" "markup" (null-ok))
  )
)

(define-method set_text
  (of-object "GtkTooltip")
  (c-name "gtk_tooltip_set_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text" (null-ok))
  )
)

(define-method set_icon
  (of-object "GtkTooltip")
  (c-name "gtk_tooltip_set_icon")
  (return-type "none")
  (parameters
    '("GdkPixbuf*" "pixbuf" (null-ok))
  )
)

(define-method set_icon_from_stock
  (of-object "GtkTooltip")
  (c-name "gtk_tooltip_set_icon_from_stock")
  (return-type "none")
  (parameters
    '("const-gchar*" "stock_id" (null-ok))
    '("GtkIconSize" "size")
  )
)

(define-method set_custom
  (of-object "GtkTooltip")
  (c-name "gtk_tooltip_set_custom")
  (return-type "none")
  (parameters
    '("GtkWidget*" "custom_widget")
  )
)

(define-function tooltip_trigger_tooltip_query
  (c-name "gtk_tooltip_trigger_tooltip_query")
  (return-type "none")
  (parameters
    '("GdkDisplay*" "display")
  )
)



;; From gtktoolitem.h

(define-method set_tooltip_text
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_set_tooltip_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text" (null-ok))
  )
)

(define-method set_tooltip_markup
  (of-object "GtkToolItem")
  (c-name "gtk_tool_item_set_tooltip_markup")
  (return-type "none")
  (parameters
    '("const-gchar*" "markup" (null-ok))
  )
)



;; From gtktreestore.h

(define-method set_valuesv
  (of-object "GtkTreeStore")
  (c-name "gtk_tree_store_set_valuesv")
  (return-type "none")
  (parameters
    '("GtkTreeIter*" "iter")
    '("gint*" "columns")
    '("GValue*" "values")
    '("gint" "n_values")
  )
)



;; From gtktreeviewcolumn.h

(define-method get_tree_view
  (of-object "GtkTreeViewColumn")
  (c-name "gtk_tree_view_column_get_tree_view")
  (return-type "GtkWidget*")
)



;; From gtktreeview.h

(define-method convert_widget_to_tree_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_convert_widget_to_tree_coords")
  (return-type "none")
  (parameters
    '("gint" "wx")
    '("gint" "wy")
    '("gint*" "tx")
    '("gint*" "ty")
  )
)

(define-method convert_tree_to_widget_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_convert_tree_to_widget_coords")
  (return-type "none")
  (parameters
    '("gint" "tx")
    '("gint" "ty")
    '("gint*" "wx")
    '("gint*" "wy")
  )
)

(define-method convert_widget_to_bin_window_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_convert_widget_to_bin_window_coords")
  (return-type "none")
  (parameters
    '("gint" "wx")
    '("gint" "wy")
    '("gint*" "bx")
    '("gint*" "by")
  )
)

(define-method convert_bin_window_to_widget_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_convert_bin_window_to_widget_coords")
  (return-type "none")
  (parameters
    '("gint" "bx")
    '("gint" "by")
    '("gint*" "wx")
    '("gint*" "wy")
  )
)

(define-method convert_tree_to_bin_window_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_convert_tree_to_bin_window_coords")
  (return-type "none")
  (parameters
    '("gint" "tx")
    '("gint" "ty")
    '("gint*" "bx")
    '("gint*" "by")
  )
)

(define-method convert_bin_window_to_tree_coords
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_convert_bin_window_to_tree_coords")
  (return-type "none")
  (parameters
    '("gint" "bx")
    '("gint" "by")
    '("gint*" "tx")
    '("gint*" "ty")
  )
)

(define-method set_show_expanders
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_show_expanders")
  (return-type "none")
  (parameters
    '("gboolean" "enabled")
  )
)

(define-method get_show_expanders
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_show_expanders")
  (return-type "gboolean")
)

(define-method set_level_indentation
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_level_indentation")
  (return-type "none")
  (parameters
    '("gint" "indentation")
  )
)

(define-method get_level_indentation
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_level_indentation")
  (return-type "gint")
)

(define-method is_rubber_banding_active
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_is_rubber_banding_active")
  (return-type "gboolean")
)

(define-method get_tooltip_context
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_tooltip_context")
  (return-type "gboolean")
  (parameters
    '("gint*" "x")
    '("gint*" "y")
    '("gboolean" "keyboard_tip")
    '("GtkTreeModel**" "model")
    '("GtkTreePath**" "path")
    '("GtkTreeIter*" "iter")
  )
)

(define-method set_tooltip_column
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_tooltip_column")
  (return-type "none")
  (parameters
    '("gint" "column")
  )
)

(define-method get_tooltip_column
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_get_tooltip_column")
  (return-type "gint")
)

(define-method set_tooltip_row
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_tooltip_row")
  (return-type "none")
  (parameters
    '("GtkTooltip*" "tooltip")
    '("GtkTreePath*" "path")
  )
)

(define-method set_tooltip_cell
  (of-object "GtkTreeView")
  (c-name "gtk_tree_view_set_tooltip_cell")
  (return-type "none")
  (parameters
    '("GtkTooltip*" "tooltip")
    '("GtkTreePath*" "path" (null-ok))
    '("GtkTreeViewColumn*" "column" (null-ok))
    '("GtkCellRenderer*" "cell" (null-ok))
  )
)

;; From gtkvolumebutton.h

(define-function gtk_volume_button_get_type
  (c-name "gtk_volume_button_get_type")
  (return-type "GType")
)

(define-function gtk_volume_button_new
  (c-name "gtk_volume_button_new")
  (is-constructor-of "GtkVolumeButton")
  (return-type "GtkWidget*")
)



;; From gtkwidget.h

(define-method keynav_failed
  (of-object "GtkWidget")
  (c-name "gtk_widget_keynav_failed")
  (return-type "gboolean")
  (parameters
    '("GtkDirectionType" "direction")
  )
)

(define-method error_bell
  (of-object "GtkWidget")
  (c-name "gtk_widget_error_bell")
  (return-type "none")
)

(define-method set_tooltip_window
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_tooltip_window")
  (return-type "none")
  (parameters
    '("GtkWindow*" "custom_window" (null-ok))
  )
)

(define-method get_tooltip_window
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_tooltip_window")
  (return-type "GtkWindow*")
)

(define-method trigger_tooltip_query
  (of-object "GtkWidget")
  (c-name "gtk_widget_trigger_tooltip_query")
  (return-type "none")
)

(define-method set_tooltip_text
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_tooltip_text")
  (return-type "none")
  (parameters
    '("const-gchar*" "text" (null-ok))
  )
)

(define-method get_tooltip_text
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_tooltip_text")
  (return-type "gchar*")
)

(define-method set_tooltip_markup
  (of-object "GtkWidget")
  (c-name "gtk_widget_set_tooltip_markup")
  (return-type "none")
  (parameters
    '("const-gchar*" "markup" (null-ok))
  )
)

(define-method get_tooltip_markup
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_tooltip_markup")
  (return-type "gchar*")
)

(define-method modify_cursor
  (of-object "GtkWidget")
  (c-name "gtk_widget_modify_cursor")
  (return-type "none")
  (parameters
    '("const-GdkColor*" "primary" (null-ok))
    '("const-GdkColor*" "secondary" (null-ok))
  )
)

(define-method get_has_tooltip
  (of-object "GtkWidget")
  (c-name "gtk_widget_get_has_tooltip")
  (return-type "gboolean")
)



;; From gtkwindow.h

(define-method set_opacity
  (of-object "GtkWindow")
  (c-name "gtk_window_set_opacity")
  (return-type "none")
  (parameters
    '("gdouble" "opacity")
  )
)

(define-method get_opacity
  (of-object "GtkWindow")
  (c-name "gtk_window_get_opacity")
  (return-type "gdouble")
)

(define-method set_startup_id
  (of-object "GtkWindow")
  (c-name "gtk_window_set_startup_id")
  (return-type "none")
  (parameters
    '("const-gchar*" "startup_id")
  )
)