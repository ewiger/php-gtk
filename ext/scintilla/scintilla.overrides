/* vim: set ft=cpp: */
%%
headers
#include <gtkscintilla2/gtkscintilla.h>
#include "ext/gtk+/php_gtk+.h"
#include "php_gtk_api.h"
%%
ignore-glob
  *_get_type

%%
override gtk_scintilla_get_text
PHP_METHOD
{
    int length, result;
    char *text;
    length = 0;

    NOT_STATIC_METHOD();

    if(!php_gtk_parse_args(ZEND_NUM_ARGS(), "|i", length)) {
        return;
    }

    if(length==0) {
        length = gtk_scintilla_get_length(GTK_SCINTILLA(PHPG_GOBJECT(this_ptr)));
        length++;
    }

    text = safe_emalloc(length, sizeof(char), 0);

    result = gtk_scintilla_get_text(GTK_SCINTILLA(PHPG_GOBJECT(this_ptr)), length, text);
    
    if(result) {
        RETVAL_STRINGL(text, length-1, 1);
    }

    efree(text);
}

%%
override gtk_scintilla_set_text
PHP_METHOD
{
    char *text, *utf8;
    zend_bool free_text, free_utf8 = TRUE;
    gsize len =  0;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "u", &utf8, &free_utf8))
        return;
    
    text = phpg_from_utf8(utf8, strlen(utf8), &len, &free_text TSRMLS_CC);

    gtk_scintilla_set_text(GTK_SCINTILLA(PHPG_GOBJECT(this_ptr)), text);

    if (free_utf8) {
        g_free(utf8);
    }

    if (free_text) {
        g_free(text);
    }
}

%%
override gtk_scintilla_get_cur_line
PHP_METHOD
{
    gint length;
    gchar *text, *utf;
    gsize tlen;
    zend_bool free_result = FALSE;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    GtkScintilla *scintilla = GTK_SCINTILLA(PHPG_GOBJECT(this_ptr));

    length = gtk_scintilla_line_length(scintilla,
                gtk_scintilla_line_from_position(scintilla,
                    gtk_scintilla_get_current_pos(scintilla))) + 1;
    utf = safe_emalloc(length, sizeof(gchar), 0);
    gtk_scintilla_get_cur_line(scintilla, length, utf);
    text = phpg_from_utf8(utf, strlen(utf), &tlen, &free_result TSRMLS_CC);
    
    if (text) {
        RETVAL_STRINGL((char *)text, tlen, 1);
    } else {
       php_error(E_WARNING,
                    "%s::%s(): could not convert return value from UTF-8",
                    get_active_class_name(NULL TSRMLS_CC),
                    get_active_function_name(TSRMLS_C));
    }

    if (free_result)
        g_free(text);
}

%%
override gtk_scintilla_get_sel_text
PHP_METHOD
{
    gint length;
    gchar *text;
    zend_bool free_text = FALSE;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), ""))
        return;

    GtkScintilla *scintilla = GTK_SCINTILLA(PHPG_GOBJECT(this_ptr));

    length = gtk_scintilla_get_selection_end(scintilla) - 
                gtk_scintilla_get_selection_start(scintilla) + 1;
    text = safe_emalloc(length, sizeof(gchar), 0);
    text[length-1] = 0;
    gtk_scintilla_get_sel_text(scintilla, text);
    
    RETVAL_STRINGL(text, length-1, 0);

    if (free_text)
        g_free(text);
}
