/* vim: set ft=cpp: */
%%
headers
#include <gtkscintilla2/gtkscintilla.h>
#include "ext/gtk+/php_gtk+.h"
#include "php_gtk_api.h"
%%
ignore-glob
  *_get_type

%%
override gtk_scintilla_get_text
PHP_METHOD
{
    int length, result;
    char *text;
    length = 0;

    NOT_STATIC_METHOD();

    if(!php_gtk_parse_args(ZEND_NUM_ARGS(), "|i", length)) {
        return;
    }

    if(length==0) {
        length = gtk_scintilla_get_length(GTK_SCINTILLA(PHPG_GOBJECT(this_ptr)));
        length++;
    }

    text = safe_emalloc(length, sizeof(char), 0);

    result = gtk_scintilla_get_text(GTK_SCINTILLA(PHPG_GOBJECT(this_ptr)), length, text);
    
    if(result) {
        RETVAL_STRINGL(text, length-1, 1);
    }

    efree(text);
}

%%
override gtk_scintilla_set_text
PHP_METHOD
{
    char *utf8;
    gchar *text;

    zend_bool free_utf8 = FALSE;
    zend_bool free_text = FALSE;

    gsize *len = 0;

    NOT_STATIC_METHOD();

    if (!php_gtk_parse_args(ZEND_NUM_ARGS(), "s", &utf8, &free_utf8))
        return;
    
    text = phpg_from_utf8(utf8, strlen(utf8), &len, &free_text TSRMLS_CC);

    if (text && free_text) {
        gtk_scintilla_set_text(GTK_SCINTILLA(PHPG_GOBJECT(this_ptr)), text);
        g_free(text);
    }

    if (free_utf8)
        g_free(text);
}
