/* vim: set ft=cpp: */
%%
headers
#include <glade/glade.h>
%%
ignore-glob
  *_get_type
%%
ignore
  glade_xml_new
  glade_xml_signal_connect_full
  glade_xml_signal_connect_data
  glade_xml_signal_autoconnect_full
%%
override glade_xml_signal_connect
static void glade_connect_one(const gchar *handler_name, GtkObject *obj, const
							  gchar *signal_name, const gchar *signal_data,
							  GtkObject *connect_object, gboolean after,
							  zval *callback_data)
{
	zval **callback = NULL, **extra = NULL, **pass_object = NULL;
	zval **callback_filename = NULL, **callback_lineno = NULL;
	zval *object;

	zend_hash_index_find(Z_ARRVAL_P(callback_data), 0, (void **)&callback);
	zend_hash_index_find(Z_ARRVAL_P(callback_data), 1, (void **)&extra);
	zend_hash_index_find(Z_ARRVAL_P(callback_data), 1, (void **)&pass_object);
	zend_hash_index_find(Z_ARRVAL_P(callback_data), 2, (void **)&callback_filename);
	zend_hash_index_find(Z_ARRVAL_P(callback_data), 3, (void **)&callback_lineno);

	if (connect_object) {
		zval *temp;

		Z_LVAL_PP(pass_object) = 0;
		object = php_gtk_new(connect_object);
		MAKE_STD_ZVAL(temp);
		array_init(temp);
		add_next_index_zval(temp, object);
		php_array_merge(Z_ARRVAL_P(temp), Z_ARRVAL_PP(extra), 0);
		REPLACE_ZVAL_VALUE(extra, temp, 0);
	}

	gtk_signal_connect_full(obj, signal_name, NULL,
							(GtkCallbackMarshal)php_gtk_callback_marshal,
							callback_data, php_gtk_destroy_notify, FALSE, after);
}

PHP_FUNCTION(wrap_glade_xml_signal_connect)
{
	char *handler_name = NULL;
	zval *callback = NULL;
	zval *extra;
	zval *data;
	char *callback_filename;
	uint callback_lineno;

	NOT_STATIC_METHOD();

	if (ZEND_NUM_ARGS() < 2) {
		php_error(E_WARNING, "%s() requires at least 2 arguments, %d given",
				  get_active_function_name(), ZEND_NUM_ARGS());
		return;
	}

	if (!php_gtk_parse_args(2, "sV", &handler_name, &callback))
		return;

	callback_filename = zend_get_executed_filename(ELS_C);
	callback_lineno = zend_get_executed_lineno(ELS_C);
	extra = php_gtk_func_args_as_hash(ZEND_NUM_ARGS(), 2, ZEND_NUM_ARGS());
	data = php_gtk_build_value("(VNisi)", callback, extra, 1, callback_filename, callback_lineno);
	glade_xml_signal_connect_full(GLADE_XML(PHP_GTK_GET(this_ptr)), handler_name,
								  (GladeXMLConnectFunc)glade_connect_one, data);
	RETURN_NULL();
}
%%
override glade_xml_autoconnect
static void glade_connect_auto(const gchar *handler_name, GtkObject *obj,
							   const gchar *signal_name, const gchar *signal_data,
							   GtkObject *connect_object, gboolean after,
							   zval *callback_data)
{
}

PHP_FUNCTION(wrap_glade_xml_signal_autoconnect)
{
}
